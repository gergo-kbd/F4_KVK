
gyarto_gyakorlas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005204  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08005490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000214  20000090  08005520  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002a4  08005520  000202a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e351  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e7f  00000000  00000000  0002e411  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e10  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d08  00000000  00000000  000310a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006280  00000000  00000000  00031da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004a95  00000000  00000000  00038028  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003cabd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003af4  00000000  00000000  0003cb3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080053b4 	.word	0x080053b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	080053b4 	.word	0x080053b4

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <__aeabi_uldivmod>:
 800021c:	b953      	cbnz	r3, 8000234 <__aeabi_uldivmod+0x18>
 800021e:	b94a      	cbnz	r2, 8000234 <__aeabi_uldivmod+0x18>
 8000220:	2900      	cmp	r1, #0
 8000222:	bf08      	it	eq
 8000224:	2800      	cmpeq	r0, #0
 8000226:	bf1c      	itt	ne
 8000228:	f04f 31ff 	movne.w	r1, #4294967295
 800022c:	f04f 30ff 	movne.w	r0, #4294967295
 8000230:	f000 b97a 	b.w	8000528 <__aeabi_idiv0>
 8000234:	f1ad 0c08 	sub.w	ip, sp, #8
 8000238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800023c:	f000 f806 	bl	800024c <__udivmoddi4>
 8000240:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000248:	b004      	add	sp, #16
 800024a:	4770      	bx	lr

0800024c <__udivmoddi4>:
 800024c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000250:	468c      	mov	ip, r1
 8000252:	460d      	mov	r5, r1
 8000254:	4604      	mov	r4, r0
 8000256:	9e08      	ldr	r6, [sp, #32]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d151      	bne.n	8000300 <__udivmoddi4+0xb4>
 800025c:	428a      	cmp	r2, r1
 800025e:	4617      	mov	r7, r2
 8000260:	d96d      	bls.n	800033e <__udivmoddi4+0xf2>
 8000262:	fab2 fe82 	clz	lr, r2
 8000266:	f1be 0f00 	cmp.w	lr, #0
 800026a:	d00b      	beq.n	8000284 <__udivmoddi4+0x38>
 800026c:	f1ce 0c20 	rsb	ip, lr, #32
 8000270:	fa01 f50e 	lsl.w	r5, r1, lr
 8000274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000278:	fa02 f70e 	lsl.w	r7, r2, lr
 800027c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000280:	fa00 f40e 	lsl.w	r4, r0, lr
 8000284:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000288:	0c25      	lsrs	r5, r4, #16
 800028a:	fbbc f8fa 	udiv	r8, ip, sl
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb0a cc18 	mls	ip, sl, r8, ip
 8000296:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029a:	fb08 f309 	mul.w	r3, r8, r9
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x6c>
 80002a2:	19ed      	adds	r5, r5, r7
 80002a4:	f108 32ff 	add.w	r2, r8, #4294967295
 80002a8:	f080 8123 	bcs.w	80004f2 <__udivmoddi4+0x2a6>
 80002ac:	42ab      	cmp	r3, r5
 80002ae:	f240 8120 	bls.w	80004f2 <__udivmoddi4+0x2a6>
 80002b2:	f1a8 0802 	sub.w	r8, r8, #2
 80002b6:	443d      	add	r5, r7
 80002b8:	1aed      	subs	r5, r5, r3
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c8:	fb00 f909 	mul.w	r9, r0, r9
 80002cc:	45a1      	cmp	r9, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x98>
 80002d0:	19e4      	adds	r4, r4, r7
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 810a 	bcs.w	80004ee <__udivmoddi4+0x2a2>
 80002da:	45a1      	cmp	r9, r4
 80002dc:	f240 8107 	bls.w	80004ee <__udivmoddi4+0x2a2>
 80002e0:	3802      	subs	r0, #2
 80002e2:	443c      	add	r4, r7
 80002e4:	eba4 0409 	sub.w	r4, r4, r9
 80002e8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d061      	beq.n	80003b6 <__udivmoddi4+0x16a>
 80002f2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002f6:	2300      	movs	r3, #0
 80002f8:	6034      	str	r4, [r6, #0]
 80002fa:	6073      	str	r3, [r6, #4]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xc8>
 8000304:	2e00      	cmp	r6, #0
 8000306:	d054      	beq.n	80003b2 <__udivmoddi4+0x166>
 8000308:	2100      	movs	r1, #0
 800030a:	e886 0021 	stmia.w	r6, {r0, r5}
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	f040 808e 	bne.w	800043a <__udivmoddi4+0x1ee>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xdc>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fa 	bhi.w	800051c <__udivmoddi4+0x2d0>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0503 	sbc.w	r5, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	46ac      	mov	ip, r5
 8000332:	2e00      	cmp	r6, #0
 8000334:	d03f      	beq.n	80003b6 <__udivmoddi4+0x16a>
 8000336:	e886 1010 	stmia.w	r6, {r4, ip}
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	b912      	cbnz	r2, 8000346 <__udivmoddi4+0xfa>
 8000340:	2701      	movs	r7, #1
 8000342:	fbb7 f7f2 	udiv	r7, r7, r2
 8000346:	fab7 fe87 	clz	lr, r7
 800034a:	f1be 0f00 	cmp.w	lr, #0
 800034e:	d134      	bne.n	80003ba <__udivmoddi4+0x16e>
 8000350:	1beb      	subs	r3, r5, r7
 8000352:	0c3a      	lsrs	r2, r7, #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb3 f8f2 	udiv	r8, r3, r2
 800035e:	0c25      	lsrs	r5, r4, #16
 8000360:	fb02 3318 	mls	r3, r2, r8, r3
 8000364:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000368:	fb0c f308 	mul.w	r3, ip, r8
 800036c:	42ab      	cmp	r3, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x134>
 8000370:	19ed      	adds	r5, r5, r7
 8000372:	f108 30ff 	add.w	r0, r8, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x132>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f200 80d1 	bhi.w	8000520 <__udivmoddi4+0x2d4>
 800037e:	4680      	mov	r8, r0
 8000380:	1aed      	subs	r5, r5, r3
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb5 f0f2 	udiv	r0, r5, r2
 8000388:	fb02 5510 	mls	r5, r2, r0, r5
 800038c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000390:	fb0c fc00 	mul.w	ip, ip, r0
 8000394:	45a4      	cmp	ip, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x15c>
 8000398:	19e4      	adds	r4, r4, r7
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x15a>
 80003a0:	45a4      	cmp	ip, r4
 80003a2:	f200 80b8 	bhi.w	8000516 <__udivmoddi4+0x2ca>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	e79d      	b.n	80002ee <__udivmoddi4+0xa2>
 80003b2:	4631      	mov	r1, r6
 80003b4:	4630      	mov	r0, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	f1ce 0420 	rsb	r4, lr, #32
 80003be:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003c6:	fa20 f804 	lsr.w	r8, r0, r4
 80003ca:	0c3a      	lsrs	r2, r7, #16
 80003cc:	fa25 f404 	lsr.w	r4, r5, r4
 80003d0:	ea48 0803 	orr.w	r8, r8, r3
 80003d4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003d8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003dc:	fb02 4411 	mls	r4, r2, r1, r4
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003e8:	fb01 f30c 	mul.w	r3, r1, ip
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1bc>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fa:	f080 808a 	bcs.w	8000512 <__udivmoddi4+0x2c6>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	f240 8087 	bls.w	8000512 <__udivmoddi4+0x2c6>
 8000404:	3902      	subs	r1, #2
 8000406:	443d      	add	r5, r7
 8000408:	1aeb      	subs	r3, r5, r3
 800040a:	fa1f f588 	uxth.w	r5, r8
 800040e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000412:	fb02 3310 	mls	r3, r2, r0, r3
 8000416:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041a:	fb00 f30c 	mul.w	r3, r0, ip
 800041e:	42ab      	cmp	r3, r5
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1e6>
 8000422:	19ed      	adds	r5, r5, r7
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d26f      	bcs.n	800050a <__udivmoddi4+0x2be>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d96d      	bls.n	800050a <__udivmoddi4+0x2be>
 800042e:	3802      	subs	r0, #2
 8000430:	443d      	add	r5, r7
 8000432:	1aeb      	subs	r3, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e78f      	b.n	800035a <__udivmoddi4+0x10e>
 800043a:	f1c1 0720 	rsb	r7, r1, #32
 800043e:	fa22 f807 	lsr.w	r8, r2, r7
 8000442:	408b      	lsls	r3, r1
 8000444:	fa05 f401 	lsl.w	r4, r5, r1
 8000448:	ea48 0303 	orr.w	r3, r8, r3
 800044c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000450:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000454:	40fd      	lsrs	r5, r7
 8000456:	ea4e 0e04 	orr.w	lr, lr, r4
 800045a:	fbb5 f9fc 	udiv	r9, r5, ip
 800045e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000462:	fb0c 5519 	mls	r5, ip, r9, r5
 8000466:	fa1f f883 	uxth.w	r8, r3
 800046a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800046e:	fb09 f408 	mul.w	r4, r9, r8
 8000472:	42ac      	cmp	r4, r5
 8000474:	fa02 f201 	lsl.w	r2, r2, r1
 8000478:	fa00 fa01 	lsl.w	sl, r0, r1
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x244>
 800047e:	18ed      	adds	r5, r5, r3
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d243      	bcs.n	800050e <__udivmoddi4+0x2c2>
 8000486:	42ac      	cmp	r4, r5
 8000488:	d941      	bls.n	800050e <__udivmoddi4+0x2c2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	441d      	add	r5, r3
 8000490:	1b2d      	subs	r5, r5, r4
 8000492:	fa1f fe8e 	uxth.w	lr, lr
 8000496:	fbb5 f0fc 	udiv	r0, r5, ip
 800049a:	fb0c 5510 	mls	r5, ip, r0, r5
 800049e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x26e>
 80004aa:	18e4      	adds	r4, r4, r3
 80004ac:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b0:	d229      	bcs.n	8000506 <__udivmoddi4+0x2ba>
 80004b2:	45a0      	cmp	r8, r4
 80004b4:	d927      	bls.n	8000506 <__udivmoddi4+0x2ba>
 80004b6:	3802      	subs	r0, #2
 80004b8:	441c      	add	r4, r3
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba4 0408 	sub.w	r4, r4, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	464d      	mov	r5, r9
 80004cc:	d315      	bcc.n	80004fa <__udivmoddi4+0x2ae>
 80004ce:	d012      	beq.n	80004f6 <__udivmoddi4+0x2aa>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x29c>
 80004d2:	ebba 030e 	subs.w	r3, sl, lr
 80004d6:	eb64 0405 	sbc.w	r4, r4, r5
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431f      	orrs	r7, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	6037      	str	r7, [r6, #0]
 80004e6:	6074      	str	r4, [r6, #4]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	4618      	mov	r0, r3
 80004f0:	e6f8      	b.n	80002e4 <__udivmoddi4+0x98>
 80004f2:	4690      	mov	r8, r2
 80004f4:	e6e0      	b.n	80002b8 <__udivmoddi4+0x6c>
 80004f6:	45c2      	cmp	sl, r8
 80004f8:	d2ea      	bcs.n	80004d0 <__udivmoddi4+0x284>
 80004fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80004fe:	eb69 0503 	sbc.w	r5, r9, r3
 8000502:	3801      	subs	r0, #1
 8000504:	e7e4      	b.n	80004d0 <__udivmoddi4+0x284>
 8000506:	4628      	mov	r0, r5
 8000508:	e7d7      	b.n	80004ba <__udivmoddi4+0x26e>
 800050a:	4640      	mov	r0, r8
 800050c:	e791      	b.n	8000432 <__udivmoddi4+0x1e6>
 800050e:	4681      	mov	r9, r0
 8000510:	e7be      	b.n	8000490 <__udivmoddi4+0x244>
 8000512:	4601      	mov	r1, r0
 8000514:	e778      	b.n	8000408 <__udivmoddi4+0x1bc>
 8000516:	3802      	subs	r0, #2
 8000518:	443c      	add	r4, r7
 800051a:	e745      	b.n	80003a8 <__udivmoddi4+0x15c>
 800051c:	4608      	mov	r0, r1
 800051e:	e708      	b.n	8000332 <__udivmoddi4+0xe6>
 8000520:	f1a8 0802 	sub.w	r8, r8, #2
 8000524:	443d      	add	r5, r7
 8000526:	e72b      	b.n	8000380 <__udivmoddi4+0x134>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <LCD_clock>:
 */

#include "main.h"
#include "lcd.h"

void LCD_clock(void){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

	HAL_Delay(6);
 8000530:	2006      	movs	r0, #6
 8000532:	f001 f93f 	bl	80017b4 <HAL_Delay>
	// lcd e 1
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <LCD_clock+0x34>)
 800053e:	f001 ff97 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000542:	2005      	movs	r0, #5
 8000544:	f001 f936 	bl	80017b4 <HAL_Delay>
	//lcd e 0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <LCD_clock+0x34>)
 8000550:	f001 ff8e 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f001 f92d 	bl	80017b4 <HAL_Delay>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <LCD_write>:

void LCD_write(uint8_t data){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]

	//felso 4 bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>7)&0x01));
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	09db      	lsrs	r3, r3, #7
 8000572:	b2db      	uxtb	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057a:	482e      	ldr	r0, [pc, #184]	; (8000634 <LCD_write+0xd0>)
 800057c:	f001 ff78 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>6)&0x01));
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	099b      	lsrs	r3, r3, #6
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000592:	4829      	ldr	r0, [pc, #164]	; (8000638 <LCD_write+0xd4>)
 8000594:	f001 ff6c 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>5)&0x01));
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	095b      	lsrs	r3, r3, #5
 800059c:	b2db      	uxtb	r3, r3
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005aa:	4823      	ldr	r0, [pc, #140]	; (8000638 <LCD_write+0xd4>)
 80005ac:	f001 ff60 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data>>4)&0x01));
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	091b      	lsrs	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <LCD_write+0xd4>)
 80005c4:	f001 ff54 	bl	8002470 <HAL_GPIO_WritePin>

	LCD_clock();
 80005c8:	f7ff ffb0 	bl	800052c <LCD_clock>

	//also 4
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>3)&0x01));
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	08db      	lsrs	r3, r3, #3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	4815      	ldr	r0, [pc, #84]	; (8000634 <LCD_write+0xd0>)
 80005e0:	f001 ff46 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>2)&0x01));
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	089b      	lsrs	r3, r3, #2
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <LCD_write+0xd4>)
 80005f8:	f001 ff3a 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>1)&0x01));
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	085b      	lsrs	r3, r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <LCD_write+0xd4>)
 8000610:	f001 ff2e 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data)&0x01));
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <LCD_write+0xd4>)
 8000624:	f001 ff24 	bl	8002470 <HAL_GPIO_WritePin>

	LCD_clock();
 8000628:	f7ff ff80 	bl	800052c <LCD_clock>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40020400 	.word	0x40020400
 8000638:	40021000 	.word	0x40021000

0800063c <LCD_data>:

void LCD_data(uint8_t adat){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <LCD_data+0x24>)
 800064c:	f001 ff10 	bl	8002470 <HAL_GPIO_WritePin>
	LCD_write(adat);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff86 	bl	8000564 <LCD_write>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000

08000664 <LCD_cmd>:

void LCD_cmd(uint8_t cmd){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <LCD_cmd+0x24>)
 8000674:	f001 fefc 	bl	8002470 <HAL_GPIO_WritePin>
	LCD_write(cmd);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff72 	bl	8000564 <LCD_write>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <LCD_init>:

void LCD_init(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

	LCD_cmd(0x20);
 8000690:	2020      	movs	r0, #32
 8000692:	f7ff ffe7 	bl	8000664 <LCD_cmd>
	LCD_clock();
 8000696:	f7ff ff49 	bl	800052c <LCD_clock>
	LCD_clock();
 800069a:	f7ff ff47 	bl	800052c <LCD_clock>
	LCD_clock();
 800069e:	f7ff ff45 	bl	800052c <LCD_clock>
	// mod - 4 bit 2 sor, 5x8pont matrix
	// 3x - nem tudjuk milyen modban volt
	LCD_cmd(0x28);
 80006a2:	2028      	movs	r0, #40	; 0x28
 80006a4:	f7ff ffde 	bl	8000664 <LCD_cmd>
	LCD_cmd(0x28);
 80006a8:	2028      	movs	r0, #40	; 0x28
 80006aa:	f7ff ffdb 	bl	8000664 <LCD_cmd>
	LCD_cmd(0x28);
 80006ae:	2028      	movs	r0, #40	; 0x28
 80006b0:	f7ff ffd8 	bl	8000664 <LCD_cmd>

	//alaphelyzet
	LCD_cmd(0x02);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f7ff ffd5 	bl	8000664 <LCD_cmd>
	// lcd torles
	LCD_cmd(0x01);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ffd2 	bl	8000664 <LCD_cmd>
	//kurzor beallitasa
	LCD_cmd(0x08 | (1<<2) | (0<<1) | (0<<0));
 80006c0:	200c      	movs	r0, #12
 80006c2:	f7ff ffcf 	bl	8000664 <LCD_cmd>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <LCD_string>:

void LCD_string(char *p){
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]

	while(*p){
 80006d2:	e006      	b.n	80006e2 <LCD_string+0x18>

		LCD_data(*p++);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffad 	bl	800063c <LCD_data>
	while(*p){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f4      	bne.n	80006d4 <LCD_string+0xa>
	}
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <LCD_xy>:

void LCD_xy(uint8_t x, uint8_t y){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

		switch (y)
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	3b01      	subs	r3, #1
 8000708:	2b03      	cmp	r3, #3
 800070a:	d820      	bhi.n	800074e <LCD_xy+0x5a>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <LCD_xy+0x20>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	08000725 	.word	0x08000725
 8000718:	0800072d 	.word	0x0800072d
 800071c:	08000735 	.word	0x08000735
 8000720:	0800073d 	.word	0x0800073d
		{
			case 1:    // 1. sor
			position = LCD_START_DDADR + LCD_ADR_LINE1 + x;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	3b80      	subs	r3, #128	; 0x80
 8000728:	73fb      	strb	r3, [r7, #15]
			break;
 800072a:	e00b      	b.n	8000744 <LCD_xy+0x50>

			case 2:    // 2. sor
			position = LCD_START_DDADR + LCD_ADR_LINE2 + x;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3b40      	subs	r3, #64	; 0x40
 8000730:	73fb      	strb	r3, [r7, #15]
			break;
 8000732:	e007      	b.n	8000744 <LCD_xy+0x50>

			case 3:    // 3. sor
			position = LCD_START_DDADR + LCD_ADR_LINE3 + x;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	3b70      	subs	r3, #112	; 0x70
 8000738:	73fb      	strb	r3, [r7, #15]
			break;
 800073a:	e003      	b.n	8000744 <LCD_xy+0x50>

			case 4:    // 4. sor
			position = LCD_START_DDADR + LCD_ADR_LINE4 + x;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	3b30      	subs	r3, #48	; 0x30
 8000740:	73fb      	strb	r3, [r7, #15]
			break;
 8000742:	bf00      	nop

			default:
			return;
		}
		LCD_cmd(position); // beallitas
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff8c 	bl	8000664 <LCD_cmd>
 800074c:	e000      	b.n	8000750 <LCD_xy+0x5c>
			return;
 800074e:	bf00      	nop

}
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop

08000758 <lcd_jelzes>:
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void lcd_jelzes(char szoveg[])
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	strcpy(row4_string, row3_string);
 8000760:	4917      	ldr	r1, [pc, #92]	; (80007c0 <lcd_jelzes+0x68>)
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <lcd_jelzes+0x6c>)
 8000764:	f004 fe1e 	bl	80053a4 <strcpy>
	strcpy(row3_string, row2_string);
 8000768:	4917      	ldr	r1, [pc, #92]	; (80007c8 <lcd_jelzes+0x70>)
 800076a:	4815      	ldr	r0, [pc, #84]	; (80007c0 <lcd_jelzes+0x68>)
 800076c:	f004 fe1a 	bl	80053a4 <strcpy>
	strcpy(row2_string, row1_string);
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <lcd_jelzes+0x74>)
 8000772:	4815      	ldr	r0, [pc, #84]	; (80007c8 <lcd_jelzes+0x70>)
 8000774:	f004 fe16 	bl	80053a4 <strcpy>
	strcpy(row1_string, szoveg);
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4814      	ldr	r0, [pc, #80]	; (80007cc <lcd_jelzes+0x74>)
 800077c:	f004 fe12 	bl	80053a4 <strcpy>

	LCD_xy(0,4); LCD_string(row1_string);
 8000780:	2104      	movs	r1, #4
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ffb6 	bl	80006f4 <LCD_xy>
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <lcd_jelzes+0x74>)
 800078a:	f7ff ff9e 	bl	80006ca <LCD_string>
	LCD_xy(0,3); LCD_string(row2_string);
 800078e:	2103      	movs	r1, #3
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ffaf 	bl	80006f4 <LCD_xy>
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <lcd_jelzes+0x70>)
 8000798:	f7ff ff97 	bl	80006ca <LCD_string>
	LCD_xy(0,2); LCD_string(row3_string);
 800079c:	2102      	movs	r1, #2
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ffa8 	bl	80006f4 <LCD_xy>
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <lcd_jelzes+0x68>)
 80007a6:	f7ff ff90 	bl	80006ca <LCD_string>
	LCD_xy(0,1); LCD_string(row4_string);
 80007aa:	2101      	movs	r1, #1
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ffa1 	bl	80006f4 <LCD_xy>
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <lcd_jelzes+0x6c>)
 80007b4:	f7ff ff89 	bl	80006ca <LCD_string>

}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001d4 	.word	0x200001d4
 80007c4:	2000022c 	.word	0x2000022c
 80007c8:	20000290 	.word	0x20000290
 80007cc:	200001c4 	.word	0x200001c4

080007d0 <read_matrix>:

void read_matrix(void){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

	matrix_search();
 80007d6:	f000 fd77 	bl	80012c8 <matrix_search>

	uint8_t key=get_key();
 80007da:	f000 fdc1 	bl	8001360 <get_key>
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]

	if(key==10){ letilt=1; HAL_UART_Transmit(&huart3, text, sizeof(text), 20);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b0a      	cmp	r3, #10
 80007e6:	d10d      	bne.n	8000804 <read_matrix+0x34>
 80007e8:	4b6e      	ldr	r3, [pc, #440]	; (80009a4 <read_matrix+0x1d4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	2314      	movs	r3, #20
 80007f0:	223c      	movs	r2, #60	; 0x3c
 80007f2:	496d      	ldr	r1, [pc, #436]	; (80009a8 <read_matrix+0x1d8>)
 80007f4:	486d      	ldr	r0, [pc, #436]	; (80009ac <read_matrix+0x1dc>)
 80007f6:	f003 fe1b 	bl	8004430 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, &fogad, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	496c      	ldr	r1, [pc, #432]	; (80009b0 <read_matrix+0x1e0>)
 80007fe:	486b      	ldr	r0, [pc, #428]	; (80009ac <read_matrix+0x1dc>)
 8000800:	f003 fea6 	bl	8004550 <HAL_UART_Receive_IT>
	}

	if(active_off){
 8000804:	4b6b      	ldr	r3, [pc, #428]	; (80009b4 <read_matrix+0x1e4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d019      	beq.n	8000840 <read_matrix+0x70>
		if ((key==8) && (tmp_state!=8)){
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b08      	cmp	r3, #8
 8000810:	f040 80c4 	bne.w	800099c <read_matrix+0x1cc>
 8000814:	4b68      	ldr	r3, [pc, #416]	; (80009b8 <read_matrix+0x1e8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b08      	cmp	r3, #8
 800081a:	f000 80bf 	beq.w	800099c <read_matrix+0x1cc>
			state,tmp_state = 8 ;
 800081e:	4b66      	ldr	r3, [pc, #408]	; (80009b8 <read_matrix+0x1e8>)
 8000820:	2208      	movs	r2, #8
 8000822:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 40); lcd_jelzes("On       ");
 8000824:	4b65      	ldr	r3, [pc, #404]	; (80009bc <read_matrix+0x1ec>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2228      	movs	r2, #40	; 0x28
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
 800082c:	4864      	ldr	r0, [pc, #400]	; (80009c0 <read_matrix+0x1f0>)
 800082e:	f7ff ff93 	bl	8000758 <lcd_jelzes>
			HAL_UART_Transmit(&huart3, "8", sizeof("8"), 20);
 8000832:	2314      	movs	r3, #20
 8000834:	2202      	movs	r2, #2
 8000836:	4963      	ldr	r1, [pc, #396]	; (80009c4 <read_matrix+0x1f4>)
 8000838:	485c      	ldr	r0, [pc, #368]	; (80009ac <read_matrix+0x1dc>)
 800083a:	f003 fdf9 	bl	8004430 <HAL_UART_Transmit>
		}
		return;
 800083e:	e0ad      	b.n	800099c <read_matrix+0x1cc>
	}

	if(!letilt){
 8000840:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <read_matrix+0x1d4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	f040 80aa 	bne.w	800099e <read_matrix+0x1ce>
		switch(key){
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	3b01      	subs	r3, #1
 800084e:	2b07      	cmp	r3, #7
 8000850:	f200 8098 	bhi.w	8000984 <read_matrix+0x1b4>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <read_matrix+0x8c>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	0800087d 	.word	0x0800087d
 8000860:	080008a7 	.word	0x080008a7
 8000864:	080008c1 	.word	0x080008c1
 8000868:	080008db 	.word	0x080008db
 800086c:	080008fd 	.word	0x080008fd
 8000870:	0800091f 	.word	0x0800091f
 8000874:	08000941 	.word	0x08000941
 8000878:	08000963 	.word	0x08000963
			case 1: state = 1; duty=20; __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, duty); lcd_jelzes("OFF    ");
 800087c:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <read_matrix+0x1f8>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	4b52      	ldr	r3, [pc, #328]	; (80009cc <read_matrix+0x1fc>)
 8000884:	2214      	movs	r2, #20
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <read_matrix+0x1ec>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a4f      	ldr	r2, [pc, #316]	; (80009cc <read_matrix+0x1fc>)
 800088e:	7812      	ldrb	r2, [r2, #0]
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	484f      	ldr	r0, [pc, #316]	; (80009d0 <read_matrix+0x200>)
 8000894:	f7ff ff60 	bl	8000758 <lcd_jelzes>
					HAL_UART_Transmit(&huart3, "1", sizeof("1"), 20);
 8000898:	2314      	movs	r3, #20
 800089a:	2202      	movs	r2, #2
 800089c:	494d      	ldr	r1, [pc, #308]	; (80009d4 <read_matrix+0x204>)
 800089e:	4843      	ldr	r0, [pc, #268]	; (80009ac <read_matrix+0x1dc>)
 80008a0:	f003 fdc6 	bl	8004430 <HAL_UART_Transmit>
			break;
 80008a4:	e06e      	b.n	8000984 <read_matrix+0x1b4>
			case 2: state = 2 ; lcd_jelzes("Connecting  ");
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <read_matrix+0x1f8>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	484a      	ldr	r0, [pc, #296]	; (80009d8 <read_matrix+0x208>)
 80008ae:	f7ff ff53 	bl	8000758 <lcd_jelzes>
					HAL_UART_Transmit(&huart3, "2", sizeof("2"), 20);
 80008b2:	2314      	movs	r3, #20
 80008b4:	2202      	movs	r2, #2
 80008b6:	4949      	ldr	r1, [pc, #292]	; (80009dc <read_matrix+0x20c>)
 80008b8:	483c      	ldr	r0, [pc, #240]	; (80009ac <read_matrix+0x1dc>)
 80008ba:	f003 fdb9 	bl	8004430 <HAL_UART_Transmit>
			break;
 80008be:	e061      	b.n	8000984 <read_matrix+0x1b4>
			case 3: state = 3 ; lcd_jelzes("Normal    ");
 80008c0:	4b41      	ldr	r3, [pc, #260]	; (80009c8 <read_matrix+0x1f8>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	4846      	ldr	r0, [pc, #280]	; (80009e0 <read_matrix+0x210>)
 80008c8:	f7ff ff46 	bl	8000758 <lcd_jelzes>
				HAL_UART_Transmit(&huart3, "3", sizeof("3"), 20);
 80008cc:	2314      	movs	r3, #20
 80008ce:	2202      	movs	r2, #2
 80008d0:	4944      	ldr	r1, [pc, #272]	; (80009e4 <read_matrix+0x214>)
 80008d2:	4836      	ldr	r0, [pc, #216]	; (80009ac <read_matrix+0x1dc>)
 80008d4:	f003 fdac 	bl	8004430 <HAL_UART_Transmit>
			break;
 80008d8:	e054      	b.n	8000984 <read_matrix+0x1b4>
			case 4: state = 4; __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 5); lcd_jelzes("5%     ");
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <read_matrix+0x1f8>)
 80008dc:	2204      	movs	r2, #4
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <read_matrix+0x1ec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2205      	movs	r2, #5
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
 80008e8:	483f      	ldr	r0, [pc, #252]	; (80009e8 <read_matrix+0x218>)
 80008ea:	f7ff ff35 	bl	8000758 <lcd_jelzes>
					HAL_UART_Transmit(&huart3, "4", sizeof("4"), 20);
 80008ee:	2314      	movs	r3, #20
 80008f0:	2202      	movs	r2, #2
 80008f2:	493e      	ldr	r1, [pc, #248]	; (80009ec <read_matrix+0x21c>)
 80008f4:	482d      	ldr	r0, [pc, #180]	; (80009ac <read_matrix+0x1dc>)
 80008f6:	f003 fd9b 	bl	8004430 <HAL_UART_Transmit>
			break;
 80008fa:	e043      	b.n	8000984 <read_matrix+0x1b4>
			case 5: state = 5; __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 50); lcd_jelzes("50%     ");
 80008fc:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <read_matrix+0x1f8>)
 80008fe:	2205      	movs	r2, #5
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <read_matrix+0x1ec>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2232      	movs	r2, #50	; 0x32
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4839      	ldr	r0, [pc, #228]	; (80009f0 <read_matrix+0x220>)
 800090c:	f7ff ff24 	bl	8000758 <lcd_jelzes>
					HAL_UART_Transmit(&huart3, "5", sizeof("5"), 20);
 8000910:	2314      	movs	r3, #20
 8000912:	2202      	movs	r2, #2
 8000914:	4937      	ldr	r1, [pc, #220]	; (80009f4 <read_matrix+0x224>)
 8000916:	4825      	ldr	r0, [pc, #148]	; (80009ac <read_matrix+0x1dc>)
 8000918:	f003 fd8a 	bl	8004430 <HAL_UART_Transmit>
			break;
 800091c:	e032      	b.n	8000984 <read_matrix+0x1b4>
			case 6: state = 6; __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 98); lcd_jelzes("98%     ");
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <read_matrix+0x1f8>)
 8000920:	2206      	movs	r2, #6
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <read_matrix+0x1ec>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2262      	movs	r2, #98	; 0x62
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
 800092c:	4832      	ldr	r0, [pc, #200]	; (80009f8 <read_matrix+0x228>)
 800092e:	f7ff ff13 	bl	8000758 <lcd_jelzes>
					HAL_UART_Transmit(&huart3, "6", sizeof("6"), 20);
 8000932:	2314      	movs	r3, #20
 8000934:	2202      	movs	r2, #2
 8000936:	4931      	ldr	r1, [pc, #196]	; (80009fc <read_matrix+0x22c>)
 8000938:	481c      	ldr	r0, [pc, #112]	; (80009ac <read_matrix+0x1dc>)
 800093a:	f003 fd79 	bl	8004430 <HAL_UART_Transmit>
			break;
 800093e:	e021      	b.n	8000984 <read_matrix+0x1b4>
			case 7: state = 7;  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 50); lcd_jelzes("Danger    ");
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <read_matrix+0x1f8>)
 8000942:	2207      	movs	r2, #7
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <read_matrix+0x1ec>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2232      	movs	r2, #50	; 0x32
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
 800094e:	482c      	ldr	r0, [pc, #176]	; (8000a00 <read_matrix+0x230>)
 8000950:	f7ff ff02 	bl	8000758 <lcd_jelzes>
					HAL_UART_Transmit(&huart3, "7", sizeof("7"), 20);
 8000954:	2314      	movs	r3, #20
 8000956:	2202      	movs	r2, #2
 8000958:	492a      	ldr	r1, [pc, #168]	; (8000a04 <read_matrix+0x234>)
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <read_matrix+0x1dc>)
 800095c:	f003 fd68 	bl	8004430 <HAL_UART_Transmit>
			break;
 8000960:	e010      	b.n	8000984 <read_matrix+0x1b4>
			case 8: state = 8; __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 40); lcd_jelzes("On       ");
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <read_matrix+0x1f8>)
 8000964:	2208      	movs	r2, #8
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <read_matrix+0x1ec>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2228      	movs	r2, #40	; 0x28
 800096e:	635a      	str	r2, [r3, #52]	; 0x34
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <read_matrix+0x1f0>)
 8000972:	f7ff fef1 	bl	8000758 <lcd_jelzes>
					HAL_UART_Transmit(&huart3, "8", sizeof("8"), 20);
 8000976:	2314      	movs	r3, #20
 8000978:	2202      	movs	r2, #2
 800097a:	4912      	ldr	r1, [pc, #72]	; (80009c4 <read_matrix+0x1f4>)
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <read_matrix+0x1dc>)
 800097e:	f003 fd57 	bl	8004430 <HAL_UART_Transmit>
			break;
 8000982:	bf00      	nop
		}



		if(state){
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <read_matrix+0x1f8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d008      	beq.n	800099e <read_matrix+0x1ce>
			tmp_state = state; state = 0;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <read_matrix+0x1f8>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <read_matrix+0x1e8>)
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <read_matrix+0x1f8>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e000      	b.n	800099e <read_matrix+0x1ce>
		return;
 800099c:	bf00      	nop
		}
	}


}
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000b3 	.word	0x200000b3
 80009a8:	20000000 	.word	0x20000000
 80009ac:	200000fc 	.word	0x200000fc
 80009b0:	200000b2 	.word	0x200000b2
 80009b4:	200000b5 	.word	0x200000b5
 80009b8:	200000af 	.word	0x200000af
 80009bc:	20000250 	.word	0x20000250
 80009c0:	080053cc 	.word	0x080053cc
 80009c4:	080053d8 	.word	0x080053d8
 80009c8:	200000ae 	.word	0x200000ae
 80009cc:	200000b0 	.word	0x200000b0
 80009d0:	080053dc 	.word	0x080053dc
 80009d4:	080053e4 	.word	0x080053e4
 80009d8:	080053e8 	.word	0x080053e8
 80009dc:	080053f8 	.word	0x080053f8
 80009e0:	080053fc 	.word	0x080053fc
 80009e4:	08005408 	.word	0x08005408
 80009e8:	0800540c 	.word	0x0800540c
 80009ec:	08005414 	.word	0x08005414
 80009f0:	08005418 	.word	0x08005418
 80009f4:	08005424 	.word	0x08005424
 80009f8:	08005428 	.word	0x08005428
 80009fc:	08005434 	.word	0x08005434
 8000a00:	08005438 	.word	0x08005438
 8000a04:	08005444 	.word	0x08005444

08000a08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Start(&hadc2); //adc conv start
	if(cnt==5000) // 500ms
 8000a10:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d13d      	bne.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		switch(tmp_state)
 8000a1c:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d002      	beq.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x22>
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d010      	beq.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x42>
 8000a28:	e01f      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x62>
		{
			case 1:
					if(duty)duty=duty-10;
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d005      	beq.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x36>
 8000a32:	4b46      	ldr	r3, [pc, #280]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	3b0a      	subs	r3, #10
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a3c:	701a      	strb	r2, [r3, #0]

					__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, duty);
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34


				break;
 8000a48:	e00f      	b.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x62>
			//case 7: state = 7;  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 50);;break;
			case 8:
				if (duty<100){
 8000a4a:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b63      	cmp	r3, #99	; 0x63
 8000a50:	d80a      	bhi.n	8000a68 <HAL_TIM_PeriodElapsedCallback+0x60>
					__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, duty);
 8000a52:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a3d      	ldr	r2, [pc, #244]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
					duty+=10;
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	330a      	adds	r3, #10
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a66:	701a      	strb	r2, [r3, #0]
			}
				;break;
 8000a68:	bf00      	nop

		}

		if(tmp_state == 3)
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d10f      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x8a>
				{
					__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, duty);
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a35      	ldr	r2, [pc, #212]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
					if(duty) duty = 0;
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x84>
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e002      	b.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x8a>
					else duty = 100;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a8e:	2264      	movs	r2, #100	; 0x64
 8000a90:	701a      	strb	r2, [r3, #0]
				}
		cnt = 0;
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	801a      	strh	r2, [r3, #0]
	}
	// state 2 100ms
	if ((cnt % 1000) == 0)
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	4a2d      	ldr	r2, [pc, #180]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000a9e:	fba2 1203 	umull	r1, r2, r2, r3
 8000aa2:	0992      	lsrs	r2, r2, #6
 8000aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa8:	fb01 f202 	mul.w	r2, r1, r2
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d13b      	bne.n	8000b2c <HAL_TIM_PeriodElapsedCallback+0x124>
	{
		if(tmp_state == 2)
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d10f      	bne.n	8000adc <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, duty);
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ac2:	7812      	ldrb	r2, [r2, #0]
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
			if(duty) duty = 0;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0xce>
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e002      	b.n	8000adc <HAL_TIM_PeriodElapsedCallback+0xd4>
			else duty = 100;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ad8:	2264      	movs	r2, #100	; 0x64
 8000ada:	701a      	strb	r2, [r3, #0]
		}
		// danger
		if (tmp_state==7)
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b07      	cmp	r3, #7
 8000ae2:	d123      	bne.n	8000b2c <HAL_TIM_PeriodElapsedCallback+0x124>
		{
			if (irany) duty+=10;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	330a      	adds	r3, #10
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e005      	b.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0xfe>
			else duty-=10;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3b0a      	subs	r3, #10
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b04:	701a      	strb	r2, [r3, #0]

			if(duty==100) irany=0;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b64      	cmp	r3, #100	; 0x64
 8000b0c:	d102      	bne.n	8000b14 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
			if(duty==0) irany=1;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x11a>
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, duty);
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	cnt++;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b36:	801a      	strh	r2, [r3, #0]

}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	200000ac 	.word	0x200000ac
 8000b48:	200000af 	.word	0x200000af
 8000b4c:	200000b0 	.word	0x200000b0
 8000b50:	20000250 	.word	0x20000250
 8000b54:	10624dd3 	.word	0x10624dd3
 8000b58:	200000b1 	.word	0x200000b1

08000b5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, &fogad, 1);

	if(fogad==13){
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_UART_RxCpltCallback+0x90>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b0d      	cmp	r3, #13
 8000b6a:	d129      	bne.n	8000bc0 <HAL_UART_RxCpltCallback+0x64>
		if( strcmp(str, "")==0 ){
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_UART_RxCpltCallback+0x94>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <HAL_UART_RxCpltCallback+0x26>
			letilt = 0;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_UART_RxCpltCallback+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
			ind = 0;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_UART_RxCpltCallback+0x9c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e02b      	b.n	8000bda <HAL_UART_RxCpltCallback+0x7e>
			/*for(int k=0; k<=19; k++){
				str[k]=0;
			} */
		}
		else{
			if(strcmp(str, "A_OFF")==0) {active_off=1; ind=0;}
 8000b82:	491e      	ldr	r1, [pc, #120]	; (8000bfc <HAL_UART_RxCpltCallback+0xa0>)
 8000b84:	481a      	ldr	r0, [pc, #104]	; (8000bf0 <HAL_UART_RxCpltCallback+0x94>)
 8000b86:	f7ff fb3f 	bl	8000208 <strcmp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d106      	bne.n	8000b9e <HAL_UART_RxCpltCallback+0x42>
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_UART_RxCpltCallback+0xa4>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_RxCpltCallback+0x9c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e01d      	b.n	8000bda <HAL_UART_RxCpltCallback+0x7e>
			else {
				if(strcmp(str, "D_OFF")==0){
 8000b9e:	4919      	ldr	r1, [pc, #100]	; (8000c04 <HAL_UART_RxCpltCallback+0xa8>)
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <HAL_UART_RxCpltCallback+0x94>)
 8000ba2:	f7ff fb31 	bl	8000208 <strcmp>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d116      	bne.n	8000bda <HAL_UART_RxCpltCallback+0x7e>
					active_off=0;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_UART_RxCpltCallback+0xa4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
					letilt = 0;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_UART_RxCpltCallback+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
					ind = 0;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_UART_RxCpltCallback+0x9c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e00c      	b.n	8000bda <HAL_UART_RxCpltCallback+0x7e>
				}
			}
		}
	}
	else {
		str[ind] = fogad;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_UART_RxCpltCallback+0x9c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_UART_RxCpltCallback+0x90>)
 8000bc8:	7819      	ldrb	r1, [r3, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_UART_RxCpltCallback+0x94>)
 8000bcc:	5499      	strb	r1, [r3, r2]
		ind++;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_UART_RxCpltCallback+0x9c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_UART_RxCpltCallback+0x9c>)
 8000bd8:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, &fogad, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4903      	ldr	r1, [pc, #12]	; (8000bec <HAL_UART_RxCpltCallback+0x90>)
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <HAL_UART_RxCpltCallback+0xac>)
 8000be0:	f003 fcb6 	bl	8004550 <HAL_UART_Receive_IT>
	//HAL_UART_Transmit_IT(huart, &fogad, 1);
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000b2 	.word	0x200000b2
 8000bf0:	2000023c 	.word	0x2000023c
 8000bf4:	200000b3 	.word	0x200000b3
 8000bf8:	200000b4 	.word	0x200000b4
 8000bfc:	08005448 	.word	0x08005448
 8000c00:	200000b5 	.word	0x200000b5
 8000c04:	08005450 	.word	0x08005450
 8000c08:	200000fc 	.word	0x200000fc

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c10:	f000 fd72 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c14:	f000 f836 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c18:	f000 fa22 	bl	8001060 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000c1c:	f000 f952 	bl	8000ec4 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000c20:	f000 f9aa 	bl	8000f78 <MX_TIM12_Init>
  MX_ADC1_Init();
 8000c24:	f000 f8a8 	bl	8000d78 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c28:	f000 f8fa 	bl	8000e20 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000c2c:	f000 f9e8 	bl	8001000 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000c30:	2100      	movs	r1, #0
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <main+0x60>)
 8000c34:	f002 fcf4 	bl	8003620 <HAL_TIM_PWM_Start_IT>
  //HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim4);
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <main+0x64>)
 8000c3a:	f002 fc9b 	bl	8003574 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, &fogad, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <main+0x68>)
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <main+0x6c>)
 8000c44:	f003 fc84 	bl	8004550 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc2);
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <main+0x70>)
 8000c4a:	f000 fe19 	bl	8001880 <HAL_ADC_Start>
  LCD_init();
 8000c4e:	f7ff fd1d 	bl	800068c <LCD_init>
  LCD_cmd(0x01);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fd06 	bl	8000664 <LCD_cmd>
  LCD_cmd(0x80);
 8000c58:	2080      	movs	r0, #128	; 0x80
 8000c5a:	f7ff fd03 	bl	8000664 <LCD_cmd>
  //LCD_xy(4,1);
  //LCD_string("hello grg");
  //uint8_t matrix_k=0;
  LCD_string("!");
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <main+0x74>)
 8000c60:	f7ff fd33 	bl	80006ca <LCD_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_matrix();
 8000c64:	f7ff fdb4 	bl	80007d0 <read_matrix>
 8000c68:	e7fc      	b.n	8000c64 <main+0x58>
 8000c6a:	bf00      	nop
 8000c6c:	20000250 	.word	0x20000250
 8000c70:	200000bc 	.word	0x200000bc
 8000c74:	200000b2 	.word	0x200000b2
 8000c78:	200000fc 	.word	0x200000fc
 8000c7c:	2000017c 	.word	0x2000017c
 8000c80:	08005458 	.word	0x08005458

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0b4      	sub	sp, #208	; 0xd0
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c8e:	2230      	movs	r2, #48	; 0x30
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 fb7e 	bl	8005394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2284      	movs	r2, #132	; 0x84
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fb6f 	bl	8005394 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <SystemClock_Config+0xec>)
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <SystemClock_Config+0xec>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <SystemClock_Config+0xec>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cce:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <SystemClock_Config+0xf0>)
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <SystemClock_Config+0xf0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <SystemClock_Config+0xf0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fbcc 	bl	80024a4 <HAL_RCC_OscConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d12:	f000 fa75 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d16:	230f      	movs	r3, #15
 8000d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fe56 	bl	80029ec <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d46:	f000 fa5b 	bl	8001200 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 f81d 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000d64:	f000 fa4c 	bl	8001200 <Error_Handler>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	37d0      	adds	r7, #208	; 0xd0
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000d8c:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <MX_ADC1_Init+0x9c>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000db8:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <MX_ADC1_Init+0xa0>)
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000dd8:	f000 fd0e 	bl	80017f8 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fa0d 	bl	8001200 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_ADC1_Init+0xa4>)
 8000de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_ADC1_Init+0x98>)
 8000df8:	f000 fe02 	bl	8001a00 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e02:	f000 f9fd 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200001e4 	.word	0x200001e4
 8000e14:	40012000 	.word	0x40012000
 8000e18:	0f000001 	.word	0x0f000001
 8000e1c:	10000012 	.word	0x10000012

08000e20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <MX_ADC2_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e60:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <MX_ADC2_Init+0xa0>)
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000e80:	f000 fcba 	bl	80017f8 <HAL_ADC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f000 f9b9 	bl	8001200 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_ADC2_Init+0x98>)
 8000ea0:	f000 fdae 	bl	8001a00 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000eaa:	f000 f9a9 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000017c 	.word	0x2000017c
 8000ebc:	40012100 	.word	0x40012100
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <MX_TIM4_Init+0xb0>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000efc:	2264      	movs	r2, #100	; 0x64
 8000efe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f0c:	4818      	ldr	r0, [pc, #96]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000f0e:	f002 fb5b 	bl	80035c8 <HAL_TIM_PWM_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000f18:	f000 f972 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000f2c:	f003 f986 	bl	800423c <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000f36:	f000 f963 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3a:	2360      	movs	r3, #96	; 0x60
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000f52:	f002 fd0f 	bl	8003974 <HAL_TIM_PWM_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000f5c:	f000 f950 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MX_TIM4_Init+0xac>)
 8000f62:	f000 fac3 	bl	80014ec <HAL_TIM_MspPostInit>

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000bc 	.word	0x200000bc
 8000f74:	40000800 	.word	0x40000800

08000f78 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000f92:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <MX_TIM12_Init+0x84>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 15;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000f98:	220f      	movs	r2, #15
 8000f9a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000fa4:	2264      	movs	r2, #100	; 0x64
 8000fa6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000fb6:	f002 fb07 	bl	80035c8 <HAL_TIM_PWM_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8000fc0:	f000 f91e 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	; 0x60
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000fdc:	f002 fcca 	bl	8003974 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8000fe6:	f000 f90b 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <MX_TIM12_Init+0x80>)
 8000fec:	f000 fa7e 	bl	80014ec <HAL_TIM_MspPostInit>

}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000250 	.word	0x20000250
 8000ffc:	40001800 	.word	0x40001800

08001000 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_USART3_UART_Init+0x58>)
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <MX_USART3_UART_Init+0x5c>)
 8001008:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_USART3_UART_Init+0x58>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_USART3_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_USART3_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_USART3_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USART3_UART_Init+0x58>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_USART3_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USART3_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_USART3_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USART3_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART3_UART_Init+0x58>)
 8001044:	f003 f9a6 	bl	8004394 <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800104e:	f000 f8d7 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000fc 	.word	0x200000fc
 800105c:	40004800 	.word	0x40004800

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4a5d      	ldr	r2, [pc, #372]	; (80011ec <MX_GPIO_Init+0x18c>)
 8001078:	4b5c      	ldr	r3, [pc, #368]	; (80011ec <MX_GPIO_Init+0x18c>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b5a      	ldr	r3, [pc, #360]	; (80011ec <MX_GPIO_Init+0x18c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4a57      	ldr	r2, [pc, #348]	; (80011ec <MX_GPIO_Init+0x18c>)
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <MX_GPIO_Init+0x18c>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b54      	ldr	r3, [pc, #336]	; (80011ec <MX_GPIO_Init+0x18c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4a51      	ldr	r2, [pc, #324]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010a8:	4b50      	ldr	r3, [pc, #320]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010be:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010c0:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b48      	ldr	r3, [pc, #288]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4a45      	ldr	r2, [pc, #276]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010d8:	4b44      	ldr	r3, [pc, #272]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b42      	ldr	r3, [pc, #264]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ee:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010f0:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MX_GPIO_Init+0x18c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LCD_DATA_7_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f240 4101 	movw	r1, #1025	; 0x401
 800110c:	4838      	ldr	r0, [pc, #224]	; (80011f0 <MX_GPIO_Init+0x190>)
 800110e:	f001 f9af 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001118:	4836      	ldr	r0, [pc, #216]	; (80011f4 <MX_GPIO_Init+0x194>)
 800111a:	f001 f9a9 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 800111e:	2200      	movs	r2, #0
 8001120:	f24f 4180 	movw	r1, #62592	; 0xf480
 8001124:	4834      	ldr	r0, [pc, #208]	; (80011f8 <MX_GPIO_Init+0x198>)
 8001126:	f001 f9a3 	bl	8002470 <HAL_GPIO_WritePin>
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KB_PC6_OUT_row4_GPIO_Port, KB_PC6_OUT_row4_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001130:	4832      	ldr	r0, [pc, #200]	; (80011fc <MX_GPIO_Init+0x19c>)
 8001132:	f001 f99d 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 LCD_DATA_7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_DATA_7_Pin;
 8001136:	f240 4301 	movw	r3, #1025	; 0x401
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4828      	ldr	r0, [pc, #160]	; (80011f0 <MX_GPIO_Init+0x190>)
 8001150:	f000 ffcc 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC0_IN_LEFT_Pin */
  GPIO_InitStruct.Pin = KB_PC0_IN_LEFT_Pin;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KB_PC0_IN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <MX_GPIO_Init+0x194>)
 800116a:	f000 ffbf 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC3_OUT_row1_Pin KB_PC5_OUT_row3_Pin */
  GPIO_InitStruct.Pin = KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin;
 800116e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_GPIO_Init+0x194>)
 8001188:	f000 ffb0 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_DATA_4_Pin KB_PC4_OUT_row2_Pin
                           LCD_DATA_5_Pin LCD_DATA_6_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 800118c:	f24f 4380 	movw	r3, #62592	; 0xf480
 8001190:	61fb      	str	r3, [r7, #28]
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <MX_GPIO_Init+0x198>)
 80011a6:	f000 ffa1 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC1_IN_CENTER_Pin KB_PC2_IN_RIGHT_Pin */
  GPIO_InitStruct.Pin = KB_PC1_IN_CENTER_Pin|KB_PC2_IN_RIGHT_Pin;
 80011aa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	480e      	ldr	r0, [pc, #56]	; (80011f8 <MX_GPIO_Init+0x198>)
 80011c0:	f000 ff94 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC6_OUT_row4_Pin */
  GPIO_InitStruct.Pin = KB_PC6_OUT_row4_Pin;
 80011c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KB_PC6_OUT_row4_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_GPIO_Init+0x19c>)
 80011de:	f000 ff85 	bl	80020ec <HAL_GPIO_Init>

}
 80011e2:	bf00      	nop
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021800 	.word	0x40021800

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001206:	e7fe      	b.n	8001206 <Error_Handler+0x6>

08001208 <matrix_row>:
GPIO_TypeDef *sor_gpio_port[4] = {KB_PC3_OUT_row1_GPIO_Port, KB_PC4_OUT_row2_GPIO_Port, KB_PC5_OUT_row3_GPIO_Port, KB_PC6_OUT_row4_GPIO_Port};

GPIO_TypeDef *matrix_gpio_port[7] = {KB_PC6_OUT_row4_GPIO_Port, KB_PC5_OUT_row3_GPIO_Port, KB_PC4_OUT_row2_GPIO_Port, KB_PC3_OUT_row1_GPIO_Port, KB_PC2_IN_RIGHT_GPIO_Port, KB_PC1_IN_CENTER_GPIO_Port, KB_PC0_IN_LEFT_GPIO_Port};


void matrix_row(uint8_t row){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]

	uint8_t i = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]

	while(i<4){
 8001216:	e020      	b.n	800125a <matrix_row+0x52>
		if(i==(row-1)) HAL_GPIO_WritePin(sor_gpio_port[i], sor_pin[i], GPIO_PIN_SET);
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3b01      	subs	r3, #1
 800121e:	429a      	cmp	r2, r3
 8001220:	d10c      	bne.n	800123c <matrix_row+0x34>
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4a10      	ldr	r2, [pc, #64]	; (8001268 <matrix_row+0x60>)
 8001226:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <matrix_row+0x64>)
 800122e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	f001 f91b 	bl	8002470 <HAL_GPIO_WritePin>
 800123a:	e00b      	b.n	8001254 <matrix_row+0x4c>
		else HAL_GPIO_WritePin(sor_gpio_port[i], sor_pin[i], GPIO_PIN_RESET);
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <matrix_row+0x60>)
 8001240:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <matrix_row+0x64>)
 8001248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f001 f90e 	bl	8002470 <HAL_GPIO_WritePin>

		i++;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	3301      	adds	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
	while(i<4){
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d9db      	bls.n	8001218 <matrix_row+0x10>
	}
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000058 	.word	0x20000058
 800126c:	20000040 	.word	0x20000040

08001270 <matrix_scann>:


uint8_t matrix_scann(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	uint8_t bill = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]
	uint8_t seged = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	71bb      	strb	r3, [r7, #6]

	while(i<7){
 8001282:	e015      	b.n	80012b0 <matrix_scann+0x40>
		seged=HAL_GPIO_ReadPin(matrix_gpio_port[i], matrix_pin[i]);
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <matrix_scann+0x50>)
 8001288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <matrix_scann+0x54>)
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	4619      	mov	r1, r3
 8001296:	f001 f8d3 	bl	8002440 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	717b      	strb	r3, [r7, #5]
		bill=(bill<<1)+seged;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	4413      	add	r3, r2
 80012a8:	71fb      	strb	r3, [r7, #7]
		i++;
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	3301      	adds	r3, #1
 80012ae:	71bb      	strb	r3, [r7, #6]
	while(i<7){
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d9e6      	bls.n	8001284 <matrix_scann+0x14>
	}
		return bill;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000068 	.word	0x20000068
 80012c4:	20000048 	.word	0x20000048

080012c8 <matrix_search>:


int matrix_search(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	uint8_t num=0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]
	uint8_t bill=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71bb      	strb	r3, [r7, #6]

	matrix_row(row);
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <matrix_search+0x8c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff94 	bl	8001208 <matrix_row>
	HAL_Delay(5);
 80012e0:	2005      	movs	r0, #5
 80012e2:	f000 fa67 	bl	80017b4 <HAL_Delay>
	bill=matrix_scann();
 80012e6:	f7ff ffc3 	bl	8001270 <matrix_scann>
 80012ea:	4603      	mov	r3, r0
 80012ec:	71bb      	strb	r3, [r7, #6]

	while(num<12){
 80012ee:	e01a      	b.n	8001326 <matrix_search+0x5e>

		if(bill==billtomb[num]){
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <matrix_search+0x90>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	79ba      	ldrb	r2, [r7, #6]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10e      	bne.n	800131a <matrix_search+0x52>
			m_button2=num;
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <matrix_search+0x94>)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	7013      	strb	r3, [r2, #0]


			while(matrix_scann()==billtomb[num]);
 8001302:	bf00      	nop
 8001304:	f7ff ffb4 	bl	8001270 <matrix_scann>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <matrix_search+0x90>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	4299      	cmp	r1, r3
 8001314:	d0f6      	beq.n	8001304 <matrix_search+0x3c>

			return 0;
 8001316:	2300      	movs	r3, #0
 8001318:	e017      	b.n	800134a <matrix_search+0x82>
		}
		else{

			m_button2=12;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <matrix_search+0x94>)
 800131c:	220c      	movs	r2, #12
 800131e:	701a      	strb	r2, [r3, #0]
			num++;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3301      	adds	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
	while(num<12){
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b0b      	cmp	r3, #11
 800132a:	d9e1      	bls.n	80012f0 <matrix_search+0x28>
		}
	}

	if(row<4) row++;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <matrix_search+0x8c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d806      	bhi.n	8001342 <matrix_search+0x7a>
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <matrix_search+0x8c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <matrix_search+0x8c>)
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e002      	b.n	8001348 <matrix_search+0x80>
	else row=1;
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <matrix_search+0x8c>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]

	return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000003c 	.word	0x2000003c
 8001358:	0800545c 	.word	0x0800545c
 800135c:	2000003d 	.word	0x2000003d

08001360 <get_key>:

int get_key(void){
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return m_button2;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <get_key+0x14>)
 8001366:	781b      	ldrb	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000003d 	.word	0x2000003d

08001378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_MspInit+0x44>)
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_MspInit+0x44>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x44>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_MspInit+0x44>)
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_MspInit+0x44>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x44>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <HAL_ADC_MspInit+0x98>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10c      	bne.n	80013fc <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_ADC_MspInit+0x9c>)
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_ADC_MspInit+0x9c>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_ADC_MspInit+0x9c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013fa:	e028      	b.n	800144e <HAL_ADC_MspInit+0x8e>
  else if(hadc->Instance==ADC2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_ADC_MspInit+0xa0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d123      	bne.n	800144e <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <HAL_ADC_MspInit+0x9c>)
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_ADC_MspInit+0x9c>)
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_ADC_MspInit+0x9c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_ADC_MspInit+0x9c>)
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_ADC_MspInit+0x9c>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_ADC_MspInit+0x9c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001436:	2308      	movs	r3, #8
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <HAL_ADC_MspInit+0xa4>)
 800144a:	f000 fe4f 	bl	80020ec <HAL_GPIO_Init>
}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40012000 	.word	0x40012000
 800145c:	40023800 	.word	0x40023800
 8001460:	40012100 	.word	0x40012100
 8001464:	40020000 	.word	0x40020000

08001468 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <HAL_TIM_PWM_MspInit+0x78>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d114      	bne.n	80014a4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800147a:	4a1a      	ldr	r2, [pc, #104]	; (80014e4 <HAL_TIM_PWM_MspInit+0x7c>)
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_TIM_PWM_MspInit+0x7c>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	201e      	movs	r0, #30
 8001498:	f000 fdcf 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800149c:	201e      	movs	r0, #30
 800149e:	f000 fde8 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80014a2:	e018      	b.n	80014d6 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM12)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_TIM_PWM_MspInit+0x80>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d113      	bne.n	80014d6 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_TIM_PWM_MspInit+0x7c>)
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_TIM_PWM_MspInit+0x7c>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_TIM_PWM_MspInit+0x7c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	202b      	movs	r0, #43	; 0x2b
 80014cc:	f000 fdb5 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80014d0:	202b      	movs	r0, #43	; 0x2b
 80014d2:	f000 fdce 	bl	8002072 <HAL_NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40000800 	.word	0x40000800
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40001800 	.word	0x40001800

080014ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <HAL_TIM_MspPostInit+0xa8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d11c      	bne.n	8001548 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_TIM_MspPostInit+0xac>)
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_TIM_MspPostInit+0xac>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_TIM_MspPostInit+0xac>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001536:	2302      	movs	r3, #2
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <HAL_TIM_MspPostInit+0xb0>)
 8001542:	f000 fdd3 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001546:	e021      	b.n	800158c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11c      	bne.n	800158c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_TIM_MspPostInit+0xac>)
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_TIM_MspPostInit+0xac>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_TIM_MspPostInit+0xac>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800156a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800157c:	2309      	movs	r3, #9
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_TIM_MspPostInit+0xb0>)
 8001588:	f000 fdb0 	bl	80020ec <HAL_GPIO_Init>
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40000800 	.word	0x40000800
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40001800 	.word	0x40001800

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_UART_MspInit+0x8c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d130      	bne.n	8001628 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c6:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_UART_MspInit+0x90>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <HAL_UART_MspInit+0x94>)
 8001614:	f000 fd6a 	bl	80020ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2027      	movs	r0, #39	; 0x27
 800161e:	f000 fd0c 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001622:	2027      	movs	r0, #39	; 0x27
 8001624:	f000 fd25 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40004800 	.word	0x40004800
 8001634:	40023800 	.word	0x40023800
 8001638:	40020c00 	.word	0x40020c00

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f874 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM4_IRQHandler+0x10>)
 8001696:	f002 f84d 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000bc 	.word	0x200000bc

080016a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <USART3_IRQHandler+0x10>)
 80016aa:	f002 fff3 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000fc 	.word	0x200000fc

080016b8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80016be:	f002 f839 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000250 	.word	0x20000250

080016cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <SystemInit+0x28>)
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <SystemInit+0x28>)
 80016d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SystemInit+0x28>)
 80016e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016e6:	609a      	str	r2, [r3, #8]
#endif
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 fc91 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	2000      	movs	r0, #0
 8001704:	f000 f806 	bl	8001714 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe36 	bl	8001378 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fcab 	bl	800208e <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f000 fc73 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000084 	.word	0x20000084
 800176c:	2000008c 	.word	0x2000008c
 8001770:	20000088 	.word	0x20000088

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000008c 	.word	0x2000008c
 8001798:	200002a0 	.word	0x200002a0

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200002a0 	.word	0x200002a0

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_Delay+0x40>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad2      	subs	r2, r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3f7      	bcc.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000008c 	.word	0x2000008c

080017f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e031      	b.n	8001872 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fdd2 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_ADC_Init+0x84>)
 800183c:	4013      	ands	r3, r2
 800183e:	f043 0202 	orr.w	r2, r3, #2
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fa24 	bl	8001c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
 8001862:	e001      	b.n	8001868 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	ffffeefd 	.word	0xffffeefd

08001880 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_ADC_Start+0x1a>
 8001896:	2302      	movs	r3, #2
 8001898:	e0a0      	b.n	80019dc <HAL_ADC_Start+0x15c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d018      	beq.n	80018e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	6892      	ldr	r2, [r2, #8]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_ADC_Start+0x168>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_ADC_Start+0x16c>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9a      	lsrs	r2, r3, #18
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d174      	bne.n	80019da <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <HAL_ADC_Start+0x170>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001916:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192a:	d106      	bne.n	800193a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f023 0206 	bic.w	r2, r3, #6
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
 8001938:	e002      	b.n	8001940 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001950:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_ADC_Start+0x174>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d136      	bne.n	80019da <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	6892      	ldr	r2, [r2, #8]
 8001976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e02d      	b.n	80019da <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <HAL_ADC_Start+0x178>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10e      	bne.n	80019a6 <HAL_ADC_Start+0x126>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	6892      	ldr	r2, [r2, #8]
 80019a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_ADC_Start+0x174>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d113      	bne.n	80019da <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a11      	ldr	r2, [pc, #68]	; (80019fc <HAL_ADC_Start+0x17c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d10e      	bne.n	80019da <HAL_ADC_Start+0x15a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	6892      	ldr	r2, [r2, #8]
 80019d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019d8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000084 	.word	0x20000084
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	fffff8fe 	.word	0xfffff8fe
 80019f4:	40012300 	.word	0x40012300
 80019f8:	40012000 	.word	0x40012000
 80019fc:	40012200 	.word	0x40012200

08001a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a00:	b490      	push	{r4, r7}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1c>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e12c      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x276>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d93b      	bls.n	8001aa4 <HAL_ADC_ConfigChannel+0xa4>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a34:	d036      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0xa4>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4403      	add	r3, r0
 8001a4e:	3b1e      	subs	r3, #30
 8001a50:	2007      	movs	r0, #7
 8001a52:	fa00 f303 	lsl.w	r3, r0, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	400b      	ands	r3, r1
 8001a5a:	60d3      	str	r3, [r2, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a87      	ldr	r2, [pc, #540]	; (8001c80 <HAL_ADC_ConfigChannel+0x280>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10a      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	68d1      	ldr	r1, [r2, #12]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6892      	ldr	r2, [r2, #8]
 8001a74:	0612      	lsls	r2, r2, #24
 8001a76:	430a      	orrs	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7a:	e037      	b.n	8001aec <HAL_ADC_ConfigChannel+0xec>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68d9      	ldr	r1, [r3, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6898      	ldr	r0, [r3, #8]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461c      	mov	r4, r3
 8001a92:	4623      	mov	r3, r4
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4423      	add	r3, r4
 8001a98:	3b1e      	subs	r3, #30
 8001a9a:	fa00 f303 	lsl.w	r3, r0, r3
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	60d3      	str	r3, [r2, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa2:	e023      	b.n	8001aec <HAL_ADC_ConfigChannel+0xec>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6919      	ldr	r1, [r3, #16]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4403      	add	r3, r0
 8001abc:	2007      	movs	r0, #7
 8001abe:	fa00 f303 	lsl.w	r3, r0, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6898      	ldr	r0, [r3, #8]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461c      	mov	r4, r3
 8001ade:	4623      	mov	r3, r4
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4423      	add	r3, r4
 8001ae4:	fa00 f303 	lsl.w	r3, r0, r3
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d824      	bhi.n	8001b3e <HAL_ADC_ConfigChannel+0x13e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6819      	ldr	r1, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	3b05      	subs	r3, #5
 8001b0a:	221f      	movs	r2, #31
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4003      	ands	r3, r0
 8001b14:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	461c      	mov	r4, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	3b05      	subs	r3, #5
 8001b34:	fa04 f303 	lsl.w	r3, r4, r3
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	634b      	str	r3, [r1, #52]	; 0x34
 8001b3c:	e04c      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d824      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b23      	subs	r3, #35	; 0x23
 8001b5c:	221f      	movs	r2, #31
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4003      	ands	r3, r0
 8001b66:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461c      	mov	r4, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b23      	subs	r3, #35	; 0x23
 8001b86:	fa04 f303 	lsl.w	r3, r4, r3
 8001b8a:	4303      	orrs	r3, r0
 8001b8c:	630b      	str	r3, [r1, #48]	; 0x30
 8001b8e:	e023      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b41      	subs	r3, #65	; 0x41
 8001ba6:	221f      	movs	r2, #31
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4003      	ands	r3, r0
 8001bb0:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b41      	subs	r3, #65	; 0x41
 8001bd0:	fa04 f303 	lsl.w	r3, r4, r3
 8001bd4:	4303      	orrs	r3, r0
 8001bd6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_ADC_ConfigChannel+0x284>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10a      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1f8>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1f8>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_ADC_ConfigChannel+0x288>)
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_ADC_ConfigChannel+0x288>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bf6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_ADC_ConfigChannel+0x284>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d109      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x216>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d105      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x216>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_ADC_ConfigChannel+0x288>)
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_ADC_ConfigChannel+0x288>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <HAL_ADC_ConfigChannel+0x284>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d125      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x26c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_ADC_ConfigChannel+0x280>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d003      	beq.n	8001c32 <HAL_ADC_ConfigChannel+0x232>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b11      	cmp	r3, #17
 8001c30:	d11c      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x26c>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <HAL_ADC_ConfigChannel+0x288>)
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_ADC_ConfigChannel+0x288>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c3c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_ADC_ConfigChannel+0x280>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d111      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x26c>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_ADC_ConfigChannel+0x28c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <HAL_ADC_ConfigChannel+0x290>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0c9a      	lsrs	r2, r3, #18
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c5e:	e002      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x266>
      {
        counter--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f9      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x260>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc90      	pop	{r4, r7}
 8001c7e:	4770      	bx	lr
 8001c80:	10000012 	.word	0x10000012
 8001c84:	40012000 	.word	0x40012000
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	20000084 	.word	0x20000084
 8001c90:	431bde83 	.word	0x431bde83

08001c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c9c:	4a78      	ldr	r2, [pc, #480]	; (8001e80 <ADC_Init+0x1ec>)
 8001c9e:	4b78      	ldr	r3, [pc, #480]	; (8001e80 <ADC_Init+0x1ec>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ca6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ca8:	4975      	ldr	r1, [pc, #468]	; (8001e80 <ADC_Init+0x1ec>)
 8001caa:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <ADC_Init+0x1ec>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	6852      	ldr	r2, [r2, #4]
 8001cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	6851      	ldr	r1, [r2, #4]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6912      	ldr	r2, [r2, #16]
 8001cd4:	0212      	lsls	r2, r2, #8
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	6852      	ldr	r2, [r2, #4]
 8001ce4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	6851      	ldr	r1, [r2, #4]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6892      	ldr	r2, [r2, #8]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	6892      	ldr	r2, [r2, #8]
 8001d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	6891      	ldr	r1, [r2, #8]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68d2      	ldr	r2, [r2, #12]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <ADC_Init+0x1f0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	6892      	ldr	r2, [r2, #8]
 8001d32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	6891      	ldr	r1, [r2, #8]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	6892      	ldr	r2, [r2, #8]
 8001d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	6891      	ldr	r1, [r2, #8]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	e00f      	b.n	8001d8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	6892      	ldr	r2, [r2, #8]
 8001d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	6892      	ldr	r2, [r2, #8]
 8001d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	6892      	ldr	r2, [r2, #8]
 8001d98:	f022 0202 	bic.w	r2, r2, #2
 8001d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	6891      	ldr	r1, [r2, #8]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6992      	ldr	r2, [r2, #24]
 8001dac:	0052      	lsls	r2, r2, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01b      	beq.n	8001df4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	6852      	ldr	r2, [r2, #4]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	6852      	ldr	r2, [r2, #4]
 8001dd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	6851      	ldr	r1, [r2, #4]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dea:	3a01      	subs	r2, #1
 8001dec:	0352      	lsls	r2, r2, #13
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	e007      	b.n	8001e04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	6852      	ldr	r2, [r2, #4]
 8001dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	69d2      	ldr	r2, [r2, #28]
 8001e22:	3a01      	subs	r2, #1
 8001e24:	0512      	lsls	r2, r2, #20
 8001e26:	430a      	orrs	r2, r1
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	6892      	ldr	r2, [r2, #8]
 8001e34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	6891      	ldr	r1, [r2, #8]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001e4a:	0252      	lsls	r2, r2, #9
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	6892      	ldr	r2, [r2, #8]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	6891      	ldr	r1, [r2, #8]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6952      	ldr	r2, [r2, #20]
 8001e6e:	0292      	lsls	r2, r2, #10
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	40012300 	.word	0x40012300
 8001e84:	0f000001 	.word	0x0f000001

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	05fa0000 	.word	0x05fa0000

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	4909      	ldr	r1, [pc, #36]	; (8001f24 <__NVIC_EnableIRQ+0x38>)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	79fa      	ldrb	r2, [r7, #7]
 8001f08:	f002 021f 	and.w	r2, r2, #31
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	490d      	ldr	r1, [pc, #52]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	4909      	ldr	r1, [pc, #36]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	1e59      	subs	r1, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff90 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff2b 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff40 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff90 	bl	8001f7c <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5f 	bl	8001f28 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff33 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa2 	bl	8001fe0 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e00c      	b.n	80020de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2205      	movs	r2, #5
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e175      	b.n	80023f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8164 	bne.w	80023f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00b      	beq.n	800214a <HAL_GPIO_Init+0x5e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213e:	2b11      	cmp	r3, #17
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b12      	cmp	r3, #18
 8002148:	d130      	bne.n	80021ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0201 	and.w	r2, r3, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x100>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80be 	beq.w	80023f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_GPIO_Init+0x320>)
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_GPIO_Init+0x320>)
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_GPIO_Init+0x320>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800228e:	4a60      	ldr	r2, [pc, #384]	; (8002410 <HAL_GPIO_Init+0x324>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_GPIO_Init+0x328>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d037      	beq.n	800232a <HAL_GPIO_Init+0x23e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a56      	ldr	r2, [pc, #344]	; (8002418 <HAL_GPIO_Init+0x32c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_GPIO_Init+0x23a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a55      	ldr	r2, [pc, #340]	; (800241c <HAL_GPIO_Init+0x330>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02b      	beq.n	8002322 <HAL_GPIO_Init+0x236>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a54      	ldr	r2, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x334>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d025      	beq.n	800231e <HAL_GPIO_Init+0x232>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a53      	ldr	r2, [pc, #332]	; (8002424 <HAL_GPIO_Init+0x338>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <HAL_GPIO_Init+0x22e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_GPIO_Init+0x33c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x22a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_GPIO_Init+0x340>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x226>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_GPIO_Init+0x344>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x222>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_GPIO_Init+0x348>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x21e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <HAL_GPIO_Init+0x34c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x21a>
 8002302:	2309      	movs	r3, #9
 8002304:	e012      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002306:	230a      	movs	r3, #10
 8002308:	e010      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230a:	2308      	movs	r3, #8
 800230c:	e00e      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230e:	2307      	movs	r3, #7
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002312:	2306      	movs	r3, #6
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x240>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800233c:	4934      	ldr	r1, [pc, #208]	; (8002410 <HAL_GPIO_Init+0x324>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234a:	4b3c      	ldr	r3, [pc, #240]	; (800243c <HAL_GPIO_Init+0x350>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236e:	4a33      	ldr	r2, [pc, #204]	; (800243c <HAL_GPIO_Init+0x350>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_GPIO_Init+0x350>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_GPIO_Init+0x350>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_GPIO_Init+0x350>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_GPIO_Init+0x350>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_GPIO_Init+0x350>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ec:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_GPIO_Init+0x350>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae86 	bls.w	800210c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	3724      	adds	r7, #36	; 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40023800 	.word	0x40023800
 8002410:	40013800 	.word	0x40013800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40021400 	.word	0x40021400
 800242c:	40021800 	.word	0x40021800
 8002430:	40021c00 	.word	0x40021c00
 8002434:	40022000 	.word	0x40022000
 8002438:	40022400 	.word	0x40022400
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e001      	b.n	8002462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800248c:	e003      	b.n	8002496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	041a      	lsls	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	619a      	str	r2, [r3, #24]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e291      	b.n	80029de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d00c      	beq.n	80024ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d4:	4b93      	ldr	r3, [pc, #588]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d112      	bne.n	8002506 <HAL_RCC_OscConfig+0x62>
 80024e0:	4b90      	ldr	r3, [pc, #576]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x130>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d168      	bne.n	80025d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e26b      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x7a>
 8002510:	4a84      	ldr	r2, [pc, #528]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002512:	4b84      	ldr	r3, [pc, #528]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e02e      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x9c>
 8002526:	4a7f      	ldr	r2, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002528:	4b7e      	ldr	r3, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4a7c      	ldr	r2, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0xc0>
 800254a:	4a76      	ldr	r2, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800254c:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4a73      	ldr	r2, [pc, #460]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 8002564:	4a6f      	ldr	r2, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002566:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4a6c      	ldr	r2, [pc, #432]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002572:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff f90a 	bl	800179c <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff f906 	bl	800179c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e21f      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f8f6 	bl	800179c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff f8f2 	bl	800179c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e20b      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x110>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d069      	beq.n	80026b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e2:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x190>
 80025fa:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x17a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1df      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4941      	ldr	r1, [pc, #260]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002620:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e040      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d023      	beq.n	8002684 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4a39      	ldr	r2, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff f8a8 	bl	800179c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff f8a4 	bl	800179c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1bd      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	492d      	ldr	r1, [pc, #180]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
 8002682:	e018      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f884 	bl	800179c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7ff f880 	bl	800179c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e199      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d038      	beq.n	8002734 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d019      	beq.n	80026fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7ff f861 	bl	800179c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026de:	f7ff f85d 	bl	800179c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e176      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x23a>
 80026fc:	e01a      	b.n	8002734 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7ff f847 	bl	800179c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002712:	f7ff f843 	bl	800179c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d903      	bls.n	8002728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e15c      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
 8002724:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	4b91      	ldr	r3, [pc, #580]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ee      	bne.n	8002712 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a4 	beq.w	800288a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b8b      	ldr	r3, [pc, #556]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4a88      	ldr	r2, [pc, #544]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002750:	4b87      	ldr	r3, [pc, #540]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b85      	ldr	r3, [pc, #532]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002776:	4a7f      	ldr	r2, [pc, #508]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002778:	4b7e      	ldr	r3, [pc, #504]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7ff f80b 	bl	800179c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7ff f807 	bl	800179c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e120      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x31a>
 80027b0:	4a6f      	ldr	r2, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	e02d      	b.n	800281a <HAL_RCC_OscConfig+0x376>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x33c>
 80027c6:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	4b69      	ldr	r3, [pc, #420]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027d4:	4b66      	ldr	r3, [pc, #408]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	e01c      	b.n	800281a <HAL_RCC_OscConfig+0x376>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x35e>
 80027e8:	4a61      	ldr	r2, [pc, #388]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	e00b      	b.n	800281a <HAL_RCC_OscConfig+0x376>
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002804:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002810:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d015      	beq.n	800284e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe ffbb 	bl	800179c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe ffb7 	bl	800179c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0ce      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <HAL_RCC_OscConfig+0x386>
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe ffa5 	bl	800179c <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe ffa1 	bl	800179c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0b8      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	4b40      	ldr	r3, [pc, #256]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a4 	beq.w	80029dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	4b36      	ldr	r3, [pc, #216]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d06b      	beq.n	8002978 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d149      	bne.n	800293c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	4a31      	ldr	r2, [pc, #196]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe ff72 	bl	800179c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe ff6e 	bl	800179c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e087      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028da:	4925      	ldr	r1, [pc, #148]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	4313      	orrs	r3, r2
 8002902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe ff42 	bl	800179c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe ff3e 	bl	800179c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e057      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x478>
 800293a:	e04f      	b.n	80029dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe ff28 	bl	800179c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe ff24 	bl	800179c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e03d      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b03      	ldr	r3, [pc, #12]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x4ac>
 800296e:	e035      	b.n	80029dc <HAL_RCC_OscConfig+0x538>
 8002970:	40023800 	.word	0x40023800
 8002974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x544>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d028      	beq.n	80029d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d121      	bne.n	80029d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d11a      	bne.n	80029d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d111      	bne.n	80029d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0d0      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d210      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4967      	ldr	r1, [pc, #412]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	4b66      	ldr	r3, [pc, #408]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 020f 	bic.w	r2, r3, #15
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 020f 	and.w	r2, r3, #15
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4a59      	ldr	r2, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4a53      	ldr	r2, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4950      	ldr	r1, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d040      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d115      	bne.n	8002ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e073      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06b      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 0203 	bic.w	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fe5c 	bl	800179c <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe fe58 	bl	800179c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e053      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d910      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4924      	ldr	r1, [pc, #144]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 020f 	bic.w	r2, r3, #15
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4919      	ldr	r1, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6a:	4912      	ldr	r1, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4601      	mov	r1, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	fa21 f303 	lsr.w	r3, r1, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1d0>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1d4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fdb8 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08005468 	.word	0x08005468
 8002bbc:	20000084 	.word	0x20000084
 8002bc0:	20000088 	.word	0x20000088

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc8:	b087      	sub	sp, #28
 8002bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	617a      	str	r2, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8002bd8:	2200      	movs	r2, #0
 8002bda:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bdc:	4a51      	ldr	r2, [pc, #324]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	f002 020c 	and.w	r2, r2, #12
 8002be4:	2a04      	cmp	r2, #4
 8002be6:	d007      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002be8:	2a08      	cmp	r2, #8
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bec:	2a00      	cmp	r2, #0
 8002bee:	f040 8090 	bne.w	8002d12 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bf4:	613b      	str	r3, [r7, #16]
      break;
 8002bf6:	e08f      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x168>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	e08c      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bfe:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c00:	6852      	ldr	r2, [r2, #4]
 8002c02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c06:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c08:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c0a:	6852      	ldr	r2, [r2, #4]
 8002c0c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d023      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	f04f 0400 	mov.w	r4, #0
 8002c1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	ea03 0301 	and.w	r3, r3, r1
 8002c2a:	ea04 0402 	and.w	r4, r4, r2
 8002c2e:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c30:	fb02 f104 	mul.w	r1, r2, r4
 8002c34:	2200      	movs	r2, #0
 8002c36:	fb02 f203 	mul.w	r2, r2, r3
 8002c3a:	440a      	add	r2, r1
 8002c3c:	493b      	ldr	r1, [pc, #236]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c3e:	fba3 0101 	umull	r0, r1, r3, r1
 8002c42:	1853      	adds	r3, r2, r1
 8002c44:	4619      	mov	r1, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4623      	mov	r3, r4
 8002c50:	f7fd fae4 	bl	800021c <__aeabi_uldivmod>
 8002c54:	4603      	mov	r3, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e04c      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5c:	4a31      	ldr	r2, [pc, #196]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c5e:	6852      	ldr	r2, [r2, #4]
 8002c60:	0992      	lsrs	r2, r2, #6
 8002c62:	4611      	mov	r1, r2
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002c6c:	f04f 0600 	mov.w	r6, #0
 8002c70:	ea05 0501 	and.w	r5, r5, r1
 8002c74:	ea06 0602 	and.w	r6, r6, r2
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4632      	mov	r2, r6
 8002c7c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002c80:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002c84:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002c88:	4651      	mov	r1, sl
 8002c8a:	465a      	mov	r2, fp
 8002c8c:	46aa      	mov	sl, r5
 8002c8e:	46b3      	mov	fp, r6
 8002c90:	4655      	mov	r5, sl
 8002c92:	465e      	mov	r6, fp
 8002c94:	1b4d      	subs	r5, r1, r5
 8002c96:	eb62 0606 	sbc.w	r6, r2, r6
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	0194      	lsls	r4, r2, #6
 8002ca0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ca4:	018b      	lsls	r3, r1, #6
 8002ca6:	1a5b      	subs	r3, r3, r1
 8002ca8:	eb64 0402 	sbc.w	r4, r4, r2
 8002cac:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002cb0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002cb4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002cb8:	4643      	mov	r3, r8
 8002cba:	464c      	mov	r4, r9
 8002cbc:	4655      	mov	r5, sl
 8002cbe:	465e      	mov	r6, fp
 8002cc0:	18ed      	adds	r5, r5, r3
 8002cc2:	eb46 0604 	adc.w	r6, r6, r4
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	4634      	mov	r4, r6
 8002cca:	02a2      	lsls	r2, r4, #10
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4623      	mov	r3, r4
 8002cec:	f7fd fa96 	bl	800021c <__aeabi_uldivmod>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	3301      	adds	r3, #1
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	e002      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d14:	613b      	str	r3, [r7, #16]
      break;
 8002d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d18:	693b      	ldr	r3, [r7, #16]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	017d7840 	.word	0x017d7840

08002d30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000084 	.word	0x20000084

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff0 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d50:	4601      	mov	r1, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a9b      	lsrs	r3, r3, #10
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08005478 	.word	0x08005478

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff ffdc 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d78:	4601      	mov	r1, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0b5b      	lsrs	r3, r3, #13
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	08005478 	.word	0x08005478

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dc0:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc2:	4b69      	ldr	r3, [pc, #420]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	4966      	ldr	r1, [pc, #408]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d017      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df2:	495d      	ldr	r1, [pc, #372]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df4:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e10:	d101      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d017      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e2e:	494e      	ldr	r1, [pc, #312]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 808b 	beq.w	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4a3a      	ldr	r2, [pc, #232]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6413      	str	r3, [r2, #64]	; 0x40
 8002e88:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e94:	4a35      	ldr	r2, [pc, #212]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e96:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fc7c 	bl	800179c <HAL_GetTick>
 8002ea4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe fc78 	bl	800179c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e355      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eba:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec6:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d035      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d02e      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee4:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f06:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d114      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fc40 	bl	800179c <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fe fc3c 	bl	800179c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e317      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ee      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4e:	d111      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f50:	4805      	ldr	r0, [pc, #20]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f60:	400b      	ands	r3, r1
 8002f62:	4313      	orrs	r3, r2
 8002f64:	6083      	str	r3, [r0, #8]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	0ffffcff 	.word	0x0ffffcff
 8002f74:	4ab0      	ldr	r2, [pc, #704]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f76:	4bb0      	ldr	r3, [pc, #704]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f7e:	6093      	str	r3, [r2, #8]
 8002f80:	49ad      	ldr	r1, [pc, #692]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f82:	4bad      	ldr	r3, [pc, #692]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d010      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f9e:	4aa6      	ldr	r2, [pc, #664]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fa0:	4ba5      	ldr	r3, [pc, #660]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002faa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fae:	49a2      	ldr	r1, [pc, #648]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fb0:	4ba1      	ldr	r3, [pc, #644]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fb2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fcc:	499a      	ldr	r1, [pc, #616]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fce:	4b9a      	ldr	r3, [pc, #616]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fee:	4992      	ldr	r1, [pc, #584]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ff0:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003010:	4989      	ldr	r1, [pc, #548]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003012:	4b89      	ldr	r3, [pc, #548]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003032:	4981      	ldr	r1, [pc, #516]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003034:	4b80      	ldr	r3, [pc, #512]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003054:	4978      	ldr	r1, [pc, #480]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003056:	4b78      	ldr	r3, [pc, #480]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f023 0203 	bic.w	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003076:	4970      	ldr	r1, [pc, #448]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 020c 	bic.w	r2, r3, #12
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003098:	4967      	ldr	r1, [pc, #412]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030ba:	495f      	ldr	r1, [pc, #380]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030bc:	4b5e      	ldr	r3, [pc, #376]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030dc:	4956      	ldr	r1, [pc, #344]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030fe:	494e      	ldr	r1, [pc, #312]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003100:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003120:	4945      	ldr	r1, [pc, #276]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003122:	4b45      	ldr	r3, [pc, #276]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003142:	493d      	ldr	r1, [pc, #244]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003144:	4b3c      	ldr	r3, [pc, #240]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003164:	4934      	ldr	r1, [pc, #208]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d011      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003186:	492c      	ldr	r1, [pc, #176]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a4:	d101      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031c6:	491c      	ldr	r1, [pc, #112]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031e8:	4913      	ldr	r1, [pc, #76]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d005      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800320e:	f040 80d8 	bne.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800321c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321e:	f7fe fabd 	bl	800179c <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003226:	f7fe fab9 	bl	800179c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b64      	cmp	r3, #100	; 0x64
 8003232:	d903      	bls.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e196      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003238:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800323c:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ee      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d021      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11d      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800325c:	4b64      	ldr	r3, [pc, #400]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800326a:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800326c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003278:	495d      	ldr	r1, [pc, #372]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	019a      	lsls	r2, r3, #6
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x516>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02e      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c2:	d129      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032c4:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	0c1b      	lsrs	r3, r3, #16
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d8:	0f1b      	lsrs	r3, r3, #28
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032e0:	4943      	ldr	r1, [pc, #268]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	019a      	lsls	r2, r3, #6
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	071b      	lsls	r3, r3, #28
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003300:	493b      	ldr	r1, [pc, #236]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003308:	f023 021f 	bic.w	r2, r3, #31
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	3b01      	subs	r3, #1
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01d      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003332:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003338:	0f1b      	lsrs	r3, r3, #28
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003340:	492b      	ldr	r1, [pc, #172]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	019a      	lsls	r2, r3, #6
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431a      	orrs	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d011      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800336c:	4920      	ldr	r1, [pc, #128]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	019a      	lsls	r2, r3, #6
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800339a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fe f9fe 	bl	800179c <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033a4:	f7fe f9fa 	bl	800179c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0d7      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	f040 80cd 	bne.w	8003564 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d6:	f7fe f9e1 	bl	800179c <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033de:	f7fe f9dd 	bl	800179c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b64      	cmp	r3, #100	; 0x64
 80033ea:	d903      	bls.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0ba      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80033f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033f4:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003400:	d0ed      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800341e:	2b00      	cmp	r3, #0
 8003420:	d02e      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d12a      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003438:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	0f1b      	lsrs	r3, r3, #28
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003446:	494a      	ldr	r1, [pc, #296]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	019a      	lsls	r2, r3, #6
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	431a      	orrs	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	071b      	lsls	r3, r3, #28
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003466:	4942      	ldr	r1, [pc, #264]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003468:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800346a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800346e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d022      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003494:	d11d      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	0e1b      	lsrs	r3, r3, #24
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	0f1b      	lsrs	r3, r3, #28
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034b2:	492f      	ldr	r1, [pc, #188]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	019a      	lsls	r2, r3, #6
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	431a      	orrs	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	071b      	lsls	r3, r3, #28
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d028      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	0e1b      	lsrs	r3, r3, #24
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034fa:	491d      	ldr	r1, [pc, #116]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	019a      	lsls	r2, r3, #6
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	431a      	orrs	r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	071b      	lsls	r3, r3, #28
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800351a:	4915      	ldr	r1, [pc, #84]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800351e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fe f92e 	bl	800179c <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003544:	f7fe f92a 	bl	800179c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e007      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800355e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003562:	d1ef      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800

08003574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	68d2      	ldr	r2, [r2, #12]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_TIM_Base_Start_IT+0x50>)
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b06      	cmp	r3, #6
 800359c:	d00b      	beq.n	80035b6 <HAL_TIM_Base_Start_IT+0x42>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d007      	beq.n	80035b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	00010007 	.word	0x00010007

080035c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01d      	b.n	8003616 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd ff3a 	bl	8001468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 faf4 	bl	8003bf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d841      	bhi.n	80036b4 <HAL_TIM_PWM_Start_IT+0x94>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_TIM_PWM_Start_IT+0x18>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800366d 	.word	0x0800366d
 800363c:	080036b5 	.word	0x080036b5
 8003640:	080036b5 	.word	0x080036b5
 8003644:	080036b5 	.word	0x080036b5
 8003648:	0800367f 	.word	0x0800367f
 800364c:	080036b5 	.word	0x080036b5
 8003650:	080036b5 	.word	0x080036b5
 8003654:	080036b5 	.word	0x080036b5
 8003658:	08003691 	.word	0x08003691
 800365c:	080036b5 	.word	0x080036b5
 8003660:	080036b5 	.word	0x080036b5
 8003664:	080036b5 	.word	0x080036b5
 8003668:	080036a3 	.word	0x080036a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	68d2      	ldr	r2, [r2, #12]
 8003676:	f042 0202 	orr.w	r2, r2, #2
 800367a:	60da      	str	r2, [r3, #12]
      break;
 800367c:	e01b      	b.n	80036b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	68d2      	ldr	r2, [r2, #12]
 8003688:	f042 0204 	orr.w	r2, r2, #4
 800368c:	60da      	str	r2, [r3, #12]
      break;
 800368e:	e012      	b.n	80036b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	f042 0208 	orr.w	r2, r2, #8
 800369e:	60da      	str	r2, [r3, #12]
      break;
 80036a0:	e009      	b.n	80036b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	68d2      	ldr	r2, [r2, #12]
 80036ac:	f042 0210 	orr.w	r2, r2, #16
 80036b0:	60da      	str	r2, [r3, #12]
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80036b4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fd96 	bl	80041f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a17      	ldr	r2, [pc, #92]	; (8003728 <HAL_TIM_PWM_Start_IT+0x108>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_TIM_PWM_Start_IT+0xb8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_TIM_PWM_Start_IT+0x10c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_PWM_Start_IT+0xbc>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_TIM_PWM_Start_IT+0xbe>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_TIM_PWM_Start_IT+0x110>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d00b      	beq.n	800371c <HAL_TIM_PWM_Start_IT+0xfc>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370a:	d007      	beq.n	800371c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400
 8003730:	00010007 	.word	0x00010007

08003734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0202 	mvn.w	r2, #2
 8003760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa1e 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa10 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fa21 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d122      	bne.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d11b      	bne.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0204 	mvn.w	r2, #4
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f9f4 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f9e6 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f9f7 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0208 	mvn.w	r2, #8
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2204      	movs	r2, #4
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9ca 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9bc 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f9cd 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b10      	cmp	r3, #16
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0210 	mvn.w	r2, #16
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2208      	movs	r2, #8
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9a0 	bl	8003bb8 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f992 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f9a3 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0201 	mvn.w	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd f8a8 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fd44 	bl	800436c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d107      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fd37 	bl	8004380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f951 	bl	8003be0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d10e      	bne.n	800396a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d107      	bne.n	800396a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0220 	mvn.w	r2, #32
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fcf7 	bl	8004358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800398a:	2302      	movs	r3, #2
 800398c:	e105      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x226>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b14      	cmp	r3, #20
 80039a2:	f200 80f0 	bhi.w	8003b86 <HAL_TIM_PWM_ConfigChannel+0x212>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	08003a01 	.word	0x08003a01
 80039b0:	08003b87 	.word	0x08003b87
 80039b4:	08003b87 	.word	0x08003b87
 80039b8:	08003b87 	.word	0x08003b87
 80039bc:	08003a41 	.word	0x08003a41
 80039c0:	08003b87 	.word	0x08003b87
 80039c4:	08003b87 	.word	0x08003b87
 80039c8:	08003b87 	.word	0x08003b87
 80039cc:	08003a83 	.word	0x08003a83
 80039d0:	08003b87 	.word	0x08003b87
 80039d4:	08003b87 	.word	0x08003b87
 80039d8:	08003b87 	.word	0x08003b87
 80039dc:	08003ac3 	.word	0x08003ac3
 80039e0:	08003b87 	.word	0x08003b87
 80039e4:	08003b87 	.word	0x08003b87
 80039e8:	08003b87 	.word	0x08003b87
 80039ec:	08003b05 	.word	0x08003b05
 80039f0:	08003b87 	.word	0x08003b87
 80039f4:	08003b87 	.word	0x08003b87
 80039f8:	08003b87 	.word	0x08003b87
 80039fc:	08003b45 	.word	0x08003b45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f994 	bl	8003d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	6992      	ldr	r2, [r2, #24]
 8003a16:	f042 0208 	orr.w	r2, r2, #8
 8003a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	6992      	ldr	r2, [r2, #24]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	6991      	ldr	r1, [r2, #24]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	6912      	ldr	r2, [r2, #16]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	619a      	str	r2, [r3, #24]
      break;
 8003a3e:	e0a3      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f9e6 	bl	8003e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	6992      	ldr	r2, [r2, #24]
 8003a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	6992      	ldr	r2, [r2, #24]
 8003a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	6991      	ldr	r1, [r2, #24]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	6912      	ldr	r2, [r2, #16]
 8003a7a:	0212      	lsls	r2, r2, #8
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	619a      	str	r2, [r3, #24]
      break;
 8003a80:	e082      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fa3d 	bl	8003f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	69d2      	ldr	r2, [r2, #28]
 8003a98:	f042 0208 	orr.w	r2, r2, #8
 8003a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	69d2      	ldr	r2, [r2, #28]
 8003aa8:	f022 0204 	bic.w	r2, r2, #4
 8003aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	69d1      	ldr	r1, [r2, #28]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	6912      	ldr	r2, [r2, #16]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	61da      	str	r2, [r3, #28]
      break;
 8003ac0:	e062      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fa93 	bl	8003ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	69d2      	ldr	r2, [r2, #28]
 8003ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	69d2      	ldr	r2, [r2, #28]
 8003ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	69d1      	ldr	r1, [r2, #28]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	6912      	ldr	r2, [r2, #16]
 8003afc:	0212      	lsls	r2, r2, #8
 8003afe:	430a      	orrs	r2, r1
 8003b00:	61da      	str	r2, [r3, #28]
      break;
 8003b02:	e041      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 faca 	bl	80040a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b1a:	f042 0208 	orr.w	r2, r2, #8
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	6912      	ldr	r2, [r2, #16]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b42:	e021      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fafc 	bl	8004148 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	6912      	ldr	r2, [r2, #16]
 8003b7e:	0212      	lsls	r2, r2, #8
 8003b80:	430a      	orrs	r2, r1
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b84:	e000      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003b86:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop

08003ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a40      	ldr	r2, [pc, #256]	; (8003d08 <TIM_Base_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c12:	d00f      	beq.n	8003c34 <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3d      	ldr	r2, [pc, #244]	; (8003d0c <TIM_Base_SetConfig+0x118>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a3c      	ldr	r2, [pc, #240]	; (8003d10 <TIM_Base_SetConfig+0x11c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <TIM_Base_SetConfig+0x120>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <TIM_Base_SetConfig+0x124>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d108      	bne.n	8003c46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2f      	ldr	r2, [pc, #188]	; (8003d08 <TIM_Base_SetConfig+0x114>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d02b      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d027      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2c      	ldr	r2, [pc, #176]	; (8003d0c <TIM_Base_SetConfig+0x118>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d023      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a2b      	ldr	r2, [pc, #172]	; (8003d10 <TIM_Base_SetConfig+0x11c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01f      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <TIM_Base_SetConfig+0x120>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01b      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <TIM_Base_SetConfig+0x124>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d017      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <TIM_Base_SetConfig+0x128>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a27      	ldr	r2, [pc, #156]	; (8003d20 <TIM_Base_SetConfig+0x12c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00f      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <TIM_Base_SetConfig+0x130>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00b      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <TIM_Base_SetConfig+0x134>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d007      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <TIM_Base_SetConfig+0x138>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <TIM_Base_SetConfig+0x13c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d108      	bne.n	8003cb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <TIM_Base_SetConfig+0x114>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_Base_SetConfig+0xf8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <TIM_Base_SetConfig+0x124>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d103      	bne.n	8003cf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	615a      	str	r2, [r3, #20]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40010400 	.word	0x40010400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40014400 	.word	0x40014400
 8003d24:	40014800 	.word	0x40014800
 8003d28:	40001800 	.word	0x40001800
 8003d2c:	40001c00 	.word	0x40001c00
 8003d30:	40002000 	.word	0x40002000

08003d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <TIM_OC1_SetConfig+0xd8>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <TIM_OC1_SetConfig+0xdc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_OC1_SetConfig+0x64>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <TIM_OC1_SetConfig+0xe0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d10c      	bne.n	8003db2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0308 	bic.w	r3, r3, #8
 8003d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <TIM_OC1_SetConfig+0xdc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC1_SetConfig+0x8e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <TIM_OC1_SetConfig+0xe0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d111      	bne.n	8003de6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	fffeff8f 	.word	0xfffeff8f
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010400 	.word	0x40010400

08003e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0210 	bic.w	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <TIM_OC2_SetConfig+0xe4>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0320 	bic.w	r3, r3, #32
 8003e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <TIM_OC2_SetConfig+0xe8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_OC2_SetConfig+0x68>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <TIM_OC2_SetConfig+0xec>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10d      	bne.n	8003e9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <TIM_OC2_SetConfig+0xe8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0x94>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <TIM_OC2_SetConfig+0xec>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d113      	bne.n	8003ed4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	feff8fff 	.word	0xfeff8fff
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40010400 	.word	0x40010400

08003f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <TIM_OC3_SetConfig+0xe0>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a22      	ldr	r2, [pc, #136]	; (8003fec <TIM_OC3_SetConfig+0xe4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_OC3_SetConfig+0x66>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <TIM_OC3_SetConfig+0xe8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10d      	bne.n	8003f8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a17      	ldr	r2, [pc, #92]	; (8003fec <TIM_OC3_SetConfig+0xe4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_OC3_SetConfig+0x92>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <TIM_OC3_SetConfig+0xe8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d113      	bne.n	8003fc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	fffeff8f 	.word	0xfffeff8f
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <TIM_OC4_SetConfig+0xa4>)
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800403e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	031b      	lsls	r3, r3, #12
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <TIM_OC4_SetConfig+0xa8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_OC4_SetConfig+0x68>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <TIM_OC4_SetConfig+0xac>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d109      	bne.n	8004070 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	feff8fff 	.word	0xfeff8fff
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <TIM_OC5_SetConfig+0x98>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <TIM_OC5_SetConfig+0x9c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_OC5_SetConfig+0x5e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <TIM_OC5_SetConfig+0xa0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d109      	bne.n	8004116 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004108:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	621a      	str	r2, [r3, #32]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	fffeff8f 	.word	0xfffeff8f
 8004140:	40010000 	.word	0x40010000
 8004144:	40010400 	.word	0x40010400

08004148 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <TIM_OC6_SetConfig+0x9c>)
 8004174:	4013      	ands	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800418a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	051b      	lsls	r3, r3, #20
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <TIM_OC6_SetConfig+0xa0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC6_SetConfig+0x60>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <TIM_OC6_SetConfig+0xa4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d109      	bne.n	80041bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	029b      	lsls	r3, r3, #10
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	feff8fff 	.word	0xfeff8fff
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40010400 	.word	0x40010400

080041f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	2201      	movs	r2, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004250:	2302      	movs	r3, #2
 8004252:	e06d      	b.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a30      	ldr	r2, [pc, #192]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d108      	bne.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800428e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d022      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c6:	d01d      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d018      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a15      	ldr	r2, [pc, #84]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a16      	ldr	r2, [pc, #88]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10c      	bne.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40010000 	.word	0x40010000
 8004340:	40010400 	.word	0x40010400
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000
 8004354:	40001800 	.word	0x40001800

08004358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e040      	b.n	8004428 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd f8f4 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 faa4 	bl	8004920 <UART_SetConfig>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e022      	b.n	8004428 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fd42 	bl	8004e74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	6852      	ldr	r2, [r2, #4]
 80043fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	6892      	ldr	r2, [r2, #8]
 800440a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800440e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fdc9 	bl	8004fb8 <UART_CheckIdleState>
 8004426:	4603      	mov	r3, r0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004444:	2b20      	cmp	r3, #32
 8004446:	d17e      	bne.n	8004546 <HAL_UART_Transmit+0x116>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Transmit+0x24>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e077      	b.n	8004548 <HAL_UART_Transmit+0x118>
    }

    __HAL_LOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Transmit+0x36>
 8004462:	2302      	movs	r3, #2
 8004464:	e070      	b.n	8004548 <HAL_UART_Transmit+0x118>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2221      	movs	r2, #33	; 0x21
 8004478:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800447a:	f7fd f98f 	bl	800179c <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d108      	bne.n	80044ac <HAL_UART_Transmit+0x7c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d104      	bne.n	80044ac <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e003      	b.n	80044b4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80044bc:	e02b      	b.n	8004516 <HAL_UART_Transmit+0xe6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fda4 	bl	8005016 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e037      	b.n	8004548 <HAL_UART_Transmit+0x118>
      }
      if (pdata8bits == NULL)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_UART_Transmit+0xc4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	8812      	ldrh	r2, [r2, #0]
 80044e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	3302      	adds	r3, #2
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e007      	b.n	8004504 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3301      	adds	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1cd      	bne.n	80044be <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2200      	movs	r2, #0
 800452a:	2140      	movs	r1, #64	; 0x40
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fd72 	bl	8005016 <UART_WaitOnFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e005      	b.n	8004548 <HAL_UART_Transmit+0x118>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_UART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	2b20      	cmp	r3, #32
 8004564:	f040 808a 	bne.w	800467c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Receive_IT+0x24>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e082      	b.n	800467e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_UART_Receive_IT+0x36>
 8004582:	2302      	movs	r3, #2
 8004584:	e07b      	b.n	800467e <HAL_UART_Receive_IT+0x12e>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b2:	d10e      	bne.n	80045d2 <HAL_UART_Receive_IT+0x82>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_UART_Receive_IT+0x78>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c6:	e02d      	b.n	8004624 <HAL_UART_Receive_IT+0xd4>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045d0:	e028      	b.n	8004624 <HAL_UART_Receive_IT+0xd4>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10d      	bne.n	80045f6 <HAL_UART_Receive_IT+0xa6>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <HAL_UART_Receive_IT+0x9c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	22ff      	movs	r2, #255	; 0xff
 80045e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ea:	e01b      	b.n	8004624 <HAL_UART_Receive_IT+0xd4>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	227f      	movs	r2, #127	; 0x7f
 80045f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045f4:	e016      	b.n	8004624 <HAL_UART_Receive_IT+0xd4>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045fe:	d10d      	bne.n	800461c <HAL_UART_Receive_IT+0xcc>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_UART_Receive_IT+0xc2>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	227f      	movs	r2, #127	; 0x7f
 800460c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004610:	e008      	b.n	8004624 <HAL_UART_Receive_IT+0xd4>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	223f      	movs	r2, #63	; 0x3f
 8004616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800461a:	e003      	b.n	8004624 <HAL_UART_Receive_IT+0xd4>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2222      	movs	r2, #34	; 0x22
 800462e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d107      	bne.n	800465a <HAL_UART_Receive_IT+0x10a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <HAL_UART_Receive_IT+0x13c>)
 8004656:	661a      	str	r2, [r3, #96]	; 0x60
 8004658:	e002      	b.n	8004660 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <HAL_UART_Receive_IT+0x140>)
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004676:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	08005251 	.word	0x08005251
 8004690:	080051ab 	.word	0x080051ab

08004694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d113      	bne.n	80046ec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00e      	beq.n	80046ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8100 	beq.w	80048e2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
      }
      return;
 80046ea:	e0fa      	b.n	80048e2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80d5 	beq.w	800489e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80ca 	beq.w	800489e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <HAL_UART_IRQHandler+0x9e>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2201      	movs	r2, #1
 8004724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <HAL_UART_IRQHandler+0xc6>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2202      	movs	r2, #2
 800474c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004752:	f043 0204 	orr.w	r2, r3, #4
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00e      	beq.n	8004782 <HAL_UART_IRQHandler+0xee>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2204      	movs	r2, #4
 8004774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477a:	f043 0202 	orr.w	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2208      	movs	r2, #8
 80047a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ac:	f043 0208 	orr.w	r2, r3, #8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00f      	beq.n	80047de <HAL_UART_IRQHandler+0x14a>
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d07f      	beq.n	80048e6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d004      	beq.n	8004828 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004824:	2b00      	cmp	r3, #0
 8004826:	d031      	beq.n	800488c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fc6f 	bl	800510c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d123      	bne.n	8004884 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <HAL_UART_IRQHandler+0x260>)
 800485a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004860:	4618      	mov	r0, r3
 8004862:	f7fd fc20 	bl	80020a6 <HAL_DMA_Abort_IT>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004876:	4610      	mov	r0, r2
 8004878:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487a:	e00e      	b.n	800489a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f845 	bl	800490c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004882:	e00a      	b.n	800489a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f841 	bl	800490c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488a:	e006      	b.n	800489a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f83d 	bl	800490c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004898:	e025      	b.n	80048e6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489a:	bf00      	nop
    return;
 800489c:	e023      	b.n	80048e6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
    }
    return;
 80048c2:	e012      	b.n	80048ea <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00e      	beq.n	80048ec <HAL_UART_IRQHandler+0x258>
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fc4d 	bl	8005178 <UART_EndTransmit_IT>
    return;
 80048de:	bf00      	nop
 80048e0:	e004      	b.n	80048ec <HAL_UART_IRQHandler+0x258>
      return;
 80048e2:	bf00      	nop
 80048e4:	e002      	b.n	80048ec <HAL_UART_IRQHandler+0x258>
    return;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <HAL_UART_IRQHandler+0x258>
    return;
 80048ea:	bf00      	nop
  }

}
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	0800514d 	.word	0x0800514d

080048f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	4bb3      	ldr	r3, [pc, #716]	; (8004c20 <UART_SetConfig+0x300>)
 8004954:	400b      	ands	r3, r1
 8004956:	6939      	ldr	r1, [r7, #16]
 8004958:	430b      	orrs	r3, r1
 800495a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	6852      	ldr	r2, [r2, #4]
 8004966:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	430a      	orrs	r2, r1
 8004994:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4aa2      	ldr	r2, [pc, #648]	; (8004c24 <UART_SetConfig+0x304>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d121      	bne.n	80049e4 <UART_SetConfig+0xc4>
 80049a0:	4ba1      	ldr	r3, [pc, #644]	; (8004c28 <UART_SetConfig+0x308>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d816      	bhi.n	80049dc <UART_SetConfig+0xbc>
 80049ae:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0x94>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049d1 	.word	0x080049d1
 80049bc:	080049cb 	.word	0x080049cb
 80049c0:	080049d7 	.word	0x080049d7
 80049c4:	2301      	movs	r3, #1
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e150      	b.n	8004c6c <UART_SetConfig+0x34c>
 80049ca:	2302      	movs	r3, #2
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e14d      	b.n	8004c6c <UART_SetConfig+0x34c>
 80049d0:	2304      	movs	r3, #4
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e14a      	b.n	8004c6c <UART_SetConfig+0x34c>
 80049d6:	2308      	movs	r3, #8
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e147      	b.n	8004c6c <UART_SetConfig+0x34c>
 80049dc:	2310      	movs	r3, #16
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	bf00      	nop
 80049e2:	e143      	b.n	8004c6c <UART_SetConfig+0x34c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a90      	ldr	r2, [pc, #576]	; (8004c2c <UART_SetConfig+0x30c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d134      	bne.n	8004a58 <UART_SetConfig+0x138>
 80049ee:	4b8e      	ldr	r3, [pc, #568]	; (8004c28 <UART_SetConfig+0x308>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d829      	bhi.n	8004a50 <UART_SetConfig+0x130>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0xe4>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a51 	.word	0x08004a51
 8004a0c:	08004a51 	.word	0x08004a51
 8004a10:	08004a51 	.word	0x08004a51
 8004a14:	08004a45 	.word	0x08004a45
 8004a18:	08004a51 	.word	0x08004a51
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a51 	.word	0x08004a51
 8004a24:	08004a3f 	.word	0x08004a3f
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a51 	.word	0x08004a51
 8004a34:	08004a4b 	.word	0x08004a4b
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e116      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e113      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a44:	2304      	movs	r3, #4
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e110      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e10d      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a50:	2310      	movs	r3, #16
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	bf00      	nop
 8004a56:	e109      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a74      	ldr	r2, [pc, #464]	; (8004c30 <UART_SetConfig+0x310>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d120      	bne.n	8004aa4 <UART_SetConfig+0x184>
 8004a62:	4b71      	ldr	r3, [pc, #452]	; (8004c28 <UART_SetConfig+0x308>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d00f      	beq.n	8004a90 <UART_SetConfig+0x170>
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d802      	bhi.n	8004a7a <UART_SetConfig+0x15a>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <UART_SetConfig+0x164>
 8004a78:	e010      	b.n	8004a9c <UART_SetConfig+0x17c>
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d005      	beq.n	8004a8a <UART_SetConfig+0x16a>
 8004a7e:	2b30      	cmp	r3, #48	; 0x30
 8004a80:	d009      	beq.n	8004a96 <UART_SetConfig+0x176>
 8004a82:	e00b      	b.n	8004a9c <UART_SetConfig+0x17c>
 8004a84:	2300      	movs	r3, #0
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e0f0      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e0ed      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a90:	2304      	movs	r3, #4
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e0ea      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a96:	2308      	movs	r3, #8
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e0e7      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	bf00      	nop
 8004aa2:	e0e3      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a62      	ldr	r2, [pc, #392]	; (8004c34 <UART_SetConfig+0x314>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d120      	bne.n	8004af0 <UART_SetConfig+0x1d0>
 8004aae:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <UART_SetConfig+0x308>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d00f      	beq.n	8004adc <UART_SetConfig+0x1bc>
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d802      	bhi.n	8004ac6 <UART_SetConfig+0x1a6>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <UART_SetConfig+0x1b0>
 8004ac4:	e010      	b.n	8004ae8 <UART_SetConfig+0x1c8>
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d005      	beq.n	8004ad6 <UART_SetConfig+0x1b6>
 8004aca:	2bc0      	cmp	r3, #192	; 0xc0
 8004acc:	d009      	beq.n	8004ae2 <UART_SetConfig+0x1c2>
 8004ace:	e00b      	b.n	8004ae8 <UART_SetConfig+0x1c8>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e0ca      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e0c7      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004adc:	2304      	movs	r3, #4
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e0c4      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e0c1      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	bf00      	nop
 8004aee:	e0bd      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a50      	ldr	r2, [pc, #320]	; (8004c38 <UART_SetConfig+0x318>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d124      	bne.n	8004b44 <UART_SetConfig+0x224>
 8004afa:	4b4b      	ldr	r3, [pc, #300]	; (8004c28 <UART_SetConfig+0x308>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b08:	d012      	beq.n	8004b30 <UART_SetConfig+0x210>
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0e:	d802      	bhi.n	8004b16 <UART_SetConfig+0x1f6>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <UART_SetConfig+0x204>
 8004b14:	e012      	b.n	8004b3c <UART_SetConfig+0x21c>
 8004b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1a:	d006      	beq.n	8004b2a <UART_SetConfig+0x20a>
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d009      	beq.n	8004b36 <UART_SetConfig+0x216>
 8004b22:	e00b      	b.n	8004b3c <UART_SetConfig+0x21c>
 8004b24:	2300      	movs	r3, #0
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e0a0      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e09d      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b30:	2304      	movs	r3, #4
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e09a      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b36:	2308      	movs	r3, #8
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e097      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	bf00      	nop
 8004b42:	e093      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a3c      	ldr	r2, [pc, #240]	; (8004c3c <UART_SetConfig+0x31c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d124      	bne.n	8004b98 <UART_SetConfig+0x278>
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <UART_SetConfig+0x308>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5c:	d012      	beq.n	8004b84 <UART_SetConfig+0x264>
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b62:	d802      	bhi.n	8004b6a <UART_SetConfig+0x24a>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <UART_SetConfig+0x258>
 8004b68:	e012      	b.n	8004b90 <UART_SetConfig+0x270>
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6e:	d006      	beq.n	8004b7e <UART_SetConfig+0x25e>
 8004b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b74:	d009      	beq.n	8004b8a <UART_SetConfig+0x26a>
 8004b76:	e00b      	b.n	8004b90 <UART_SetConfig+0x270>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e076      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e073      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b84:	2304      	movs	r3, #4
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e070      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e06d      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b90:	2310      	movs	r3, #16
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	bf00      	nop
 8004b96:	e069      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a28      	ldr	r2, [pc, #160]	; (8004c40 <UART_SetConfig+0x320>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d124      	bne.n	8004bec <UART_SetConfig+0x2cc>
 8004ba2:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <UART_SetConfig+0x308>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb0:	d012      	beq.n	8004bd8 <UART_SetConfig+0x2b8>
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	d802      	bhi.n	8004bbe <UART_SetConfig+0x29e>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <UART_SetConfig+0x2ac>
 8004bbc:	e012      	b.n	8004be4 <UART_SetConfig+0x2c4>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d006      	beq.n	8004bd2 <UART_SetConfig+0x2b2>
 8004bc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc8:	d009      	beq.n	8004bde <UART_SetConfig+0x2be>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x2c4>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e04c      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e049      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e046      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e043      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	bf00      	nop
 8004bea:	e03f      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a14      	ldr	r2, [pc, #80]	; (8004c44 <UART_SetConfig+0x324>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d138      	bne.n	8004c68 <UART_SetConfig+0x348>
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <UART_SetConfig+0x308>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c04:	d026      	beq.n	8004c54 <UART_SetConfig+0x334>
 8004c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0a:	d802      	bhi.n	8004c12 <UART_SetConfig+0x2f2>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01b      	beq.n	8004c48 <UART_SetConfig+0x328>
 8004c10:	e026      	b.n	8004c60 <UART_SetConfig+0x340>
 8004c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c16:	d01a      	beq.n	8004c4e <UART_SetConfig+0x32e>
 8004c18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c1c:	d01d      	beq.n	8004c5a <UART_SetConfig+0x33a>
 8004c1e:	e01f      	b.n	8004c60 <UART_SetConfig+0x340>
 8004c20:	efff69f3 	.word	0xefff69f3
 8004c24:	40011000 	.word	0x40011000
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40004400 	.word	0x40004400
 8004c30:	40004800 	.word	0x40004800
 8004c34:	40004c00 	.word	0x40004c00
 8004c38:	40005000 	.word	0x40005000
 8004c3c:	40011400 	.word	0x40011400
 8004c40:	40007800 	.word	0x40007800
 8004c44:	40007c00 	.word	0x40007c00
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e00e      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e00b      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004c54:	2304      	movs	r3, #4
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e008      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e005      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004c60:	2310      	movs	r3, #16
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	bf00      	nop
 8004c66:	e001      	b.n	8004c6c <UART_SetConfig+0x34c>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	f040 8080 	bne.w	8004d78 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d85c      	bhi.n	8004d38 <UART_SetConfig+0x418>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x364>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cc9 	.word	0x08004cc9
 8004c8c:	08004ce9 	.word	0x08004ce9
 8004c90:	08004d39 	.word	0x08004d39
 8004c94:	08004d01 	.word	0x08004d01
 8004c98:	08004d39 	.word	0x08004d39
 8004c9c:	08004d39 	.word	0x08004d39
 8004ca0:	08004d39 	.word	0x08004d39
 8004ca4:	08004d21 	.word	0x08004d21
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe f84e 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8004cac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	005a      	lsls	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	61bb      	str	r3, [r7, #24]
        break;
 8004cc6:	e03a      	b.n	8004d3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7fe f852 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8004ccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	005a      	lsls	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	61bb      	str	r3, [r7, #24]
        break;
 8004ce6:	e02a      	b.n	8004d3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	085a      	lsrs	r2, r3, #1
 8004cee:	4b5f      	ldr	r3, [pc, #380]	; (8004e6c <UART_SetConfig+0x54c>)
 8004cf0:	4413      	add	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6852      	ldr	r2, [r2, #4]
 8004cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	61bb      	str	r3, [r7, #24]
        break;
 8004cfe:	e01e      	b.n	8004d3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d00:	f7fd ff60 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8004d04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	005a      	lsls	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	61bb      	str	r3, [r7, #24]
        break;
 8004d1e:	e00e      	b.n	8004d3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	61bb      	str	r3, [r7, #24]
        break;
 8004d36:	e002      	b.n	8004d3e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
        break;
 8004d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b0f      	cmp	r3, #15
 8004d42:	d916      	bls.n	8004d72 <UART_SetConfig+0x452>
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d212      	bcs.n	8004d72 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f023 030f 	bic.w	r3, r3, #15
 8004d54:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	897b      	ldrh	r3, [r7, #10]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	897a      	ldrh	r2, [r7, #10]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	e070      	b.n	8004e54 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
 8004d76:	e06d      	b.n	8004e54 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d859      	bhi.n	8004e32 <UART_SetConfig+0x512>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x464>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004de5 	.word	0x08004de5
 8004d90:	08004e33 	.word	0x08004e33
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004e33 	.word	0x08004e33
 8004d9c:	08004e33 	.word	0x08004e33
 8004da0:	08004e33 	.word	0x08004e33
 8004da4:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fd ffce 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8004dac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	085a      	lsrs	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	441a      	add	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	61bb      	str	r3, [r7, #24]
        break;
 8004dc4:	e038      	b.n	8004e38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc6:	f7fd ffd3 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8004dca:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	085a      	lsrs	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	61bb      	str	r3, [r7, #24]
        break;
 8004de2:	e029      	b.n	8004e38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	085a      	lsrs	r2, r3, #1
 8004dea:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <UART_SetConfig+0x550>)
 8004dec:	4413      	add	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6852      	ldr	r2, [r2, #4]
 8004df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	61bb      	str	r3, [r7, #24]
        break;
 8004dfa:	e01d      	b.n	8004e38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfc:	f7fd fee2 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8004e00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	085a      	lsrs	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	61bb      	str	r3, [r7, #24]
        break;
 8004e18:	e00e      	b.n	8004e38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	61bb      	str	r3, [r7, #24]
        break;
 8004e30:	e002      	b.n	8004e38 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
        break;
 8004e36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b0f      	cmp	r3, #15
 8004e3c:	d908      	bls.n	8004e50 <UART_SetConfig+0x530>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d204      	bcs.n	8004e50 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	60da      	str	r2, [r3, #12]
 8004e4e:	e001      	b.n	8004e54 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	01e84800 	.word	0x01e84800
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	6852      	ldr	r2, [r2, #4]
 8004e92:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	6852      	ldr	r2, [r2, #4]
 8004eb4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	6852      	ldr	r2, [r2, #4]
 8004ed6:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	6852      	ldr	r2, [r2, #4]
 8004ef8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	6892      	ldr	r2, [r2, #8]
 8004f1a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	6892      	ldr	r2, [r2, #8]
 8004f3c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01a      	beq.n	8004f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	6852      	ldr	r2, [r2, #4]
 8004f5e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d10a      	bne.n	8004f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	6852      	ldr	r2, [r2, #4]
 8004f7e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	6852      	ldr	r2, [r2, #4]
 8004fa0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fc6:	f7fc fbe9 	bl	800179c <HAL_GetTick>
 8004fca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d10e      	bne.n	8004ff8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f814 	bl	8005016 <UART_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e00a      	b.n	800500e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005026:	e05d      	b.n	80050e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d059      	beq.n	80050e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005030:	f7fc fbb4 	bl	800179c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	d802      	bhi.n	8005046 <UART_WaitOnFlagUntilTimeout+0x30>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d11b      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005054:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	6892      	ldr	r2, [r2, #8]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e042      	b.n	8005104 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d02b      	beq.n	80050e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509a:	d123      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	6892      	ldr	r2, [r2, #8]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e00f      	b.n	8005104 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69da      	ldr	r2, [r3, #28]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	401a      	ands	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d092      	beq.n	8005028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005122:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	6892      	ldr	r2, [r2, #8]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fbce 	bl	800490c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fbab 	bl	80048f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051b8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051be:	2b22      	cmp	r3, #34	; 0x22
 80051c0:	d13a      	bne.n	8005238 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	89ba      	ldrh	r2, [r7, #12]
 80051d0:	b2d1      	uxtb	r1, r2
 80051d2:	89fa      	ldrh	r2, [r7, #14]
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	400a      	ands	r2, r1
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d121      	bne.n	8005248 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005212:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	6892      	ldr	r2, [r2, #8]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fb fc93 	bl	8000b5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005236:	e007      	b.n	8005248 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	6992      	ldr	r2, [r2, #24]
 8005242:	f042 0208 	orr.w	r2, r2, #8
 8005246:	619a      	str	r2, [r3, #24]
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800525e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005264:	2b22      	cmp	r3, #34	; 0x22
 8005266:	d13a      	bne.n	80052de <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005274:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005276:	89ba      	ldrh	r2, [r7, #12]
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	4013      	ands	r3, r2
 800527c:	b29a      	uxth	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d121      	bne.n	80052ee <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052b8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	6892      	ldr	r2, [r2, #8]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fb fc40 	bl	8000b5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052dc:	e007      	b.n	80052ee <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	6992      	ldr	r2, [r2, #24]
 80052e8:	f042 0208 	orr.w	r2, r2, #8
 80052ec:	619a      	str	r2, [r3, #24]
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052fe:	e003      	b.n	8005308 <LoopCopyDataInit>

08005300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005300:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005306:	3104      	adds	r1, #4

08005308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005308:	480b      	ldr	r0, [pc, #44]	; (8005338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800530c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800530e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005310:	d3f6      	bcc.n	8005300 <CopyDataInit>
  ldr  r2, =_sbss
 8005312:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005314:	e002      	b.n	800531c <LoopFillZerobss>

08005316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005318:	f842 3b04 	str.w	r3, [r2], #4

0800531c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800531e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005320:	d3f9      	bcc.n	8005316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005322:	f7fc f9d3 	bl	80016cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005326:	f000 f811 	bl	800534c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800532a:	f7fb fc6f 	bl	8000c0c <main>
  bx  lr    
 800532e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005330:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005334:	08005490 	.word	0x08005490
  ldr  r0, =_sdata
 8005338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800533c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8005340:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8005344:	200002a4 	.word	0x200002a4

08005348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005348:	e7fe      	b.n	8005348 <ADC_IRQHandler>
	...

0800534c <__libc_init_array>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4e0d      	ldr	r6, [pc, #52]	; (8005384 <__libc_init_array+0x38>)
 8005350:	4c0d      	ldr	r4, [pc, #52]	; (8005388 <__libc_init_array+0x3c>)
 8005352:	1ba4      	subs	r4, r4, r6
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	2500      	movs	r5, #0
 8005358:	42a5      	cmp	r5, r4
 800535a:	d109      	bne.n	8005370 <__libc_init_array+0x24>
 800535c:	4e0b      	ldr	r6, [pc, #44]	; (800538c <__libc_init_array+0x40>)
 800535e:	4c0c      	ldr	r4, [pc, #48]	; (8005390 <__libc_init_array+0x44>)
 8005360:	f000 f828 	bl	80053b4 <_init>
 8005364:	1ba4      	subs	r4, r4, r6
 8005366:	10a4      	asrs	r4, r4, #2
 8005368:	2500      	movs	r5, #0
 800536a:	42a5      	cmp	r5, r4
 800536c:	d105      	bne.n	800537a <__libc_init_array+0x2e>
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005374:	4798      	blx	r3
 8005376:	3501      	adds	r5, #1
 8005378:	e7ee      	b.n	8005358 <__libc_init_array+0xc>
 800537a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800537e:	4798      	blx	r3
 8005380:	3501      	adds	r5, #1
 8005382:	e7f2      	b.n	800536a <__libc_init_array+0x1e>
 8005384:	08005488 	.word	0x08005488
 8005388:	08005488 	.word	0x08005488
 800538c:	08005488 	.word	0x08005488
 8005390:	0800548c 	.word	0x0800548c

08005394 <memset>:
 8005394:	4402      	add	r2, r0
 8005396:	4603      	mov	r3, r0
 8005398:	4293      	cmp	r3, r2
 800539a:	d100      	bne.n	800539e <memset+0xa>
 800539c:	4770      	bx	lr
 800539e:	f803 1b01 	strb.w	r1, [r3], #1
 80053a2:	e7f9      	b.n	8005398 <memset+0x4>

080053a4 <strcpy>:
 80053a4:	4603      	mov	r3, r0
 80053a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053aa:	f803 2b01 	strb.w	r2, [r3], #1
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d1f9      	bne.n	80053a6 <strcpy+0x2>
 80053b2:	4770      	bx	lr

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr


adc_kisfeladat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  2000000c  080033ec  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000148  080033ec  00020148  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a229  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016a1  00000000  00000000  0002a265  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ab0  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e8  00000000  00000000  0002c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000046e7  00000000  00000000  0002cda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000035ae  00000000  00000000  00031487  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034a35  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c50  00000000  00000000  00034ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003380 	.word	0x08003380

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003380 	.word	0x08003380

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <LCD_clock>:
 */

#include "main.h"
#include "lcd.h"

void LCD_clock(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

	HAL_Delay(6);
 800051c:	2006      	movs	r0, #6
 800051e:	f000 fde9 	bl	80010f4 <HAL_Delay>
	// lcd e 1
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <LCD_clock+0x34>)
 800052a:	f001 fc15 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800052e:	2005      	movs	r0, #5
 8000530:	f000 fde0 	bl	80010f4 <HAL_Delay>
	//lcd e 0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <LCD_clock+0x34>)
 800053c:	f001 fc0c 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fdd7 	bl	80010f4 <HAL_Delay>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <LCD_write>:

void LCD_write(uint8_t data){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

	//felso 4 bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>7)&0x01));
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	09db      	lsrs	r3, r3, #7
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000566:	482e      	ldr	r0, [pc, #184]	; (8000620 <LCD_write+0xd0>)
 8000568:	f001 fbf6 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>6)&0x01));
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	099b      	lsrs	r3, r3, #6
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057e:	4829      	ldr	r0, [pc, #164]	; (8000624 <LCD_write+0xd4>)
 8000580:	f001 fbea 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>5)&0x01));
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	095b      	lsrs	r3, r3, #5
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	4823      	ldr	r0, [pc, #140]	; (8000624 <LCD_write+0xd4>)
 8000598:	f001 fbde 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data>>4)&0x01));
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	481d      	ldr	r0, [pc, #116]	; (8000624 <LCD_write+0xd4>)
 80005b0:	f001 fbd2 	bl	8001d58 <HAL_GPIO_WritePin>

	LCD_clock();
 80005b4:	f7ff ffb0 	bl	8000518 <LCD_clock>

	//also 4
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>3)&0x01));
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <LCD_write+0xd0>)
 80005cc:	f001 fbc4 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>2)&0x01));
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	089b      	lsrs	r3, r3, #2
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	4810      	ldr	r0, [pc, #64]	; (8000624 <LCD_write+0xd4>)
 80005e4:	f001 fbb8 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>1)&0x01));
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	085b      	lsrs	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <LCD_write+0xd4>)
 80005fc:	f001 fbac 	bl	8001d58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data)&0x01));
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <LCD_write+0xd4>)
 8000610:	f001 fba2 	bl	8001d58 <HAL_GPIO_WritePin>

	LCD_clock();
 8000614:	f7ff ff80 	bl	8000518 <LCD_clock>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400
 8000624:	40021000 	.word	0x40021000

08000628 <LCD_data>:

void LCD_data(uint8_t adat){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <LCD_data+0x24>)
 8000638:	f001 fb8e 	bl	8001d58 <HAL_GPIO_WritePin>
	LCD_write(adat);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff86 	bl	8000550 <LCD_write>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000

08000650 <LCD_cmd>:

void LCD_cmd(uint8_t cmd){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <LCD_cmd+0x24>)
 8000660:	f001 fb7a 	bl	8001d58 <HAL_GPIO_WritePin>
	LCD_write(cmd);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff72 	bl	8000550 <LCD_write>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <LCD_init>:

void LCD_init(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	LCD_cmd(0x20);
 800067c:	2020      	movs	r0, #32
 800067e:	f7ff ffe7 	bl	8000650 <LCD_cmd>
	LCD_clock();
 8000682:	f7ff ff49 	bl	8000518 <LCD_clock>
	LCD_clock();
 8000686:	f7ff ff47 	bl	8000518 <LCD_clock>
	LCD_clock();
 800068a:	f7ff ff45 	bl	8000518 <LCD_clock>
	// mod - 4 bit 2 sor, 5x8pont matrix
	// 3x - nem tudjuk milyen modban volt
	LCD_cmd(0x28);
 800068e:	2028      	movs	r0, #40	; 0x28
 8000690:	f7ff ffde 	bl	8000650 <LCD_cmd>
	LCD_cmd(0x28);
 8000694:	2028      	movs	r0, #40	; 0x28
 8000696:	f7ff ffdb 	bl	8000650 <LCD_cmd>
	LCD_cmd(0x28);
 800069a:	2028      	movs	r0, #40	; 0x28
 800069c:	f7ff ffd8 	bl	8000650 <LCD_cmd>

	//alaphelyzet
	LCD_cmd(0x02);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f7ff ffd5 	bl	8000650 <LCD_cmd>
	// lcd torles
	LCD_cmd(0x01);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ffd2 	bl	8000650 <LCD_cmd>
	//kurzor beallitasa
	LCD_cmd(0x08 | (1<<2) | (0<<1) | (0<<0));
 80006ac:	200c      	movs	r0, #12
 80006ae:	f7ff ffcf 	bl	8000650 <LCD_cmd>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <LCD_string>:

void LCD_string(char *p){
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]

	while(*p){
 80006be:	e006      	b.n	80006ce <LCD_string+0x18>

		LCD_data(*p++);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffad 	bl	8000628 <LCD_data>
	while(*p){
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <LCD_string+0xa>
	}
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <LCD_xy>:

void LCD_xy(uint8_t x, uint8_t y){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

		switch (y)
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d820      	bhi.n	800073a <LCD_xy+0x5a>
 80006f8:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <LCD_xy+0x20>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	08000711 	.word	0x08000711
 8000704:	08000719 	.word	0x08000719
 8000708:	08000721 	.word	0x08000721
 800070c:	08000729 	.word	0x08000729
		{
			case 1:    // 1. sor
			position = LCD_START_DDADR + LCD_ADR_LINE1 + x;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3b80      	subs	r3, #128	; 0x80
 8000714:	73fb      	strb	r3, [r7, #15]
			break;
 8000716:	e00b      	b.n	8000730 <LCD_xy+0x50>

			case 2:    // 2. sor
			position = LCD_START_DDADR + LCD_ADR_LINE2 + x;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	3b40      	subs	r3, #64	; 0x40
 800071c:	73fb      	strb	r3, [r7, #15]
			break;
 800071e:	e007      	b.n	8000730 <LCD_xy+0x50>

			case 3:    // 3. sor
			position = LCD_START_DDADR + LCD_ADR_LINE3 + x;
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3b70      	subs	r3, #112	; 0x70
 8000724:	73fb      	strb	r3, [r7, #15]
			break;
 8000726:	e003      	b.n	8000730 <LCD_xy+0x50>

			case 4:    // 4. sor
			position = LCD_START_DDADR + LCD_ADR_LINE4 + x;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3b30      	subs	r3, #48	; 0x30
 800072c:	73fb      	strb	r3, [r7, #15]
			break;
 800072e:	bf00      	nop

			default:
			return;
		}
		LCD_cmd(position); // beallitas
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff8c 	bl	8000650 <LCD_cmd>
 8000738:	e000      	b.n	800073c <LCD_xy+0x5c>
			return;
 800073a:	bf00      	nop

}
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop

08000744 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM12_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if(cnt==2000){
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000754:	d114      	bne.n	8000780 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start(&hadc2); //adc conv start
 8000756:	4810      	ldr	r0, [pc, #64]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000758:	f000 fd32 	bl	80011c0 <HAL_ADC_Start>
		//HAL_Delay(50);
		adc_data_reg = HAL_ADC_GetValue(&hadc2);
 800075c:	480e      	ldr	r0, [pc, #56]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800075e:	f000 fdef 	bl	8001340 <HAL_ADC_GetValue>
 8000762:	4602      	mov	r2, r0
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000766:	601a      	str	r2, [r3, #0]
		v_adc_ch3 = (3300*adc_data_reg)/4096;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000770:	fb02 f303 	mul.w	r3, r2, r3
 8000774:	0b1b      	lsrs	r3, r3, #12
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000778:	6013      	str	r3, [r2, #0]

		cnt=0;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]
	}
	cnt++;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800078a:	801a      	strh	r2, [r3, #0]

}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000002c 	.word	0x2000002c
 8000798:	20000074 	.word	0x20000074
 800079c:	20000030 	.word	0x20000030
 80007a0:	20000028 	.word	0x20000028

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fc46 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f872 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 fa10 	bl	8000bd4 <MX_GPIO_Init>
  MX_TIM4_Init();
 80007b4:	f000 f970 	bl	8000a98 <MX_TIM4_Init>
  MX_TIM12_Init();
 80007b8:	f000 f9c8 	bl	8000b4c <MX_TIM12_Init>
  MX_ADC1_Init();
 80007bc:	f000 f8c6 	bl	800094c <MX_ADC1_Init>
  MX_ADC2_Init();
 80007c0:	f000 f918 	bl	80009f4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80007c4:	482c      	ldr	r0, [pc, #176]	; (8000878 <main+0xd4>)
 80007c6:	f001 ff27 	bl	8002618 <HAL_TIM_Base_Start_IT>
  LCD_init();
 80007ca:	f7ff ff55 	bl	8000678 <LCD_init>
  LCD_cmd(0x80);
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	f7ff ff3e 	bl	8000650 <LCD_cmd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_xy(0,1);
 80007d4:	2101      	movs	r1, #1
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff82 	bl	80006e0 <LCD_xy>
	  if(v_adc_ch3>=3000)
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <main+0xd8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d906      	bls.n	80007f6 <main+0x52>
	  	  	  {

	  	  		  LCD_xy(9,4); LCD_string("XXXXX");
 80007e8:	2104      	movs	r1, #4
 80007ea:	2009      	movs	r0, #9
 80007ec:	f7ff ff78 	bl	80006e0 <LCD_xy>
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <main+0xdc>)
 80007f2:	f7ff ff60 	bl	80006b6 <LCD_string>
	  	  	  }

	  if((v_adc_ch3>=2001) && (v_adc_ch3<=3000))
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <main+0xd8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007fe:	d90c      	bls.n	800081a <main+0x76>
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <main+0xd8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000808:	4293      	cmp	r3, r2
 800080a:	d806      	bhi.n	800081a <main+0x76>
	  	  {
		  LCD_xy(9,4); LCD_string("XXXX ");
 800080c:	2104      	movs	r1, #4
 800080e:	2009      	movs	r0, #9
 8000810:	f7ff ff66 	bl	80006e0 <LCD_xy>
 8000814:	481b      	ldr	r0, [pc, #108]	; (8000884 <main+0xe0>)
 8000816:	f7ff ff4e 	bl	80006b6 <LCD_string>
	  	  }

	  	  if((v_adc_ch3>=1001) && (v_adc_ch3<=2000))
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <main+0xd8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000822:	d90b      	bls.n	800083c <main+0x98>
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <main+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800082c:	d806      	bhi.n	800083c <main+0x98>
	  	  {
	  		LCD_xy(9,4); LCD_string("XXX  ");
 800082e:	2104      	movs	r1, #4
 8000830:	2009      	movs	r0, #9
 8000832:	f7ff ff55 	bl	80006e0 <LCD_xy>
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <main+0xe4>)
 8000838:	f7ff ff3d 	bl	80006b6 <LCD_string>
	  	  	}

	  	  	if((v_adc_ch3<=1000) && (v_adc_ch3>=501))
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <main+0xd8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000844:	d80b      	bhi.n	800085e <main+0xba>
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <main+0xd8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800084e:	d906      	bls.n	800085e <main+0xba>
	  	  	 {
	  	  		LCD_xy(9,4); LCD_string("XX    ");
 8000850:	2104      	movs	r1, #4
 8000852:	2009      	movs	r0, #9
 8000854:	f7ff ff44 	bl	80006e0 <LCD_xy>
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <main+0xe8>)
 800085a:	f7ff ff2c 	bl	80006b6 <LCD_string>
	  	 }

	  	  if(v_adc_ch3<500)
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <main+0xd8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000866:	d2b5      	bcs.n	80007d4 <main+0x30>
	  	  {

	  		  LCD_xy(9,4);; LCD_string("X     ");
 8000868:	2104      	movs	r1, #4
 800086a:	2009      	movs	r0, #9
 800086c:	f7ff ff38 	bl	80006e0 <LCD_xy>
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <main+0xec>)
 8000872:	f7ff ff20 	bl	80006b6 <LCD_string>
	  LCD_xy(0,1);
 8000876:	e7ad      	b.n	80007d4 <main+0x30>
 8000878:	20000034 	.word	0x20000034
 800087c:	20000028 	.word	0x20000028
 8000880:	08003398 	.word	0x08003398
 8000884:	080033a0 	.word	0x080033a0
 8000888:	080033a8 	.word	0x080033a8
 800088c:	080033b0 	.word	0x080033b0
 8000890:	080033b8 	.word	0x080033b8

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fd64 	bl	8003370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <SystemClock_Config+0xb0>)
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SystemClock_Config+0xb0>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemClock_Config+0xb0>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d0:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <SystemClock_Config+0xb4>)
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <SystemClock_Config+0xb4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <SystemClock_Config+0xb4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fa43 	bl	8001d8c <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800090c:	f000 fa26 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fcd2 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000936:	f000 fa11 	bl	8000d5c <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_ADC1_Init+0x98>)
 8000960:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <MX_ADC1_Init+0x9c>)
 8000962:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ADC1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_ADC1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_ADC1_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_ADC1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_ADC1_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_ADC1_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_ADC1_Init+0x98>)
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <MX_ADC1_Init+0xa0>)
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_ADC1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_ADC1_Init+0x98>)
 8000998:	2201      	movs	r2, #1
 800099a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_ADC1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_ADC1_Init+0x98>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <MX_ADC1_Init+0x98>)
 80009ac:	f000 fbc4 	bl	8001138 <HAL_ADC_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f9d1 	bl	8000d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_ADC1_Init+0xa4>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009be:	2301      	movs	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_ADC1_Init+0x98>)
 80009cc:	f000 fcc6 	bl	800135c <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009d6:	f000 f9c1 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000bc 	.word	0x200000bc
 80009e8:	40012000 	.word	0x40012000
 80009ec:	0f000001 	.word	0x0f000001
 80009f0:	10000012 	.word	0x10000012

080009f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <MX_ADC2_Init+0x9c>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a34:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <MX_ADC2_Init+0xa0>)
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a54:	f000 fb70 	bl	8001138 <HAL_ADC_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 f97d 	bl	8000d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a62:	2303      	movs	r3, #3
 8000a64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <MX_ADC2_Init+0x98>)
 8000a74:	f000 fc72 	bl	800135c <HAL_ADC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 f96d 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000074 	.word	0x20000074
 8000a90:	40012100 	.word	0x40012100
 8000a94:	0f000001 	.word	0x0f000001

08000a98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <MX_TIM4_Init+0xb0>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000ad0:	2264      	movs	r2, #100	; 0x64
 8000ad2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae0:	4818      	ldr	r0, [pc, #96]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000ae2:	f001 fdc3 	bl	800266c <HAL_TIM_PWM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000aec:	f000 f936 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000b00:	f002 fb3c 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b0a:	f000 f927 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8000b12:	2305      	movs	r3, #5
 8000b14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000b26:	f001 feeb 	bl	8002900 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000b30:	f000 f914 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MX_TIM4_Init+0xac>)
 8000b36:	f000 f9cf 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000034 	.word	0x20000034
 8000b48:	40000800 	.word	0x40000800

08000b4c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000b66:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <MX_TIM12_Init+0x84>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 15;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000b78:	2264      	movs	r2, #100	; 0x64
 8000b7a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000b8a:	f001 fd6f 	bl	800266c <HAL_TIM_PWM_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8000b94:	f000 f8e2 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b98:	2360      	movs	r3, #96	; 0x60
 8000b9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000bb0:	f001 fea6 	bl	8002900 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8000bba:	f000 f8cf 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000bbe:	4803      	ldr	r0, [pc, #12]	; (8000bcc <MX_TIM12_Init+0x80>)
 8000bc0:	f000 f98a 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000104 	.word	0x20000104
 8000bd0:	40001800 	.word	0x40001800

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000bec:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c04:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1a:	4a4b      	ldr	r2, [pc, #300]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0320 	and.w	r3, r3, #32
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	4a45      	ldr	r2, [pc, #276]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c34:	4b44      	ldr	r3, [pc, #272]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	4a3f      	ldr	r2, [pc, #252]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c4c:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <MX_GPIO_Init+0x174>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LCD_DATA_7_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f240 4101 	movw	r1, #1025	; 0x401
 8000c68:	4838      	ldr	r0, [pc, #224]	; (8000d4c <MX_GPIO_Init+0x178>)
 8000c6a:	f001 f875 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000c74:	4836      	ldr	r0, [pc, #216]	; (8000d50 <MX_GPIO_Init+0x17c>)
 8000c76:	f001 f86f 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f24f 4180 	movw	r1, #62592	; 0xf480
 8000c80:	4834      	ldr	r0, [pc, #208]	; (8000d54 <MX_GPIO_Init+0x180>)
 8000c82:	f001 f869 	bl	8001d58 <HAL_GPIO_WritePin>
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KB_PC6_OUT_row4_GPIO_Port, KB_PC6_OUT_row4_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4832      	ldr	r0, [pc, #200]	; (8000d58 <MX_GPIO_Init+0x184>)
 8000c8e:	f001 f863 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 LCD_DATA_7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_DATA_7_Pin;
 8000c92:	f240 4301 	movw	r3, #1025	; 0x401
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4828      	ldr	r0, [pc, #160]	; (8000d4c <MX_GPIO_Init+0x178>)
 8000cac:	f000 feaa 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC0_IN_LEFT_Pin */
  GPIO_InitStruct.Pin = KB_PC0_IN_LEFT_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KB_PC0_IN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4822      	ldr	r0, [pc, #136]	; (8000d50 <MX_GPIO_Init+0x17c>)
 8000cc6:	f000 fe9d 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC3_OUT_row1_Pin KB_PC5_OUT_row3_Pin */
  GPIO_InitStruct.Pin = KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin;
 8000cca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481b      	ldr	r0, [pc, #108]	; (8000d50 <MX_GPIO_Init+0x17c>)
 8000ce4:	f000 fe8e 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_DATA_4_Pin KB_PC4_OUT_row2_Pin
                           LCD_DATA_5_Pin LCD_DATA_6_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 8000ce8:	f24f 4380 	movw	r3, #62592	; 0xf480
 8000cec:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4814      	ldr	r0, [pc, #80]	; (8000d54 <MX_GPIO_Init+0x180>)
 8000d02:	f000 fe7f 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC1_IN_CENTER_Pin KB_PC2_IN_RIGHT_Pin */
  GPIO_InitStruct.Pin = KB_PC1_IN_CENTER_Pin|KB_PC2_IN_RIGHT_Pin;
 8000d06:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_GPIO_Init+0x180>)
 8000d1c:	f000 fe72 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC6_OUT_row4_Pin */
  GPIO_InitStruct.Pin = KB_PC6_OUT_row4_Pin;
 8000d20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KB_PC6_OUT_row4_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <MX_GPIO_Init+0x184>)
 8000d3a:	f000 fe63 	bl	8001a04 <HAL_GPIO_Init>

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40021400 	.word	0x40021400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40021800 	.word	0x40021800

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <Error_Handler+0x6>

08000d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_MspInit+0x44>)
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_MspInit+0x44>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_MspInit+0x44>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_MspInit+0x44>)
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_MspInit+0x44>)
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x44>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <HAL_ADC_MspInit+0x98>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10c      	bne.n	8000de8 <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dce:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000de6:	e028      	b.n	8000e3a <HAL_ADC_MspInit+0x8e>
  else if(hadc->Instance==ADC2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_ADC_MspInit+0xa0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d123      	bne.n	8000e3a <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_ADC_MspInit+0x9c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e22:	2308      	movs	r3, #8
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <HAL_ADC_MspInit+0xa4>)
 8000e36:	f000 fde5 	bl	8001a04 <HAL_GPIO_Init>
}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40012000 	.word	0x40012000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40012100 	.word	0x40012100
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_TIM_PWM_MspInit+0x78>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d114      	bne.n	8000e90 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e66:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	201e      	movs	r0, #30
 8000e84:	f000 fd87 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e88:	201e      	movs	r0, #30
 8000e8a:	f000 fda0 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000e8e:	e018      	b.n	8000ec2 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM12)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x80>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d113      	bne.n	8000ec2 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x7c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	202b      	movs	r0, #43	; 0x2b
 8000eb8:	f000 fd6d 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000ebc:	202b      	movs	r0, #43	; 0x2b
 8000ebe:	f000 fd86 	bl	80019ce <HAL_NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40000800 	.word	0x40000800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40001800 	.word	0x40001800

08000ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <HAL_TIM_MspPostInit+0xa8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d11c      	bne.n	8000f34 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f22:	2302      	movs	r3, #2
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4816      	ldr	r0, [pc, #88]	; (8000f88 <HAL_TIM_MspPostInit+0xb0>)
 8000f2e:	f000 fd69 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000f32:	e021      	b.n	8000f78 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_TIM_MspPostInit+0xb4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d11c      	bne.n	8000f78 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_TIM_MspPostInit+0xb0>)
 8000f74:	f000 fd46 	bl	8001a04 <HAL_GPIO_Init>
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40000800 	.word	0x40000800
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40001800 	.word	0x40001800

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f86a 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM4_IRQHandler+0x10>)
 8000fea:	f001 fb6a 	bl	80026c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000034 	.word	0x20000034

08000ff8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000ffe:	f001 fb60 	bl	80026c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000104 	.word	0x20000104

0800100c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4a08      	ldr	r2, [pc, #32]	; (8001034 <SystemInit+0x28>)
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <SystemInit+0x28>)
 8001014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SystemInit+0x28>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001026:	609a      	str	r2, [r3, #8]
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 fc9f 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f806 	bl	8001054 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fe8c 	bl	8000d64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fcb9 	bl	80019ea <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 fc81 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000144 	.word	0x20000144

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000144 	.word	0x20000144

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_Delay+0x40>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad2      	subs	r2, r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3f7      	bcc.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000008 	.word	0x20000008

08001138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e031      	b.n	80011b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fe28 	bl	8000dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d116      	bne.n	80011a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_ADC_Init+0x84>)
 800117c:	4013      	ands	r3, r2
 800117e:	f043 0202 	orr.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fa32 	bl	80015f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
 80011a2:	e001      	b.n	80011a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	ffffeefd 	.word	0xffffeefd

080011c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start+0x1a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e0a0      	b.n	800131c <HAL_ADC_Start+0x15c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d018      	beq.n	8001222 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	6892      	ldr	r2, [r2, #8]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001200:	4b49      	ldr	r3, [pc, #292]	; (8001328 <HAL_ADC_Start+0x168>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a49      	ldr	r2, [pc, #292]	; (800132c <HAL_ADC_Start+0x16c>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9a      	lsrs	r2, r3, #18
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001214:	e002      	b.n	800121c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f9      	bne.n	8001216 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d174      	bne.n	800131a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001234:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <HAL_ADC_Start+0x170>)
 8001236:	4013      	ands	r3, r2
 8001238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126a:	d106      	bne.n	800127a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f023 0206 	bic.w	r2, r3, #6
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	645a      	str	r2, [r3, #68]	; 0x44
 8001278:	e002      	b.n	8001280 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001290:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_ADC_Start+0x174>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d136      	bne.n	800131a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	6892      	ldr	r2, [r2, #8]
 80012b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e02d      	b.n	800131a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_ADC_Start+0x178>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d10e      	bne.n	80012e6 <HAL_ADC_Start+0x126>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	6892      	ldr	r2, [r2, #8]
 80012e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_ADC_Start+0x174>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d113      	bne.n	800131a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_ADC_Start+0x17c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d10e      	bne.n	800131a <HAL_ADC_Start+0x15a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d107      	bne.n	800131a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	6892      	ldr	r2, [r2, #8]
 8001314:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001318:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	fffff8fe 	.word	0xfffff8fe
 8001334:	40012300 	.word	0x40012300
 8001338:	40012000 	.word	0x40012000
 800133c:	40012200 	.word	0x40012200

08001340 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800135c:	b490      	push	{r4, r7}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1c>
 8001374:	2302      	movs	r3, #2
 8001376:	e12c      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x276>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b09      	cmp	r3, #9
 8001386:	d93b      	bls.n	8001400 <HAL_ADC_ConfigChannel+0xa4>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001390:	d036      	beq.n	8001400 <HAL_ADC_ConfigChannel+0xa4>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68d9      	ldr	r1, [r3, #12]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	4603      	mov	r3, r0
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4403      	add	r3, r0
 80013aa:	3b1e      	subs	r3, #30
 80013ac:	2007      	movs	r0, #7
 80013ae:	fa00 f303 	lsl.w	r3, r0, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	400b      	ands	r3, r1
 80013b6:	60d3      	str	r3, [r2, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a87      	ldr	r2, [pc, #540]	; (80015dc <HAL_ADC_ConfigChannel+0x280>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10a      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	68d1      	ldr	r1, [r2, #12]
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	6892      	ldr	r2, [r2, #8]
 80013d0:	0612      	lsls	r2, r2, #24
 80013d2:	430a      	orrs	r2, r1
 80013d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d6:	e037      	b.n	8001448 <HAL_ADC_ConfigChannel+0xec>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	6898      	ldr	r0, [r3, #8]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461c      	mov	r4, r3
 80013ee:	4623      	mov	r3, r4
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4423      	add	r3, r4
 80013f4:	3b1e      	subs	r3, #30
 80013f6:	fa00 f303 	lsl.w	r3, r0, r3
 80013fa:	430b      	orrs	r3, r1
 80013fc:	60d3      	str	r3, [r2, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013fe:	e023      	b.n	8001448 <HAL_ADC_ConfigChannel+0xec>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	4603      	mov	r3, r0
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4403      	add	r3, r0
 8001418:	2007      	movs	r0, #7
 800141a:	fa00 f303 	lsl.w	r3, r0, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	400b      	ands	r3, r1
 8001422:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6898      	ldr	r0, [r3, #8]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	461c      	mov	r4, r3
 800143a:	4623      	mov	r3, r4
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4423      	add	r3, r4
 8001440:	fa00 f303 	lsl.w	r3, r0, r3
 8001444:	430b      	orrs	r3, r1
 8001446:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b06      	cmp	r3, #6
 800144e:	d824      	bhi.n	800149a <HAL_ADC_ConfigChannel+0x13e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b05      	subs	r3, #5
 8001466:	221f      	movs	r2, #31
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	4003      	ands	r3, r0
 8001470:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	461c      	mov	r4, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b05      	subs	r3, #5
 8001490:	fa04 f303 	lsl.w	r3, r4, r3
 8001494:	4303      	orrs	r3, r0
 8001496:	634b      	str	r3, [r1, #52]	; 0x34
 8001498:	e04c      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d824      	bhi.n	80014ec <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6819      	ldr	r1, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	3b23      	subs	r3, #35	; 0x23
 80014b8:	221f      	movs	r2, #31
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	4003      	ands	r3, r0
 80014c2:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461c      	mov	r4, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b23      	subs	r3, #35	; 0x23
 80014e2:	fa04 f303 	lsl.w	r3, r4, r3
 80014e6:	4303      	orrs	r3, r0
 80014e8:	630b      	str	r3, [r1, #48]	; 0x30
 80014ea:	e023      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6819      	ldr	r1, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b41      	subs	r3, #65	; 0x41
 8001502:	221f      	movs	r2, #31
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4003      	ands	r3, r0
 800150c:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	461c      	mov	r4, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b41      	subs	r3, #65	; 0x41
 800152c:	fa04 f303 	lsl.w	r3, r4, r3
 8001530:	4303      	orrs	r3, r0
 8001532:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <HAL_ADC_ConfigChannel+0x284>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10a      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1f8>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001546:	d105      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1f8>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001548:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <HAL_ADC_ConfigChannel+0x288>)
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_ADC_ConfigChannel+0x288>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001552:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <HAL_ADC_ConfigChannel+0x284>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d109      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x216>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b12      	cmp	r3, #18
 8001564:	d105      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x216>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001566:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_ADC_ConfigChannel+0x288>)
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_ADC_ConfigChannel+0x288>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001570:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_ADC_ConfigChannel+0x284>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d125      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x26c>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_ADC_ConfigChannel+0x280>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d003      	beq.n	800158e <HAL_ADC_ConfigChannel+0x232>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b11      	cmp	r3, #17
 800158c:	d11c      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x26c>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <HAL_ADC_ConfigChannel+0x288>)
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_ADC_ConfigChannel+0x288>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001598:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_ADC_ConfigChannel+0x280>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d111      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x26c>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_ADC_ConfigChannel+0x28c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_ADC_ConfigChannel+0x290>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9a      	lsrs	r2, r3, #18
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015ba:	e002      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x266>
      {
        counter--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x260>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc90      	pop	{r4, r7}
 80015da:	4770      	bx	lr
 80015dc:	10000012 	.word	0x10000012
 80015e0:	40012000 	.word	0x40012000
 80015e4:	40012300 	.word	0x40012300
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015f8:	4a78      	ldr	r2, [pc, #480]	; (80017dc <ADC_Init+0x1ec>)
 80015fa:	4b78      	ldr	r3, [pc, #480]	; (80017dc <ADC_Init+0x1ec>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001602:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001604:	4975      	ldr	r1, [pc, #468]	; (80017dc <ADC_Init+0x1ec>)
 8001606:	4b75      	ldr	r3, [pc, #468]	; (80017dc <ADC_Init+0x1ec>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	6852      	ldr	r2, [r2, #4]
 800161c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	6851      	ldr	r1, [r2, #4]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6912      	ldr	r2, [r2, #16]
 8001630:	0212      	lsls	r2, r2, #8
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	6852      	ldr	r2, [r2, #4]
 8001640:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	6851      	ldr	r1, [r2, #4]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6892      	ldr	r2, [r2, #8]
 8001654:	430a      	orrs	r2, r1
 8001656:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6892      	ldr	r2, [r2, #8]
 8001662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	6891      	ldr	r1, [r2, #8]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68d2      	ldr	r2, [r2, #12]
 8001676:	430a      	orrs	r2, r1
 8001678:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <ADC_Init+0x1f0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d022      	beq.n	80016ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	6892      	ldr	r2, [r2, #8]
 800168e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	6891      	ldr	r1, [r2, #8]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016a2:	430a      	orrs	r2, r1
 80016a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	6892      	ldr	r2, [r2, #8]
 80016b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	6891      	ldr	r1, [r2, #8]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e00f      	b.n	80016ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	6892      	ldr	r2, [r2, #8]
 80016d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	6892      	ldr	r2, [r2, #8]
 80016e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	6892      	ldr	r2, [r2, #8]
 80016f4:	f022 0202 	bic.w	r2, r2, #2
 80016f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	6891      	ldr	r1, [r2, #8]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6992      	ldr	r2, [r2, #24]
 8001708:	0052      	lsls	r2, r2, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01b      	beq.n	8001750 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	6852      	ldr	r2, [r2, #4]
 8001722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001726:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	6852      	ldr	r2, [r2, #4]
 8001732:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001736:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	6851      	ldr	r1, [r2, #4]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001746:	3a01      	subs	r2, #1
 8001748:	0352      	lsls	r2, r2, #13
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	e007      	b.n	8001760 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	6852      	ldr	r2, [r2, #4]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800176a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	69d2      	ldr	r2, [r2, #28]
 800177e:	3a01      	subs	r2, #1
 8001780:	0512      	lsls	r2, r2, #20
 8001782:	430a      	orrs	r2, r1
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	6892      	ldr	r2, [r2, #8]
 8001790:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	6891      	ldr	r1, [r2, #8]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80017a6:	0252      	lsls	r2, r2, #9
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	6892      	ldr	r2, [r2, #8]
 80017b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	6891      	ldr	r1, [r2, #8]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6952      	ldr	r2, [r2, #20]
 80017ca:	0292      	lsls	r2, r2, #10
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40012300 	.word	0x40012300
 80017e0:	0f000001 	.word	0x0f000001

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <__NVIC_SetPriorityGrouping+0x40>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	4313      	orrs	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x40>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	05fa0000 	.word	0x05fa0000

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	4909      	ldr	r1, [pc, #36]	; (8001880 <__NVIC_EnableIRQ+0x38>)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	79fa      	ldrb	r2, [r7, #7]
 8001864:	f002 021f 	and.w	r2, r2, #31
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	490d      	ldr	r1, [pc, #52]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	4909      	ldr	r1, [pc, #36]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	2201      	movs	r2, #1
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	401a      	ands	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191e:	2101      	movs	r1, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	1e59      	subs	r1, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff90 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff2b 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff40 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff33 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e175      	b.n	8001d10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f040 8164 	bne.w	8001d0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d00b      	beq.n	8001a62 <HAL_GPIO_Init+0x5e>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d007      	beq.n	8001a62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a56:	2b11      	cmp	r3, #17
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x100>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b12      	cmp	r3, #18
 8001b02:	d123      	bne.n	8001b4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	69b9      	ldr	r1, [r7, #24]
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80be 	beq.w	8001d0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_GPIO_Init+0x320>)
 8001b90:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <HAL_GPIO_Init+0x320>)
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b62      	ldr	r3, [pc, #392]	; (8001d24 <HAL_GPIO_Init+0x320>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ba6:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a57      	ldr	r2, [pc, #348]	; (8001d2c <HAL_GPIO_Init+0x328>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d037      	beq.n	8001c42 <HAL_GPIO_Init+0x23e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a56      	ldr	r2, [pc, #344]	; (8001d30 <HAL_GPIO_Init+0x32c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d031      	beq.n	8001c3e <HAL_GPIO_Init+0x23a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02b      	beq.n	8001c3a <HAL_GPIO_Init+0x236>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a54      	ldr	r2, [pc, #336]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d025      	beq.n	8001c36 <HAL_GPIO_Init+0x232>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a53      	ldr	r2, [pc, #332]	; (8001d3c <HAL_GPIO_Init+0x338>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01f      	beq.n	8001c32 <HAL_GPIO_Init+0x22e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	; (8001d40 <HAL_GPIO_Init+0x33c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d019      	beq.n	8001c2e <HAL_GPIO_Init+0x22a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <HAL_GPIO_Init+0x340>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0x226>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a50      	ldr	r2, [pc, #320]	; (8001d48 <HAL_GPIO_Init+0x344>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00d      	beq.n	8001c26 <HAL_GPIO_Init+0x222>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_GPIO_Init+0x348>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d007      	beq.n	8001c22 <HAL_GPIO_Init+0x21e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4e      	ldr	r2, [pc, #312]	; (8001d50 <HAL_GPIO_Init+0x34c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_GPIO_Init+0x21a>
 8001c1a:	2309      	movs	r3, #9
 8001c1c:	e012      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c1e:	230a      	movs	r3, #10
 8001c20:	e010      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c22:	2308      	movs	r3, #8
 8001c24:	e00e      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x240>
 8001c42:	2300      	movs	r3, #0
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c54:	4934      	ldr	r1, [pc, #208]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c62:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c86:	4a33      	ldr	r2, [pc, #204]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_GPIO_Init+0x350>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	f67f ae86 	bls.w	8001a24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3724      	adds	r7, #36	; 0x24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40021c00 	.word	0x40021c00
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40022400 	.word	0x40022400
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e291      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8087 	beq.w	8001ebe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db0:	4b96      	ldr	r3, [pc, #600]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d00c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbc:	4b93      	ldr	r3, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d112      	bne.n	8001dee <HAL_RCC_OscConfig+0x62>
 8001dc8:	4b90      	ldr	r3, [pc, #576]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd4:	d10b      	bne.n	8001dee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd6:	4b8d      	ldr	r3, [pc, #564]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d06c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x130>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d168      	bne.n	8001ebc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e26b      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x7a>
 8001df8:	4a84      	ldr	r2, [pc, #528]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dfa:	4b84      	ldr	r3, [pc, #528]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e02e      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x9c>
 8001e0e:	4a7f      	ldr	r2, [pc, #508]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e10:	4b7e      	ldr	r3, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4a7c      	ldr	r2, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e1c:	4b7b      	ldr	r3, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e01d      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e32:	4a76      	ldr	r2, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e34:	4b75      	ldr	r3, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4a73      	ldr	r2, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e40:	4b72      	ldr	r3, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0xd8>
 8001e4c:	4a6f      	ldr	r2, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e4e:	4b6f      	ldr	r3, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e5a:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f936 	bl	80010dc <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff f932 	bl	80010dc <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e21f      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b61      	ldr	r3, [pc, #388]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe8>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f922 	bl	80010dc <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f91e 	bl	80010dc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e20b      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x110>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d069      	beq.n	8001f9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eca:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00b      	beq.n	8001eee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d11c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x190>
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d116      	bne.n	8001f1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCC_OscConfig+0x17a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e1df      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4941      	ldr	r1, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f08:	4b40      	ldr	r3, [pc, #256]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	e040      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f24:	4a39      	ldr	r2, [pc, #228]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f26:	4b39      	ldr	r3, [pc, #228]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f8d4 	bl	80010dc <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7ff f8d0 	bl	80010dc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1bd      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	492d      	ldr	r1, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
 8001f6a:	e018      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6c:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f8b0 	bl	80010dc <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff f8ac 	bl	80010dc <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e199      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d038      	beq.n	800201c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f88d 	bl	80010dc <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f889 	bl	80010dc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e176      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x23a>
 8001fe4:	e01a      	b.n	800201c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	4a09      	ldr	r2, [pc, #36]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_RCC_OscConfig+0x280>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f873 	bl	80010dc <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f86f 	bl	80010dc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d903      	bls.n	8002010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e15c      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
 800200c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b91      	ldr	r3, [pc, #580]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ee      	bne.n	8001ffa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a4 	beq.w	8002172 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b8b      	ldr	r3, [pc, #556]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4a88      	ldr	r2, [pc, #544]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002038:	4b87      	ldr	r3, [pc, #540]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002052:	4b82      	ldr	r3, [pc, #520]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800205e:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002060:	4b7e      	ldr	r3, [pc, #504]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7ff f837 	bl	80010dc <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff f833 	bl	80010dc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	; 0x64
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e120      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x4d0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x31a>
 8002098:	4a6f      	ldr	r2, [pc, #444]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	4b6f      	ldr	r3, [pc, #444]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	e02d      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x33c>
 80020ae:	4a6a      	ldr	r2, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020b0:	4b69      	ldr	r3, [pc, #420]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ba:	4a67      	ldr	r2, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	e01c      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d10c      	bne.n	80020ea <HAL_RCC_OscConfig+0x35e>
 80020d0:	4a61      	ldr	r2, [pc, #388]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020d2:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020de:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	e00b      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020ec:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	4b57      	ldr	r3, [pc, #348]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d015      	beq.n	8002136 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe ffe7 	bl	80010dc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe ffe3 	bl	80010dc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0ce      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ee      	beq.n	8002112 <HAL_RCC_OscConfig+0x386>
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7fe ffd1 	bl	80010dc <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe ffcd 	bl	80010dc <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ee      	bne.n	800213e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d105      	bne.n	8002172 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80a4 	beq.w	80022c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d06b      	beq.n	8002260 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d149      	bne.n	8002224 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4a31      	ldr	r2, [pc, #196]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe ff9e 	bl	80010dc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ff9a 	bl	80010dc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e087      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c2:	4925      	ldr	r1, [pc, #148]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	019b      	lsls	r3, r3, #6
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff6e 	bl	80010dc <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe ff6a 	bl	80010dc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e057      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x478>
 8002222:	e04f      	b.n	80022c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe ff54 	bl	80010dc <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe ff50 	bl	80010dc <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e03d      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x4ac>
 8002256:	e035      	b.n	80022c4 <HAL_RCC_OscConfig+0x538>
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x544>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d028      	beq.n	80022c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d121      	bne.n	80022c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d11a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002298:	4293      	cmp	r3, r2
 800229a:	d111      	bne.n	80022c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0d0      	b.n	800248e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d210      	bcs.n	800231c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4967      	ldr	r1, [pc, #412]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 020f 	bic.w	r2, r3, #15
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 020f 	and.w	r2, r3, #15
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0b8      	b.n	800248e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002334:	4a59      	ldr	r2, [pc, #356]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002336:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800233e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800234c:	4a53      	ldr	r2, [pc, #332]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 800234e:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002356:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4950      	ldr	r1, [pc, #320]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 800235a:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d040      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d115      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e073      	b.n	800248e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06b      	b.n	800248e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4939      	ldr	r1, [pc, #228]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 0203 	bic.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c8:	f7fe fe88 	bl	80010dc <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7fe fe84 	bl	80010dc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e053      	b.n	800248e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4924      	ldr	r1, [pc, #144]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 020f 	bic.w	r2, r3, #15
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 020f 	and.w	r2, r3, #15
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e032      	b.n	800248e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4919      	ldr	r1, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002452:	4912      	ldr	r1, [pc, #72]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002466:	f000 f821 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 800246a:	4601      	mov	r1, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	fa21 f303 	lsr.w	r3, r1, r3
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fde4 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00
 800249c:	40023800 	.word	0x40023800
 80024a0:	080033c0 	.word	0x080033c0
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000004 	.word	0x20000004

080024ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b0:	b087      	sub	sp, #28
 80024b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024b4:	2200      	movs	r2, #0
 80024b6:	60fa      	str	r2, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	617a      	str	r2, [r7, #20]
 80024bc:	2200      	movs	r2, #0
 80024be:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 80024c0:	2200      	movs	r2, #0
 80024c2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c4:	4a51      	ldr	r2, [pc, #324]	; (800260c <HAL_RCC_GetSysClockFreq+0x160>)
 80024c6:	6892      	ldr	r2, [r2, #8]
 80024c8:	f002 020c 	and.w	r2, r2, #12
 80024cc:	2a04      	cmp	r2, #4
 80024ce:	d007      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x34>
 80024d0:	2a08      	cmp	r2, #8
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024d4:	2a00      	cmp	r2, #0
 80024d6:	f040 8090 	bne.w	80025fa <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024da:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_RCC_GetSysClockFreq+0x164>)
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	e08f      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024e0:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <HAL_RCC_GetSysClockFreq+0x168>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	e08c      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e6:	4a49      	ldr	r2, [pc, #292]	; (800260c <HAL_RCC_GetSysClockFreq+0x160>)
 80024e8:	6852      	ldr	r2, [r2, #4]
 80024ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80024ee:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024f0:	4a46      	ldr	r2, [pc, #280]	; (800260c <HAL_RCC_GetSysClockFreq+0x160>)
 80024f2:	6852      	ldr	r2, [r2, #4]
 80024f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d023      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fc:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCC_GetSysClockFreq+0x160>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	f04f 0400 	mov.w	r4, #0
 8002506:	f240 11ff 	movw	r1, #511	; 0x1ff
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	ea03 0301 	and.w	r3, r3, r1
 8002512:	ea04 0402 	and.w	r4, r4, r2
 8002516:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <HAL_RCC_GetSysClockFreq+0x168>)
 8002518:	fb02 f104 	mul.w	r1, r2, r4
 800251c:	2200      	movs	r2, #0
 800251e:	fb02 f203 	mul.w	r2, r2, r3
 8002522:	440a      	add	r2, r1
 8002524:	493b      	ldr	r1, [pc, #236]	; (8002614 <HAL_RCC_GetSysClockFreq+0x168>)
 8002526:	fba3 0101 	umull	r0, r1, r3, r1
 800252a:	1853      	adds	r3, r2, r1
 800252c:	4619      	mov	r1, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f04f 0400 	mov.w	r4, #0
 8002534:	461a      	mov	r2, r3
 8002536:	4623      	mov	r3, r4
 8002538:	f7fd fe66 	bl	8000208 <__aeabi_uldivmod>
 800253c:	4603      	mov	r3, r0
 800253e:	460c      	mov	r4, r1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e04c      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <HAL_RCC_GetSysClockFreq+0x160>)
 8002546:	6852      	ldr	r2, [r2, #4]
 8002548:	0992      	lsrs	r2, r2, #6
 800254a:	4611      	mov	r1, r2
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002554:	f04f 0600 	mov.w	r6, #0
 8002558:	ea05 0501 	and.w	r5, r5, r1
 800255c:	ea06 0602 	and.w	r6, r6, r2
 8002560:	4629      	mov	r1, r5
 8002562:	4632      	mov	r2, r6
 8002564:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002568:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 800256c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002570:	4651      	mov	r1, sl
 8002572:	465a      	mov	r2, fp
 8002574:	46aa      	mov	sl, r5
 8002576:	46b3      	mov	fp, r6
 8002578:	4655      	mov	r5, sl
 800257a:	465e      	mov	r6, fp
 800257c:	1b4d      	subs	r5, r1, r5
 800257e:	eb62 0606 	sbc.w	r6, r2, r6
 8002582:	4629      	mov	r1, r5
 8002584:	4632      	mov	r2, r6
 8002586:	0194      	lsls	r4, r2, #6
 8002588:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800258c:	018b      	lsls	r3, r1, #6
 800258e:	1a5b      	subs	r3, r3, r1
 8002590:	eb64 0402 	sbc.w	r4, r4, r2
 8002594:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002598:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800259c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80025a0:	4643      	mov	r3, r8
 80025a2:	464c      	mov	r4, r9
 80025a4:	4655      	mov	r5, sl
 80025a6:	465e      	mov	r6, fp
 80025a8:	18ed      	adds	r5, r5, r3
 80025aa:	eb46 0604 	adc.w	r6, r6, r4
 80025ae:	462b      	mov	r3, r5
 80025b0:	4634      	mov	r4, r6
 80025b2:	02a2      	lsls	r2, r4, #10
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80025c6:	4618      	mov	r0, r3
 80025c8:	4621      	mov	r1, r4
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f04f 0400 	mov.w	r4, #0
 80025d0:	461a      	mov	r2, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	f7fd fe18 	bl	8000208 <__aeabi_uldivmod>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_GetSysClockFreq+0x160>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0c1b      	lsrs	r3, r3, #16
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	3301      	adds	r3, #1
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	e002      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetSysClockFreq+0x164>)
 80025fc:	613b      	str	r3, [r7, #16]
      break;
 80025fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002600:	693b      	ldr	r3, [r7, #16]
}
 8002602:	4618      	mov	r0, r3
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	00f42400 	.word	0x00f42400
 8002614:	017d7840 	.word	0x017d7840

08002618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_TIM_Base_Start_IT+0x50>)
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b06      	cmp	r3, #6
 8002640:	d00b      	beq.n	800265a <HAL_TIM_Base_Start_IT+0x42>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d007      	beq.n	800265a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	00010007 	.word	0x00010007

0800266c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e01d      	b.n	80026ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fbde 	bl	8000e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 fa68 	bl	8002b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d122      	bne.n	800271e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d11b      	bne.n	800271e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0202 	mvn.w	r2, #2
 80026ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fa1d 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 800270a:	e005      	b.n	8002718 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fa0f 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa20 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d122      	bne.n	8002772 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0204 	mvn.w	r2, #4
 8002742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f9f3 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 800275e:	e005      	b.n	800276c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f9e5 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f9f6 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d122      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11b      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0208 	mvn.w	r2, #8
 8002796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2204      	movs	r2, #4
 800279c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f9c9 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 80027b2:	e005      	b.n	80027c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f9bb 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9cc 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d122      	bne.n	800281a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d11b      	bne.n	800281a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f06f 0210 	mvn.w	r2, #16
 80027ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2208      	movs	r2, #8
 80027f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f99f 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 8002806:	e005      	b.n	8002814 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f991 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f9a2 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10e      	bne.n	8002846 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0201 	mvn.w	r2, #1
 800283e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7fd ff7f 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d10e      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	d107      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800286a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fd1d 	bl	80032ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fd10 	bl	80032c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f950 	bl	8002b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0220 	mvn.w	r2, #32
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fcd0 	bl	8003298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002916:	2302      	movs	r3, #2
 8002918:	e105      	b.n	8002b26 <HAL_TIM_PWM_ConfigChannel+0x226>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b14      	cmp	r3, #20
 800292e:	f200 80f0 	bhi.w	8002b12 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	0800298d 	.word	0x0800298d
 800293c:	08002b13 	.word	0x08002b13
 8002940:	08002b13 	.word	0x08002b13
 8002944:	08002b13 	.word	0x08002b13
 8002948:	080029cd 	.word	0x080029cd
 800294c:	08002b13 	.word	0x08002b13
 8002950:	08002b13 	.word	0x08002b13
 8002954:	08002b13 	.word	0x08002b13
 8002958:	08002a0f 	.word	0x08002a0f
 800295c:	08002b13 	.word	0x08002b13
 8002960:	08002b13 	.word	0x08002b13
 8002964:	08002b13 	.word	0x08002b13
 8002968:	08002a4f 	.word	0x08002a4f
 800296c:	08002b13 	.word	0x08002b13
 8002970:	08002b13 	.word	0x08002b13
 8002974:	08002b13 	.word	0x08002b13
 8002978:	08002a91 	.word	0x08002a91
 800297c:	08002b13 	.word	0x08002b13
 8002980:	08002b13 	.word	0x08002b13
 8002984:	08002b13 	.word	0x08002b13
 8002988:	08002ad1 	.word	0x08002ad1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f994 	bl	8002cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	6992      	ldr	r2, [r2, #24]
 80029a2:	f042 0208 	orr.w	r2, r2, #8
 80029a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	6992      	ldr	r2, [r2, #24]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	6991      	ldr	r1, [r2, #24]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	6912      	ldr	r2, [r2, #16]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	619a      	str	r2, [r3, #24]
      break;
 80029ca:	e0a3      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f9e6 	bl	8002da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	6992      	ldr	r2, [r2, #24]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	6992      	ldr	r2, [r2, #24]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	6991      	ldr	r1, [r2, #24]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	6912      	ldr	r2, [r2, #16]
 8002a06:	0212      	lsls	r2, r2, #8
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	619a      	str	r2, [r3, #24]
      break;
 8002a0c:	e082      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fa3d 	bl	8002e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	69d2      	ldr	r2, [r2, #28]
 8002a24:	f042 0208 	orr.w	r2, r2, #8
 8002a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	69d2      	ldr	r2, [r2, #28]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	69d1      	ldr	r1, [r2, #28]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	6912      	ldr	r2, [r2, #16]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
      break;
 8002a4c:	e062      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa93 	bl	8002f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	69d2      	ldr	r2, [r2, #28]
 8002a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	69d2      	ldr	r2, [r2, #28]
 8002a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	69d1      	ldr	r1, [r2, #28]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	6912      	ldr	r2, [r2, #16]
 8002a88:	0212      	lsls	r2, r2, #8
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	61da      	str	r2, [r3, #28]
      break;
 8002a8e:	e041      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 faca 	bl	8003030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	6912      	ldr	r2, [r2, #16]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ace:	e021      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fafc 	bl	80030d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	6912      	ldr	r2, [r2, #16]
 8002b0a:	0212      	lsls	r2, r2, #8
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b10:	e000      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002b12:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop

08002b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <TIM_Base_SetConfig+0x114>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d00f      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <TIM_Base_SetConfig+0x118>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3c      	ldr	r2, [pc, #240]	; (8002c9c <TIM_Base_SetConfig+0x11c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <TIM_Base_SetConfig+0x120>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3a      	ldr	r2, [pc, #232]	; (8002ca4 <TIM_Base_SetConfig+0x124>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d108      	bne.n	8002bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <TIM_Base_SetConfig+0x114>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02b      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d027      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <TIM_Base_SetConfig+0x118>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d023      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <TIM_Base_SetConfig+0x11c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01f      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <TIM_Base_SetConfig+0x120>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01b      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <TIM_Base_SetConfig+0x124>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d017      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a28      	ldr	r2, [pc, #160]	; (8002ca8 <TIM_Base_SetConfig+0x128>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <TIM_Base_SetConfig+0x12c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00f      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <TIM_Base_SetConfig+0x130>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <TIM_Base_SetConfig+0x134>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <TIM_Base_SetConfig+0x138>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d003      	beq.n	8002c32 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <TIM_Base_SetConfig+0x13c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <TIM_Base_SetConfig+0x114>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0xf8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <TIM_Base_SetConfig+0x124>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d103      	bne.n	8002c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	615a      	str	r2, [r3, #20]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800
 8002ca0:	40000c00 	.word	0x40000c00
 8002ca4:	40010400 	.word	0x40010400
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	40014800 	.word	0x40014800
 8002cb4:	40001800 	.word	0x40001800
 8002cb8:	40001c00 	.word	0x40001c00
 8002cbc:	40002000 	.word	0x40002000

08002cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0201 	bic.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <TIM_OC1_SetConfig+0xd8>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 0302 	bic.w	r3, r3, #2
 8002d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <TIM_OC1_SetConfig+0xdc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_OC1_SetConfig+0x64>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <TIM_OC1_SetConfig+0xe0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10c      	bne.n	8002d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0308 	bic.w	r3, r3, #8
 8002d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <TIM_OC1_SetConfig+0xdc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <TIM_OC1_SetConfig+0x8e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <TIM_OC1_SetConfig+0xe0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	621a      	str	r2, [r3, #32]
}
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	fffeff8f 	.word	0xfffeff8f
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40010400 	.word	0x40010400

08002da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0210 	bic.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <TIM_OC2_SetConfig+0xe4>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0320 	bic.w	r3, r3, #32
 8002dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a23      	ldr	r2, [pc, #140]	; (8002e8c <TIM_OC2_SetConfig+0xe8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_OC2_SetConfig+0x68>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <TIM_OC2_SetConfig+0xec>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10d      	bne.n	8002e28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <TIM_OC2_SetConfig+0xe8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_OC2_SetConfig+0x94>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <TIM_OC2_SetConfig+0xec>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d113      	bne.n	8002e60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	feff8fff 	.word	0xfeff8fff
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40010400 	.word	0x40010400

08002e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <TIM_OC3_SetConfig+0xe0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <TIM_OC3_SetConfig+0xe4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_OC3_SetConfig+0x66>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <TIM_OC3_SetConfig+0xe8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10d      	bne.n	8002f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <TIM_OC3_SetConfig+0xe4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_OC3_SetConfig+0x92>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <TIM_OC3_SetConfig+0xe8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d113      	bne.n	8002f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	fffeff8f 	.word	0xfffeff8f
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40010400 	.word	0x40010400

08002f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <TIM_OC4_SetConfig+0xa4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	031b      	lsls	r3, r3, #12
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <TIM_OC4_SetConfig+0xa8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_OC4_SetConfig+0x68>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <TIM_OC4_SetConfig+0xac>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d109      	bne.n	8002ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	621a      	str	r2, [r3, #32]
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	feff8fff 	.word	0xfeff8fff
 8003028:	40010000 	.word	0x40010000
 800302c:	40010400 	.word	0x40010400

08003030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <TIM_OC5_SetConfig+0x98>)
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a12      	ldr	r2, [pc, #72]	; (80030cc <TIM_OC5_SetConfig+0x9c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_OC5_SetConfig+0x5e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <TIM_OC5_SetConfig+0xa0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d109      	bne.n	80030a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	fffeff8f 	.word	0xfffeff8f
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400

080030d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <TIM_OC6_SetConfig+0x9c>)
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	051b      	lsls	r3, r3, #20
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a13      	ldr	r2, [pc, #76]	; (8003174 <TIM_OC6_SetConfig+0xa0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_OC6_SetConfig+0x60>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <TIM_OC6_SetConfig+0xa4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d109      	bne.n	8003148 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	029b      	lsls	r3, r3, #10
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	feff8fff 	.word	0xfeff8fff
 8003174:	40010000 	.word	0x40010000
 8003178:	40010400 	.word	0x40010400

0800317c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003190:	2302      	movs	r3, #2
 8003192:	e06d      	b.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a30      	ldr	r2, [pc, #192]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d022      	beq.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003206:	d01d      	beq.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d018      	beq.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d10c      	bne.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	4313      	orrs	r3, r2
 8003254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40010000 	.word	0x40010000
 8003280:	40010400 	.word	0x40010400
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40014000 	.word	0x40014000
 8003294:	40001800 	.word	0x40001800

08003298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800330c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032da:	e003      	b.n	80032e4 <LoopCopyDataInit>

080032dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032e2:	3104      	adds	r1, #4

080032e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032e4:	480b      	ldr	r0, [pc, #44]	; (8003314 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032ec:	d3f6      	bcc.n	80032dc <CopyDataInit>
  ldr  r2, =_sbss
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032f0:	e002      	b.n	80032f8 <LoopFillZerobss>

080032f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032f4:	f842 3b04 	str.w	r3, [r2], #4

080032f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032fc:	d3f9      	bcc.n	80032f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032fe:	f7fd fe85 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003302:	f000 f811 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003306:	f7fd fa4d 	bl	80007a4 <main>
  bx  lr    
 800330a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800330c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003310:	080033e0 	.word	0x080033e0
  ldr  r0, =_sdata
 8003314:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003318:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800331c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003320:	20000148 	.word	0x20000148

08003324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC_IRQHandler>
	...

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4e0d      	ldr	r6, [pc, #52]	; (8003360 <__libc_init_array+0x38>)
 800332c:	4c0d      	ldr	r4, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 800332e:	1ba4      	subs	r4, r4, r6
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	2500      	movs	r5, #0
 8003334:	42a5      	cmp	r5, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	4e0b      	ldr	r6, [pc, #44]	; (8003368 <__libc_init_array+0x40>)
 800333a:	4c0c      	ldr	r4, [pc, #48]	; (800336c <__libc_init_array+0x44>)
 800333c:	f000 f820 	bl	8003380 <_init>
 8003340:	1ba4      	subs	r4, r4, r6
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	2500      	movs	r5, #0
 8003346:	42a5      	cmp	r5, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003350:	4798      	blx	r3
 8003352:	3501      	adds	r5, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800335a:	4798      	blx	r3
 800335c:	3501      	adds	r5, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	080033d8 	.word	0x080033d8
 8003364:	080033d8 	.word	0x080033d8
 8003368:	080033d8 	.word	0x080033d8
 800336c:	080033dc 	.word	0x080033dc

08003370 <memset>:
 8003370:	4402      	add	r2, r0
 8003372:	4603      	mov	r3, r0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <memset+0xa>
 8003378:	4770      	bx	lr
 800337a:	f803 1b01 	strb.w	r1, [r3], #1
 800337e:	e7f9      	b.n	8003374 <memset+0x4>

08003380 <_init>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr

0800338c <_fini>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr

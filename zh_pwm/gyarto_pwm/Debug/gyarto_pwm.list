
gyarto_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e1c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08005048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a4  2000000c  08005054  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b0  08005054  000201b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dcd2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001bc3  00000000  00000000  0002dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000dc8  00000000  00000000  0002f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d10  00000000  00000000  000306a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006ef7  00000000  00000000  000313b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000047e7  00000000  00000000  000382a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ca8e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003a7c  00000000  00000000  0003cb0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004fcc 	.word	0x08004fcc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004fcc 	.word	0x08004fcc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_UART_RxCpltCallback>:
float kelvin=0;
float fahrenheit=0;
float ranken=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &fogad, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	4924      	ldr	r1, [pc, #144]	; (80005b4 <HAL_UART_RxCpltCallback+0x9c>)
 8000524:	4824      	ldr	r0, [pc, #144]	; (80005b8 <HAL_UART_RxCpltCallback+0xa0>)
 8000526:	f003 fd4e 	bl	8003fc6 <HAL_UART_Receive_IT>

	t = fogad;
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <HAL_UART_RxCpltCallback+0x9c>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <HAL_UART_RxCpltCallback+0xa4>)
 8000530:	701a      	strb	r2, [r3, #0]
	t =  t- '0';
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <HAL_UART_RxCpltCallback+0xa4>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	3b30      	subs	r3, #48	; 0x30
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <HAL_UART_RxCpltCallback+0xa4>)
 800053c:	701a      	strb	r2, [r3, #0]
	/*received_string[cnt++] = data;

	data = t * 100; */

	if (huart->Instance == USART3)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a1f      	ldr	r2, [pc, #124]	; (80005c0 <HAL_UART_RxCpltCallback+0xa8>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d131      	bne.n	80005ac <HAL_UART_RxCpltCallback+0x94>
	{

		switch(t){
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <HAL_UART_RxCpltCallback+0xa4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	2b05      	cmp	r3, #5
 8000550:	d82c      	bhi.n	80005ac <HAL_UART_RxCpltCallback+0x94>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <HAL_UART_RxCpltCallback+0x40>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	08000571 	.word	0x08000571
 800055c:	0800057b 	.word	0x0800057b
 8000560:	08000585 	.word	0x08000585
 8000564:	0800058f 	.word	0x0800058f
 8000568:	08000599 	.word	0x08000599
 800056c:	080005a3 	.word	0x080005a3
			case 1: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_UART_RxCpltCallback+0xac>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2200      	movs	r2, #0
 8000576:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 8000578:	e018      	b.n	80005ac <HAL_UART_RxCpltCallback+0x94>

			case 2:
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 20);
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_UART_RxCpltCallback+0xac>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2214      	movs	r2, #20
 8000580:	639a      	str	r2, [r3, #56]	; 0x38

				break;
 8000582:	e013      	b.n	80005ac <HAL_UART_RxCpltCallback+0x94>

			case 3: __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 40);
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_UART_RxCpltCallback+0xac>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2228      	movs	r2, #40	; 0x28
 800058a:	639a      	str	r2, [r3, #56]	; 0x38


					break;
 800058c:	e00e      	b.n	80005ac <HAL_UART_RxCpltCallback+0x94>

			case 4:
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 60);
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_UART_RxCpltCallback+0xac>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	223c      	movs	r2, #60	; 0x3c
 8000594:	639a      	str	r2, [r3, #56]	; 0x38

					break;
 8000596:	e009      	b.n	80005ac <HAL_UART_RxCpltCallback+0x94>
			case 5:
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 80);
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_UART_RxCpltCallback+0xac>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2250      	movs	r2, #80	; 0x50
 800059e:	639a      	str	r2, [r3, #56]	; 0x38

						break;
 80005a0:	e004      	b.n	80005ac <HAL_UART_RxCpltCallback+0x94>
			case 6:
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 100);
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_UART_RxCpltCallback+0xac>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	639a      	str	r2, [r3, #56]	; 0x38

					break;
 80005aa:	bf00      	nop
		}

	}

}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000029 	.word	0x20000029
 80005b8:	20000088 	.word	0x20000088
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40004800 	.word	0x40004800
 80005c4:	2000002c 	.word	0x2000002c

080005c8 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit_IT(&huart3, &fogad, 1);

}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b090      	sub	sp, #64	; 0x40
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t text[] = "1: 0% \r\n 2: 20% \r\n 3: 40% \r\n 4: 60% \r\n 5: 80% \r\n 6: 100% \r\n" ;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <main+0x64>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fbd0 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f826 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 fa02 	bl	8000a0c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000608:	f000 f8f0 	bl	80007ec <MX_TIM4_Init>
  MX_TIM12_Init();
 800060c:	f000 f96a 	bl	80008e4 <MX_TIM12_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f9cc 	bl	80009ac <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000614:	f000 f896 	bl	8000744 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000618:	2104      	movs	r1, #4
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <main+0x68>)
 800061c:	f002 fb2e 	bl	8002c7c <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_IT(&huart3, &fogad, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	4909      	ldr	r1, [pc, #36]	; (8000648 <main+0x6c>)
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <main+0x70>)
 8000626:	f003 fcce 	bl	8003fc6 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart3, rx_buff, 10);
  //HAL_UART_Transmit_IT(&huart3, tx_buff, 10);

  HAL_UART_Transmit(&huart3, text, sizeof(text), 20);
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	2314      	movs	r3, #20
 800062e:	223c      	movs	r2, #60	; 0x3c
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <main+0x70>)
 8000632:	f003 fc37 	bl	8003ea4 <HAL_UART_Transmit>

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 25);
 8000636:	4b03      	ldr	r3, [pc, #12]	; (8000644 <main+0x68>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2219      	movs	r2, #25
 800063c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x62>
 8000640:	08004fe4 	.word	0x08004fe4
 8000644:	2000002c 	.word	0x2000002c
 8000648:	20000029 	.word	0x20000029
 800064c:	20000088 	.word	0x20000088

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0b4      	sub	sp, #208	; 0xd0
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fcac 	bl	8004fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2284      	movs	r2, #132	; 0x84
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fc9d 	bl	8004fbc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4a2e      	ldr	r2, [pc, #184]	; (800073c <SystemClock_Config+0xec>)
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <SystemClock_Config+0xec>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <SystemClock_Config+0xec>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <SystemClock_Config+0xf0>)
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SystemClock_Config+0xf0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemClock_Config+0xf0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2310      	movs	r3, #16
 80006c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f9b0 	bl	8001a38 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006de:	f000 f9d3 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fc3a 	bl	8001f80 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f9b9 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800071c:	2300      	movs	r3, #0
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fe01 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000730:	f000 f9aa 	bl	8000a88 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	37d0      	adds	r7, #208	; 0xd0
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_ADC1_Init+0x98>)
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <MX_ADC1_Init+0x9c>)
 800075a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_ADC1_Init+0x98>)
 8000784:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <MX_ADC1_Init+0xa0>)
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_ADC1_Init+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a2:	480e      	ldr	r0, [pc, #56]	; (80007dc <MX_ADC1_Init+0x98>)
 80007a4:	f000 fb5a 	bl	8000e5c <HAL_ADC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 f96b 	bl	8000a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_ADC1_Init+0xa4>)
 80007b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_ADC1_Init+0x98>)
 80007c4:	f000 fb8e 	bl	8000ee4 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ce:	f000 f95b 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000118 	.word	0x20000118
 80007e0:	40012000 	.word	0x40012000
 80007e4:	0f000001 	.word	0x0f000001
 80007e8:	10000012 	.word	0x10000012

080007ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	; 0x40
 80007f0:	af00      	add	r7, sp, #0
static void MX_TIM4_Init(void)
 80007f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007f6:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_TIM4_Init+0xf0>)
 8000828:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <MX_TIM4_Init+0xf4>)
 800082a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_TIM4_Init+0xf0>)
 800082e:	220f      	movs	r2, #15
 8000830:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_TIM4_Init+0xf0>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_TIM4_Init+0xf0>)
 800083a:	2264      	movs	r2, #100	; 0x64
 800083c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_TIM4_Init+0xf0>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_TIM4_Init+0xf0>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800084a:	4824      	ldr	r0, [pc, #144]	; (80008dc <MX_TIM4_Init+0xf0>)
 800084c:	f002 f95e 	bl	8002b0c <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 f917 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000864:	4619      	mov	r1, r3
 8000866:	481d      	ldr	r0, [pc, #116]	; (80008dc <MX_TIM4_Init+0xf0>)
 8000868:	f002 fd78 	bl	800335c <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000872:	f000 f909 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000876:	4819      	ldr	r0, [pc, #100]	; (80008dc <MX_TIM4_Init+0xf0>)
 8000878:	f002 f99f 	bl	8002bba <HAL_TIM_PWM_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000882:	f000 f901 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_TIM4_Init+0xf0>)
 8000896:	f003 fa0b 	bl	8003cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80008a0:	f000 f8f2 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a4:	2360      	movs	r3, #96	; 0x60
 80008a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 5;
 80008a8:	2305      	movs	r3, #5
 80008aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	2204      	movs	r2, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM4_Init+0xf0>)
 80008be:	f002 fc3d 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80008c8:	f000 f8de 	bl	8000a88 <Error_Handler>
  	  /* USER CODE BEGIN TIM4_IRQn 1 */

  	  /* USER CODE END TIM4_IRQn 1 */
  	}
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM4_Init+0xf0>)
 80008ce:	f000 f965 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3740      	adds	r7, #64	; 0x40
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000002c 	.word	0x2000002c
 80008e0:	40000800 	.word	0x40000800

080008e4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
static void MX_TIM12_Init(void)
 80008ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ee:	603b      	str	r3, [r7, #0]

	  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
	}
  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000912:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <MX_TIM12_Init+0xc4>)
 8000914:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 15;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000918:	220f      	movs	r2, #15
 800091a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_TIM12_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000924:	2264      	movs	r2, #100	; 0x64
 8000926:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_TIM12_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000934:	481b      	ldr	r0, [pc, #108]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000936:	f002 f8e9 	bl	8002b0c <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 8000940:	f000 f8a2 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	4619      	mov	r1, r3
 8000950:	4814      	ldr	r0, [pc, #80]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000952:	f002 fd03 	bl	800335c <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM12_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f894 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000960:	4810      	ldr	r0, [pc, #64]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000962:	f002 f92a 	bl	8002bba <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f88c 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000970:	2360      	movs	r3, #96	; 0x60
 8000972:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000974:	2332      	movs	r3, #50	; 0x32
 8000976:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000988:	f002 fbd8 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8000992:	f000 f879 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <MX_TIM12_Init+0xc0>)
 8000998:	f000 f900 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000160 	.word	0x20000160
 80009a8:	40001800 	.word	0x40001800

080009ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_USART3_UART_Init+0x5c>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART3_UART_Init+0x58>)
 80009f0:	f003 fa0a 	bl	8003e08 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009fa:	f000 f845 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000088 	.word	0x20000088
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <MX_GPIO_Init+0x74>)
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_GPIO_Init+0x74>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_GPIO_Init+0x74>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <MX_GPIO_Init+0x74>)
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_GPIO_Init+0x74>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_GPIO_Init+0x74>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <MX_GPIO_Init+0x78>)
 8000a58:	f000 ffd4 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_GPIO_Init+0x78>)
 8000a74:	f000 fe1c 	bl	80016b0 <HAL_GPIO_Init>

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <Error_Handler+0x6>

08000a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x44>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x44>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_ADC_MspInit+0x38>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d10b      	bne.n	8000b02 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_ADC_MspInit+0x3c>)
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_ADC_MspInit+0x3c>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_ADC_MspInit+0x3c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40012000 	.word	0x40012000
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_TIM_Base_MspInit+0x78>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d114      	bne.n	8000b54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_TIM_Base_MspInit+0x7c>)
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_TIM_Base_MspInit+0x7c>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_TIM_Base_MspInit+0x7c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	201e      	movs	r0, #30
 8000b48:	f000 fce9 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b4c:	201e      	movs	r0, #30
 8000b4e:	f000 fd02 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000b52:	e018      	b.n	8000b86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM12)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_TIM_Base_MspInit+0x80>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d113      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_TIM_Base_MspInit+0x7c>)
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_TIM_Base_MspInit+0x7c>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_TIM_Base_MspInit+0x7c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202b      	movs	r0, #43	; 0x2b
 8000b7c:	f000 fccf 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000b80:	202b      	movs	r0, #43	; 0x2b
 8000b82:	f000 fce8 	bl	8001556 <HAL_NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40000800 	.word	0x40000800
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40001800 	.word	0x40001800

08000b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_TIM_MspPostInit+0xa8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d11c      	bne.n	8000bf8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <HAL_TIM_MspPostInit+0xac>)
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_TIM_MspPostInit+0xac>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <HAL_TIM_MspPostInit+0xac>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000be6:	2302      	movs	r3, #2
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4816      	ldr	r0, [pc, #88]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000bf2:	f000 fd5d 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000bf6:	e021      	b.n	8000c3c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_TIM_MspPostInit+0xb4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d11c      	bne.n	8000c3c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <HAL_TIM_MspPostInit+0xac>)
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_TIM_MspPostInit+0xac>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_TIM_MspPostInit+0xac>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000c2c:	2309      	movs	r3, #9
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000c38:	f000 fd3a 	bl	80016b0 <HAL_GPIO_Init>
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40000800 	.word	0x40000800
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40001800 	.word	0x40001800

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x8c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d130      	bne.n	8000cd8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_UART_MspInit+0x94>)
 8000cc4:	f000 fcf4 	bl	80016b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2027      	movs	r0, #39	; 0x27
 8000cce:	f000 fc26 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cd2:	2027      	movs	r0, #39	; 0x27
 8000cd4:	f000 fc3f 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f870 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <TIM4_IRQHandler+0x10>)
 8000d46:	f002 f8d9 	bl	8002efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000002c 	.word	0x2000002c

08000d54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USART3_IRQHandler+0x10>)
 8000d5a:	f003 f971 	bl	8004040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */



  /* USER CODE END USART3_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000088 	.word	0x20000088

08000d68 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000d6e:	f002 f8c5 	bl	8002efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000160 	.word	0x20000160

08000d7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 fbaf 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f806 	bl	8000dbc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fe6e 	bl	8000a90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fbc9 	bl	8001572 <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 fb91 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	200001ac 	.word	0x200001ac

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200001ac 	.word	0x200001ac

08000e5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e031      	b.n	8000ed6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d109      	bne.n	8000e8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fe2c 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d116      	bne.n	8000ec8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_ADC_Init+0x84>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	f043 0202 	orr.w	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f964 	bl	8001178 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec6:	e001      	b.n	8000ecc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	ffffeefd 	.word	0xffffeefd

08000ee4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ee4:	b490      	push	{r4, r7}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d101      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1c>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e12c      	b.n	800115a <HAL_ADC_ConfigChannel+0x276>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d93b      	bls.n	8000f88 <HAL_ADC_ConfigChannel+0xa4>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f18:	d036      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0xa4>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68d9      	ldr	r1, [r3, #12]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4403      	add	r3, r0
 8000f32:	3b1e      	subs	r3, #30
 8000f34:	2007      	movs	r0, #7
 8000f36:	fa00 f303 	lsl.w	r3, r0, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	60d3      	str	r3, [r2, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_ADC_ConfigChannel+0x280>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10a      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	68d1      	ldr	r1, [r2, #12]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	6892      	ldr	r2, [r2, #8]
 8000f58:	0612      	lsls	r2, r2, #24
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f5e:	e037      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xec>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	6898      	ldr	r0, [r3, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	461c      	mov	r4, r3
 8000f76:	4623      	mov	r3, r4
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4423      	add	r3, r4
 8000f7c:	3b1e      	subs	r3, #30
 8000f7e:	fa00 f303 	lsl.w	r3, r0, r3
 8000f82:	430b      	orrs	r3, r1
 8000f84:	60d3      	str	r3, [r2, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f86:	e023      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xec>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6919      	ldr	r1, [r3, #16]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4403      	add	r3, r0
 8000fa0:	2007      	movs	r0, #7
 8000fa2:	fa00 f303 	lsl.w	r3, r0, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	400b      	ands	r3, r1
 8000faa:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	6898      	ldr	r0, [r3, #8]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	461c      	mov	r4, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4423      	add	r3, r4
 8000fc8:	fa00 f303 	lsl.w	r3, r0, r3
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d824      	bhi.n	8001022 <HAL_ADC_ConfigChannel+0x13e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	3b05      	subs	r3, #5
 8000fee:	221f      	movs	r2, #31
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4003      	ands	r3, r0
 8000ff8:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	461c      	mov	r4, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	3b05      	subs	r3, #5
 8001018:	fa04 f303 	lsl.w	r3, r4, r3
 800101c:	4303      	orrs	r3, r0
 800101e:	634b      	str	r3, [r1, #52]	; 0x34
 8001020:	e04c      	b.n	80010bc <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d824      	bhi.n	8001074 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	3b23      	subs	r3, #35	; 0x23
 8001040:	221f      	movs	r2, #31
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	4003      	ands	r3, r0
 800104a:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	461c      	mov	r4, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b23      	subs	r3, #35	; 0x23
 800106a:	fa04 f303 	lsl.w	r3, r4, r3
 800106e:	4303      	orrs	r3, r0
 8001070:	630b      	str	r3, [r1, #48]	; 0x30
 8001072:	e023      	b.n	80010bc <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	3b41      	subs	r3, #65	; 0x41
 800108a:	221f      	movs	r2, #31
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	4003      	ands	r3, r0
 8001094:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461c      	mov	r4, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	3b41      	subs	r3, #65	; 0x41
 80010b4:	fa04 f303 	lsl.w	r3, r4, r3
 80010b8:	4303      	orrs	r3, r0
 80010ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <HAL_ADC_ConfigChannel+0x284>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10a      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1f8>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010ce:	d105      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x1f8>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_ADC_ConfigChannel+0x288>)
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_ADC_ConfigChannel+0x288>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80010da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_ADC_ConfigChannel+0x284>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d109      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x216>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d105      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x216>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_ADC_ConfigChannel+0x288>)
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_ADC_ConfigChannel+0x288>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <HAL_ADC_ConfigChannel+0x284>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d125      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x26c>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <HAL_ADC_ConfigChannel+0x280>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d003      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x232>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b11      	cmp	r3, #17
 8001114:	d11c      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x26c>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <HAL_ADC_ConfigChannel+0x288>)
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_ADC_ConfigChannel+0x288>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001120:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_ADC_ConfigChannel+0x280>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d111      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x26c>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_ADC_ConfigChannel+0x28c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_ADC_ConfigChannel+0x290>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9a      	lsrs	r2, r3, #18
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001142:	e002      	b.n	800114a <HAL_ADC_ConfigChannel+0x266>
      {
        counter--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3b01      	subs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f9      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x260>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bc90      	pop	{r4, r7}
 8001162:	4770      	bx	lr
 8001164:	10000012 	.word	0x10000012
 8001168:	40012000 	.word	0x40012000
 800116c:	40012300 	.word	0x40012300
 8001170:	20000000 	.word	0x20000000
 8001174:	431bde83 	.word	0x431bde83

08001178 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001180:	4a78      	ldr	r2, [pc, #480]	; (8001364 <ADC_Init+0x1ec>)
 8001182:	4b78      	ldr	r3, [pc, #480]	; (8001364 <ADC_Init+0x1ec>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800118a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800118c:	4975      	ldr	r1, [pc, #468]	; (8001364 <ADC_Init+0x1ec>)
 800118e:	4b75      	ldr	r3, [pc, #468]	; (8001364 <ADC_Init+0x1ec>)
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	6852      	ldr	r2, [r2, #4]
 80011a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	6851      	ldr	r1, [r2, #4]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6912      	ldr	r2, [r2, #16]
 80011b8:	0212      	lsls	r2, r2, #8
 80011ba:	430a      	orrs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	6852      	ldr	r2, [r2, #4]
 80011c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	6851      	ldr	r1, [r2, #4]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6892      	ldr	r2, [r2, #8]
 80011dc:	430a      	orrs	r2, r1
 80011de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	6892      	ldr	r2, [r2, #8]
 80011ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	6891      	ldr	r1, [r2, #8]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68d2      	ldr	r2, [r2, #12]
 80011fe:	430a      	orrs	r2, r1
 8001200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <ADC_Init+0x1f0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d022      	beq.n	8001252 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	6892      	ldr	r2, [r2, #8]
 8001216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800121a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	6891      	ldr	r1, [r2, #8]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	6892      	ldr	r2, [r2, #8]
 8001238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800123c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	6891      	ldr	r1, [r2, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800124c:	430a      	orrs	r2, r1
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	e00f      	b.n	8001272 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	6892      	ldr	r2, [r2, #8]
 800125c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	6892      	ldr	r2, [r2, #8]
 800126c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001270:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	6892      	ldr	r2, [r2, #8]
 800127c:	f022 0202 	bic.w	r2, r2, #2
 8001280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	6891      	ldr	r1, [r2, #8]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6992      	ldr	r2, [r2, #24]
 8001290:	0052      	lsls	r2, r2, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	6852      	ldr	r2, [r2, #4]
 80012aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	6852      	ldr	r2, [r2, #4]
 80012ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	6851      	ldr	r1, [r2, #4]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012ce:	3a01      	subs	r2, #1
 80012d0:	0352      	lsls	r2, r2, #13
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	e007      	b.n	80012e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	6852      	ldr	r2, [r2, #4]
 80012e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	69d2      	ldr	r2, [r2, #28]
 8001306:	3a01      	subs	r2, #1
 8001308:	0512      	lsls	r2, r2, #20
 800130a:	430a      	orrs	r2, r1
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	6892      	ldr	r2, [r2, #8]
 8001318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800131c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	6891      	ldr	r1, [r2, #8]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800132e:	0252      	lsls	r2, r2, #9
 8001330:	430a      	orrs	r2, r1
 8001332:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	6892      	ldr	r2, [r2, #8]
 800133e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	6891      	ldr	r1, [r2, #8]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6952      	ldr	r2, [r2, #20]
 8001352:	0292      	lsls	r2, r2, #10
 8001354:	430a      	orrs	r2, r1
 8001356:	609a      	str	r2, [r3, #8]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40012300 	.word	0x40012300
 8001368:	0f000001 	.word	0x0f000001

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <__NVIC_SetPriorityGrouping+0x40>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	4313      	orrs	r3, r2
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x40>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00
 80013b0:	05fa0000 	.word	0x05fa0000

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	4909      	ldr	r1, [pc, #36]	; (8001408 <__NVIC_EnableIRQ+0x38>)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	f002 021f 	and.w	r2, r2, #31
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	490d      	ldr	r1, [pc, #52]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	4909      	ldr	r1, [pc, #36]	; (800145c <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	2201      	movs	r2, #1
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	401a      	ands	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a6:	2101      	movs	r1, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	1e59      	subs	r1, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff90 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff2b 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff40 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff33 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff fc54 	bl	8000e44 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d008      	beq.n	80015bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e052      	b.n	8001662 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f022 0216 	bic.w	r2, r2, #22
 80015ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	6952      	ldr	r2, [r2, #20]
 80015d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <HAL_DMA_Abort+0x62>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f022 0208 	bic.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800160c:	e013      	b.n	8001636 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800160e:	f7ff fc19 	bl	8000e44 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b05      	cmp	r3, #5
 800161a:	d90c      	bls.n	8001636 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e015      	b.n	8001662 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e4      	bne.n	800160e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	223f      	movs	r2, #63	; 0x3f
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d004      	beq.n	8001688 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e00c      	b.n	80016a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2205      	movs	r2, #5
 800168c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	f022 0201 	bic.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	e175      	b.n	80019bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f040 8164 	bne.w	80019b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d00b      	beq.n	800170e <HAL_GPIO_Init+0x5e>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001702:	2b11      	cmp	r3, #17
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b12      	cmp	r3, #18
 800170c:	d130      	bne.n	8001770 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 0201 	and.w	r2, r3, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x100>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d123      	bne.n	80017f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0203 	and.w	r2, r3, #3
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80be 	beq.w	80019b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <HAL_GPIO_Init+0x320>)
 800183c:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <HAL_GPIO_Init+0x320>)
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <HAL_GPIO_Init+0x320>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001852:	4a60      	ldr	r2, [pc, #384]	; (80019d4 <HAL_GPIO_Init+0x324>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_GPIO_Init+0x328>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d037      	beq.n	80018ee <HAL_GPIO_Init+0x23e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a56      	ldr	r2, [pc, #344]	; (80019dc <HAL_GPIO_Init+0x32c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d031      	beq.n	80018ea <HAL_GPIO_Init+0x23a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a55      	ldr	r2, [pc, #340]	; (80019e0 <HAL_GPIO_Init+0x330>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x236>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a54      	ldr	r2, [pc, #336]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <HAL_GPIO_Init+0x232>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a53      	ldr	r2, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x338>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01f      	beq.n	80018de <HAL_GPIO_Init+0x22e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_GPIO_Init+0x33c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x22a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_GPIO_Init+0x340>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_GPIO_Init+0x344>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x222>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_GPIO_Init+0x348>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x21e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_GPIO_Init+0x34c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x21a>
 80018c6:	2309      	movs	r3, #9
 80018c8:	e012      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ca:	230a      	movs	r3, #10
 80018cc:	e010      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ce:	2308      	movs	r3, #8
 80018d0:	e00e      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e00c      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e00a      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018da:	2305      	movs	r3, #5
 80018dc:	e008      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018de:	2304      	movs	r3, #4
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018e2:	2303      	movs	r3, #3
 80018e4:	e004      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ee:	2300      	movs	r3, #0
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	f002 0203 	and.w	r2, r2, #3
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4093      	lsls	r3, r2
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001900:	4934      	ldr	r1, [pc, #208]	; (80019d4 <HAL_GPIO_Init+0x324>)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001932:	4a33      	ldr	r2, [pc, #204]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001938:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_GPIO_Init+0x350>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195c:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x350>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_GPIO_Init+0x350>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b0:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <HAL_GPIO_Init+0x350>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3301      	adds	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	f67f ae86 	bls.w	80016d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019c4:	bf00      	nop
 80019c6:	3724      	adds	r7, #36	; 0x24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40021c00 	.word	0x40021c00
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40022400 	.word	0x40022400
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e291      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8087 	beq.w	8001b6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a5c:	4b96      	ldr	r3, [pc, #600]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d00c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a68:	4b93      	ldr	r3, [pc, #588]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d112      	bne.n	8001a9a <HAL_RCC_OscConfig+0x62>
 8001a74:	4b90      	ldr	r3, [pc, #576]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a80:	d10b      	bne.n	8001a9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a82:	4b8d      	ldr	r3, [pc, #564]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d06c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x130>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d168      	bne.n	8001b68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e26b      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x7a>
 8001aa4:	4a84      	ldr	r2, [pc, #528]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	4b84      	ldr	r3, [pc, #528]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e02e      	b.n	8001b10 <HAL_RCC_OscConfig+0xd8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x9c>
 8001aba:	4a7f      	ldr	r2, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001abc:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	4b7b      	ldr	r3, [pc, #492]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xd8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0xc0>
 8001ade:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4a73      	ldr	r2, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001aec:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xd8>
 8001af8:	4a6f      	ldr	r2, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001afa:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b06:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f994 	bl	8000e44 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f990 	bl	8000e44 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e21f      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xe8>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f980 	bl	8000e44 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f97c 	bl	8000e44 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e20b      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x110>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d069      	beq.n	8001c4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b82:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d11c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x190>
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x17a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e1df      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4941      	ldr	r1, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	e040      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f932 	bl	8000e44 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff f92e 	bl	8000e44 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1bd      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	492d      	ldr	r1, [pc, #180]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c18:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff f90e 	bl	8000e44 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f90a 	bl	8000e44 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e199      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d038      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d019      	beq.n	8001c92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6a:	f7ff f8eb 	bl	8000e44 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c72:	f7ff f8e7 	bl	8000e44 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e176      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x23a>
 8001c90:	e01a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_RCC_OscConfig+0x280>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f8d1 	bl	8000e44 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f8cd 	bl	8000e44 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d903      	bls.n	8001cbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e15c      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
 8001cb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b91      	ldr	r3, [pc, #580]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a4 	beq.w	8001e1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10d      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4a88      	ldr	r2, [pc, #544]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	4b87      	ldr	r3, [pc, #540]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b85      	ldr	r3, [pc, #532]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfe:	4b82      	ldr	r3, [pc, #520]	; (8001f08 <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d0a:	4a7f      	ldr	r2, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	4b7e      	ldr	r3, [pc, #504]	; (8001f08 <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff f895 	bl	8000e44 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff f891 	bl	8000e44 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	; 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e120      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d30:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <HAL_RCC_OscConfig+0x4d0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x31a>
 8001d44:	4a6f      	ldr	r2, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	e02d      	b.n	8001dae <HAL_RCC_OscConfig+0x376>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x33c>
 8001d5a:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	e01c      	b.n	8001dae <HAL_RCC_OscConfig+0x376>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x35e>
 8001d7c:	4a61      	ldr	r2, [pc, #388]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
 8001d94:	e00b      	b.n	8001dae <HAL_RCC_OscConfig+0x376>
 8001d96:	4a5b      	ldr	r2, [pc, #364]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
 8001da2:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001da4:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7ff f845 	bl	8000e44 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f841 	bl	8000e44 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0ce      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	4b4b      	ldr	r3, [pc, #300]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ee      	beq.n	8001dbe <HAL_RCC_OscConfig+0x386>
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff f82f 	bl	8000e44 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff f82b 	bl	8000e44 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0b8      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80a4 	beq.w	8001f70 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d06b      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d149      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4a31      	ldr	r2, [pc, #196]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe fffc 	bl	8000e44 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe fff8 	bl	8000e44 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e087      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6e:	4925      	ldr	r1, [pc, #148]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	019b      	lsls	r3, r3, #6
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	041b      	lsls	r3, r3, #16
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7fe ffcc 	bl	8000e44 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe ffc8 	bl	8000e44 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e057      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x478>
 8001ece:	e04f      	b.n	8001f70 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe ffb2 	bl	8000e44 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe ffae 	bl	8000e44 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e03d      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_RCC_OscConfig+0x4cc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4ac>
 8001f02:	e035      	b.n	8001f70 <HAL_RCC_OscConfig+0x538>
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x544>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d028      	beq.n	8001f6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d121      	bne.n	8001f6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d11a      	bne.n	8001f6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d111      	bne.n	8001f6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	3b01      	subs	r3, #1
 8001f56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0d0      	b.n	800213a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d210      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4967      	ldr	r1, [pc, #412]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 020f 	bic.w	r2, r3, #15
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 020f 	and.w	r2, r3, #15
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b8      	b.n	800213a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe0:	4a59      	ldr	r2, [pc, #356]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe2:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff8:	4a53      	ldr	r2, [pc, #332]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002002:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4950      	ldr	r1, [pc, #320]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d040      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e07f      	b.n	800213a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e073      	b.n	800213a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e06b      	b.n	800213a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4939      	ldr	r1, [pc, #228]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002064:	4b38      	ldr	r3, [pc, #224]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 0203 	bic.w	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002074:	f7fe fee6 	bl	8000e44 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7fe fee2 	bl	8000e44 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e053      	b.n	800213a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d910      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4924      	ldr	r1, [pc, #144]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 020f 	bic.w	r2, r3, #15
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 020f 	and.w	r2, r3, #15
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e032      	b.n	800213a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e0:	4919      	ldr	r1, [pc, #100]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fe:	4912      	ldr	r1, [pc, #72]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002112:	f000 f821 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002116:	4601      	mov	r1, r0
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_RCC_ClockConfig+0x1cc>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	fa21 f303 	lsr.w	r3, r1, r3
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1d0>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1d4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fe42 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00
 8002148:	40023800 	.word	0x40023800
 800214c:	08005020 	.word	0x08005020
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800215c:	b087      	sub	sp, #28
 800215e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002160:	2200      	movs	r2, #0
 8002162:	60fa      	str	r2, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	617a      	str	r2, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 800216c:	2200      	movs	r2, #0
 800216e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002170:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	f002 020c 	and.w	r2, r2, #12
 8002178:	2a04      	cmp	r2, #4
 800217a:	d007      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x34>
 800217c:	2a08      	cmp	r2, #8
 800217e:	d008      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0x3a>
 8002180:	2a00      	cmp	r2, #0
 8002182:	f040 8090 	bne.w	80022a6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002186:	4b4d      	ldr	r3, [pc, #308]	; (80022bc <HAL_RCC_GetSysClockFreq+0x164>)
 8002188:	613b      	str	r3, [r7, #16]
      break;
 800218a:	e08f      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x168>)
 800218e:	613b      	str	r3, [r7, #16]
      break;
 8002190:	e08c      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002192:	4a49      	ldr	r2, [pc, #292]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002194:	6852      	ldr	r2, [r2, #4]
 8002196:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800219a:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800219c:	4a46      	ldr	r2, [pc, #280]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800219e:	6852      	ldr	r2, [r2, #4]
 80021a0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d023      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a8:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	ea03 0301 	and.w	r3, r3, r1
 80021be:	ea04 0402 	and.w	r4, r4, r2
 80021c2:	4a3f      	ldr	r2, [pc, #252]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80021c4:	fb02 f104 	mul.w	r1, r2, r4
 80021c8:	2200      	movs	r2, #0
 80021ca:	fb02 f203 	mul.w	r2, r2, r3
 80021ce:	440a      	add	r2, r1
 80021d0:	493b      	ldr	r1, [pc, #236]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80021d2:	fba3 0101 	umull	r0, r1, r3, r1
 80021d6:	1853      	adds	r3, r2, r1
 80021d8:	4619      	mov	r1, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f04f 0400 	mov.w	r4, #0
 80021e0:	461a      	mov	r2, r3
 80021e2:	4623      	mov	r3, r4
 80021e4:	f7fe f810 	bl	8000208 <__aeabi_uldivmod>
 80021e8:	4603      	mov	r3, r0
 80021ea:	460c      	mov	r4, r1
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e04c      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f0:	4a31      	ldr	r2, [pc, #196]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80021f2:	6852      	ldr	r2, [r2, #4]
 80021f4:	0992      	lsrs	r2, r2, #6
 80021f6:	4611      	mov	r1, r2
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002200:	f04f 0600 	mov.w	r6, #0
 8002204:	ea05 0501 	and.w	r5, r5, r1
 8002208:	ea06 0602 	and.w	r6, r6, r2
 800220c:	4629      	mov	r1, r5
 800220e:	4632      	mov	r2, r6
 8002210:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002214:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002218:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800221c:	4651      	mov	r1, sl
 800221e:	465a      	mov	r2, fp
 8002220:	46aa      	mov	sl, r5
 8002222:	46b3      	mov	fp, r6
 8002224:	4655      	mov	r5, sl
 8002226:	465e      	mov	r6, fp
 8002228:	1b4d      	subs	r5, r1, r5
 800222a:	eb62 0606 	sbc.w	r6, r2, r6
 800222e:	4629      	mov	r1, r5
 8002230:	4632      	mov	r2, r6
 8002232:	0194      	lsls	r4, r2, #6
 8002234:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002238:	018b      	lsls	r3, r1, #6
 800223a:	1a5b      	subs	r3, r3, r1
 800223c:	eb64 0402 	sbc.w	r4, r4, r2
 8002240:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002244:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002248:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800224c:	4643      	mov	r3, r8
 800224e:	464c      	mov	r4, r9
 8002250:	4655      	mov	r5, sl
 8002252:	465e      	mov	r6, fp
 8002254:	18ed      	adds	r5, r5, r3
 8002256:	eb46 0604 	adc.w	r6, r6, r4
 800225a:	462b      	mov	r3, r5
 800225c:	4634      	mov	r4, r6
 800225e:	02a2      	lsls	r2, r4, #10
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	029b      	lsls	r3, r3, #10
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002272:	4618      	mov	r0, r3
 8002274:	4621      	mov	r1, r4
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	f7fd ffc2 	bl	8000208 <__aeabi_uldivmod>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	3301      	adds	r3, #1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	613b      	str	r3, [r7, #16]
      break;
 80022a4:	e002      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetSysClockFreq+0x164>)
 80022a8:	613b      	str	r3, [r7, #16]
      break;
 80022aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ac:	693b      	ldr	r3, [r7, #16]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	017d7840 	.word	0x017d7840

080022c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e4:	4601      	mov	r1, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	08005030 	.word	0x08005030

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002308:	f7ff ffdc 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 800230c:	4601      	mov	r1, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0b5b      	lsrs	r3, r3, #13
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4a03      	ldr	r2, [pc, #12]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	08005030 	.word	0x08005030

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002354:	4a69      	ldr	r2, [pc, #420]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002356:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800235e:	6093      	str	r3, [r2, #8]
 8002360:	4966      	ldr	r1, [pc, #408]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002362:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d017      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002386:	495d      	ldr	r1, [pc, #372]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a4:	d101      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d017      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c2:	494e      	ldr	r1, [pc, #312]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c4:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e0:	d101      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 808b 	beq.w	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4a3a      	ldr	r2, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
 800241c:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002428:	4a35      	ldr	r2, [pc, #212]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe fd06 	bl	8000e44 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7fe fd02 	bl	8000e44 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e357      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d035      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d02e      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002480:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248e:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d114      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fcca 	bl	8000e44 <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fcc6 	bl	8000e44 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e319      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e2:	d111      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024f4:	400b      	ands	r3, r1
 80024f6:	4313      	orrs	r3, r2
 80024f8:	6083      	str	r3, [r0, #8]
 80024fa:	e00b      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	0ffffcff 	.word	0x0ffffcff
 8002508:	4ab1      	ldr	r2, [pc, #708]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800250a:	4bb1      	ldr	r3, [pc, #708]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002512:	6093      	str	r3, [r2, #8]
 8002514:	49ae      	ldr	r1, [pc, #696]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002516:	4bae      	ldr	r3, [pc, #696]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002522:	4313      	orrs	r3, r2
 8002524:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d010      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002532:	4aa7      	ldr	r2, [pc, #668]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002534:	4ba6      	ldr	r3, [pc, #664]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800253e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002542:	49a3      	ldr	r1, [pc, #652]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002544:	4ba2      	ldr	r3, [pc, #648]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002546:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002560:	499b      	ldr	r1, [pc, #620]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002562:	4b9b      	ldr	r3, [pc, #620]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002582:	4993      	ldr	r1, [pc, #588]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002584:	4b92      	ldr	r3, [pc, #584]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a4:	498a      	ldr	r1, [pc, #552]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025a6:	4b8a      	ldr	r3, [pc, #552]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025c6:	4982      	ldr	r1, [pc, #520]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025c8:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e8:	4979      	ldr	r1, [pc, #484]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f023 0203 	bic.w	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800260a:	4971      	ldr	r1, [pc, #452]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800260c:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f023 020c 	bic.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262c:	4968      	ldr	r1, [pc, #416]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800262e:	4b68      	ldr	r3, [pc, #416]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800264e:	4960      	ldr	r1, [pc, #384]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002650:	4b5f      	ldr	r3, [pc, #380]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002670:	4957      	ldr	r1, [pc, #348]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002692:	494f      	ldr	r1, [pc, #316]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002694:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026b4:	4946      	ldr	r1, [pc, #280]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026b6:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026d6:	493e      	ldr	r1, [pc, #248]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026f8:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026fa:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d011      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800271a:	492d      	ldr	r1, [pc, #180]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800271c:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002738:	d101      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800275a:	491d      	ldr	r1, [pc, #116]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277c:	4914      	ldr	r1, [pc, #80]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d006      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80d9 	beq.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027a8:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7fe fb46 	bl	8000e44 <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027ba:	e00b      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027bc:	f7fe fb42 	bl	8000e44 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d904      	bls.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e197      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d4:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ed      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d021      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11d      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027f4:	4b64      	ldr	r3, [pc, #400]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002802:	4b61      	ldr	r3, [pc, #388]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002808:	0e1b      	lsrs	r3, r3, #24
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002810:	495d      	ldr	r1, [pc, #372]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	019a      	lsls	r2, r3, #6
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02e      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285a:	d129      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800285c:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002870:	0f1b      	lsrs	r3, r3, #28
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002878:	4943      	ldr	r1, [pc, #268]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	019a      	lsls	r2, r3, #6
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	061b      	lsls	r3, r3, #24
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	071b      	lsls	r3, r3, #28
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002898:	493b      	ldr	r1, [pc, #236]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a0:	f023 021f 	bic.w	r2, r3, #31
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	3b01      	subs	r3, #1
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01d      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c2:	0e1b      	lsrs	r3, r3, #24
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d0:	0f1b      	lsrs	r3, r3, #28
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028d8:	492b      	ldr	r1, [pc, #172]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	019a      	lsls	r2, r3, #6
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	431a      	orrs	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	071b      	lsls	r3, r3, #28
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d011      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002904:	4920      	ldr	r1, [pc, #128]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	019a      	lsls	r2, r3, #6
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	071b      	lsls	r3, r3, #28
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7fe fa86 	bl	8000e44 <HAL_GetTick>
 8002938:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800293c:	f7fe fa82 	bl	8000e44 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0d7      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b01      	cmp	r3, #1
 800295e:	f040 80cd 	bne.w	8002afc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296e:	f7fe fa69 	bl	8000e44 <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002976:	f7fe fa65 	bl	8000e44 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	; 0x64
 8002982:	d903      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0ba      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002988:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800298c:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002998:	d0ed      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d02e      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d12a      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029d0:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	0f1b      	lsrs	r3, r3, #28
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029de:	494a      	ldr	r1, [pc, #296]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	019a      	lsls	r2, r3, #6
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	431a      	orrs	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	071b      	lsls	r3, r3, #28
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029fe:	4942      	ldr	r1, [pc, #264]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a00:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a06:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d022      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2c:	d11d      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	0e1b      	lsrs	r3, r3, #24
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a3c:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	0f1b      	lsrs	r3, r3, #28
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a4a:	492f      	ldr	r1, [pc, #188]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	019a      	lsls	r2, r3, #6
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	071b      	lsls	r3, r3, #28
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	0e1b      	lsrs	r3, r3, #24
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a92:	491d      	ldr	r1, [pc, #116]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	019a      	lsls	r2, r3, #6
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	071b      	lsls	r3, r3, #28
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ab2:	4915      	ldr	r1, [pc, #84]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad4:	f7fe f9b6 	bl	8000e44 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002adc:	f7fe f9b2 	bl	8000e44 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e007      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afa:	d1ef      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e049      	b.n	8002bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd fff0 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f000 fcf2 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e049      	b.n	8002c60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f841 	bl	8002c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 fc9b 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_TIM_PWM_Start_IT+0x24>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e03c      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x9e>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d109      	bne.n	8002cba <HAL_TIM_PWM_Start_IT+0x3e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	e02f      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x9e>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d109      	bne.n	8002cd4 <HAL_TIM_PWM_Start_IT+0x58>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e022      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x9e>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d109      	bne.n	8002cee <HAL_TIM_PWM_Start_IT+0x72>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e015      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x9e>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d109      	bne.n	8002d08 <HAL_TIM_PWM_Start_IT+0x8c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e008      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x9e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0d8      	b.n	8002ed4 <HAL_TIM_PWM_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_PWM_Start_IT+0xb6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d30:	e023      	b.n	8002d7a <HAL_TIM_PWM_Start_IT+0xfe>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_PWM_Start_IT+0xc6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	e01b      	b.n	8002d7a <HAL_TIM_PWM_Start_IT+0xfe>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_PWM_Start_IT+0xd6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d50:	e013      	b.n	8002d7a <HAL_TIM_PWM_Start_IT+0xfe>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_PWM_Start_IT+0xe6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d60:	e00b      	b.n	8002d7a <HAL_TIM_PWM_Start_IT+0xfe>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_PWM_Start_IT+0xf6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	e003      	b.n	8002d7a <HAL_TIM_PWM_Start_IT+0xfe>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d841      	bhi.n	8002e04 <HAL_TIM_PWM_Start_IT+0x188>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <HAL_TIM_PWM_Start_IT+0x10c>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002e05 	.word	0x08002e05
 8002d90:	08002e05 	.word	0x08002e05
 8002d94:	08002e05 	.word	0x08002e05
 8002d98:	08002dcf 	.word	0x08002dcf
 8002d9c:	08002e05 	.word	0x08002e05
 8002da0:	08002e05 	.word	0x08002e05
 8002da4:	08002e05 	.word	0x08002e05
 8002da8:	08002de1 	.word	0x08002de1
 8002dac:	08002e05 	.word	0x08002e05
 8002db0:	08002e05 	.word	0x08002e05
 8002db4:	08002e05 	.word	0x08002e05
 8002db8:	08002df3 	.word	0x08002df3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	68d2      	ldr	r2, [r2, #12]
 8002dc6:	f042 0202 	orr.w	r2, r2, #2
 8002dca:	60da      	str	r2, [r3, #12]
      break;
 8002dcc:	e01b      	b.n	8002e06 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	68d2      	ldr	r2, [r2, #12]
 8002dd8:	f042 0204 	orr.w	r2, r2, #4
 8002ddc:	60da      	str	r2, [r3, #12]
      break;
 8002dde:	e012      	b.n	8002e06 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	f042 0208 	orr.w	r2, r2, #8
 8002dee:	60da      	str	r2, [r3, #12]
      break;
 8002df0:	e009      	b.n	8002e06 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	68d2      	ldr	r2, [r2, #12]
 8002dfc:	f042 0210 	orr.w	r2, r2, #16
 8002e00:	60da      	str	r2, [r3, #12]
      break;
 8002e02:	e000      	b.n	8002e06 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8002e04:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	6839      	ldr	r1, [r7, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 ff28 	bl	8003c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a30      	ldr	r2, [pc, #192]	; (8002edc <HAL_TIM_PWM_Start_IT+0x260>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_TIM_PWM_Start_IT+0x1ac>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2f      	ldr	r2, [pc, #188]	; (8002ee0 <HAL_TIM_PWM_Start_IT+0x264>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_TIM_PWM_Start_IT+0x1b0>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_TIM_PWM_Start_IT+0x1b2>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_TIM_PWM_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a25      	ldr	r2, [pc, #148]	; (8002edc <HAL_TIM_PWM_Start_IT+0x260>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <HAL_TIM_PWM_Start_IT+0x216>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d01d      	beq.n	8002e92 <HAL_TIM_PWM_Start_IT+0x216>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <HAL_TIM_PWM_Start_IT+0x268>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d018      	beq.n	8002e92 <HAL_TIM_PWM_Start_IT+0x216>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a20      	ldr	r2, [pc, #128]	; (8002ee8 <HAL_TIM_PWM_Start_IT+0x26c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_TIM_PWM_Start_IT+0x216>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <HAL_TIM_PWM_Start_IT+0x270>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <HAL_TIM_PWM_Start_IT+0x216>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_TIM_PWM_Start_IT+0x264>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_TIM_PWM_Start_IT+0x216>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <HAL_TIM_PWM_Start_IT+0x274>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_TIM_PWM_Start_IT+0x216>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_TIM_PWM_Start_IT+0x278>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d115      	bne.n	8002ebe <HAL_TIM_PWM_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_TIM_PWM_Start_IT+0x27c>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b06      	cmp	r3, #6
 8002ea2:	d015      	beq.n	8002ed0 <HAL_TIM_PWM_Start_IT+0x254>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eaa:	d011      	beq.n	8002ed0 <HAL_TIM_PWM_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	e008      	b.n	8002ed0 <HAL_TIM_PWM_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e000      	b.n	8002ed2 <HAL_TIM_PWM_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40010400 	.word	0x40010400
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40001800 	.word	0x40001800
 8002ef8:	00010007 	.word	0x00010007

08002efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0202 	mvn.w	r2, #2
 8002f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fada 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 facc 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fadd 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0204 	mvn.w	r2, #4
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fab0 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 faa2 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fab3 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d122      	bne.n	8003000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d11b      	bne.n	8003000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0208 	mvn.w	r2, #8
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa86 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa78 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa89 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b10      	cmp	r3, #16
 800300c:	d122      	bne.n	8003054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b10      	cmp	r3, #16
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0210 	mvn.w	r2, #16
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2208      	movs	r2, #8
 800302a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa5c 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa4e 	bl	80034e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fa5f 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d107      	bne.n	8003080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0201 	mvn.w	r2, #1
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa28 	bl	80034d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d10e      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b80      	cmp	r3, #128	; 0x80
 800309a:	d107      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fe9a 	bl	8003de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ba:	d10e      	bne.n	80030da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d107      	bne.n	80030da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fe8d 	bl	8003df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d10e      	bne.n	8003106 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d107      	bne.n	8003106 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fa0d 	bl	8003520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b20      	cmp	r3, #32
 8003112:	d10e      	bne.n	8003132 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b20      	cmp	r3, #32
 8003120:	d107      	bne.n	8003132 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f06f 0220 	mvn.w	r2, #32
 800312a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fe4d 	bl	8003dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003152:	2302      	movs	r3, #2
 8003154:	e0fd      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b14      	cmp	r3, #20
 8003162:	f200 80f0 	bhi.w	8003346 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003166:	a201      	add	r2, pc, #4	; (adr r2, 800316c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	080031c1 	.word	0x080031c1
 8003170:	08003347 	.word	0x08003347
 8003174:	08003347 	.word	0x08003347
 8003178:	08003347 	.word	0x08003347
 800317c:	08003201 	.word	0x08003201
 8003180:	08003347 	.word	0x08003347
 8003184:	08003347 	.word	0x08003347
 8003188:	08003347 	.word	0x08003347
 800318c:	08003243 	.word	0x08003243
 8003190:	08003347 	.word	0x08003347
 8003194:	08003347 	.word	0x08003347
 8003198:	08003347 	.word	0x08003347
 800319c:	08003283 	.word	0x08003283
 80031a0:	08003347 	.word	0x08003347
 80031a4:	08003347 	.word	0x08003347
 80031a8:	08003347 	.word	0x08003347
 80031ac:	080032c5 	.word	0x080032c5
 80031b0:	08003347 	.word	0x08003347
 80031b4:	08003347 	.word	0x08003347
 80031b8:	08003347 	.word	0x08003347
 80031bc:	08003305 	.word	0x08003305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fa54 	bl	8003674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	6992      	ldr	r2, [r2, #24]
 80031d6:	f042 0208 	orr.w	r2, r2, #8
 80031da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	6992      	ldr	r2, [r2, #24]
 80031e6:	f022 0204 	bic.w	r2, r2, #4
 80031ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	6991      	ldr	r1, [r2, #24]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	6912      	ldr	r2, [r2, #16]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	619a      	str	r2, [r3, #24]
      break;
 80031fe:	e0a3      	b.n	8003348 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 faa6 	bl	8003758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	6992      	ldr	r2, [r2, #24]
 8003216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	6992      	ldr	r2, [r2, #24]
 8003226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	6991      	ldr	r1, [r2, #24]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	6912      	ldr	r2, [r2, #16]
 800323a:	0212      	lsls	r2, r2, #8
 800323c:	430a      	orrs	r2, r1
 800323e:	619a      	str	r2, [r3, #24]
      break;
 8003240:	e082      	b.n	8003348 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fafd 	bl	8003848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	69d2      	ldr	r2, [r2, #28]
 8003258:	f042 0208 	orr.w	r2, r2, #8
 800325c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	69d2      	ldr	r2, [r2, #28]
 8003268:	f022 0204 	bic.w	r2, r2, #4
 800326c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	69d1      	ldr	r1, [r2, #28]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	6912      	ldr	r2, [r2, #16]
 800327c:	430a      	orrs	r2, r1
 800327e:	61da      	str	r2, [r3, #28]
      break;
 8003280:	e062      	b.n	8003348 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fb53 	bl	8003934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	69d2      	ldr	r2, [r2, #28]
 8003298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	69d2      	ldr	r2, [r2, #28]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	69d1      	ldr	r1, [r2, #28]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	6912      	ldr	r2, [r2, #16]
 80032bc:	0212      	lsls	r2, r2, #8
 80032be:	430a      	orrs	r2, r1
 80032c0:	61da      	str	r2, [r3, #28]
      break;
 80032c2:	e041      	b.n	8003348 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fb8a 	bl	80039e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032da:	f042 0208 	orr.w	r2, r2, #8
 80032de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032ea:	f022 0204 	bic.w	r2, r2, #4
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	6912      	ldr	r2, [r2, #16]
 80032fe:	430a      	orrs	r2, r1
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003302:	e021      	b.n	8003348 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fbbc 	bl	8003a88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800331a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800332a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	6912      	ldr	r2, [r2, #16]
 800333e:	0212      	lsls	r2, r2, #8
 8003340:	430a      	orrs	r2, r1
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003344:	e000      	b.n	8003348 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003346:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop

0800335c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIM_ConfigClockSource+0x18>
 8003370:	2302      	movs	r3, #2
 8003372:	e0a6      	b.n	80034c2 <HAL_TIM_ConfigClockSource+0x166>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <HAL_TIM_ConfigClockSource+0x170>)
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d067      	beq.n	800347c <HAL_TIM_ConfigClockSource+0x120>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d80b      	bhi.n	80033c8 <HAL_TIM_ConfigClockSource+0x6c>
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d073      	beq.n	800349c <HAL_TIM_ConfigClockSource+0x140>
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d802      	bhi.n	80033be <HAL_TIM_ConfigClockSource+0x62>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d06f      	beq.n	800349c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033bc:	e078      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d06c      	beq.n	800349c <HAL_TIM_ConfigClockSource+0x140>
 80033c2:	2b30      	cmp	r3, #48	; 0x30
 80033c4:	d06a      	beq.n	800349c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033c6:	e073      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033c8:	2b70      	cmp	r3, #112	; 0x70
 80033ca:	d00d      	beq.n	80033e8 <HAL_TIM_ConfigClockSource+0x8c>
 80033cc:	2b70      	cmp	r3, #112	; 0x70
 80033ce:	d804      	bhi.n	80033da <HAL_TIM_ConfigClockSource+0x7e>
 80033d0:	2b50      	cmp	r3, #80	; 0x50
 80033d2:	d033      	beq.n	800343c <HAL_TIM_ConfigClockSource+0xe0>
 80033d4:	2b60      	cmp	r3, #96	; 0x60
 80033d6:	d041      	beq.n	800345c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80033d8:	e06a      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d066      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x152>
 80033e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e4:	d017      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033e6:	e063      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f000 fc14 	bl	8003c24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800340a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]
      break;
 8003414:	e04c      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f000 fbfd 	bl	8003c24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	6892      	ldr	r2, [r2, #8]
 8003434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003438:	609a      	str	r2, [r3, #8]
      break;
 800343a:	e039      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	461a      	mov	r2, r3
 800344a:	f000 fb71 	bl	8003b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2150      	movs	r1, #80	; 0x50
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fbca 	bl	8003bee <TIM_ITRx_SetConfig>
      break;
 800345a:	e029      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	461a      	mov	r2, r3
 800346a:	f000 fb90 	bl	8003b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2160      	movs	r1, #96	; 0x60
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fbba 	bl	8003bee <TIM_ITRx_SetConfig>
      break;
 800347a:	e019      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	461a      	mov	r2, r3
 800348a:	f000 fb51 	bl	8003b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2140      	movs	r1, #64	; 0x40
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fbaa 	bl	8003bee <TIM_ITRx_SetConfig>
      break;
 800349a:	e009      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f000 fba1 	bl	8003bee <TIM_ITRx_SetConfig>
        break;
 80034ac:	e000      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	fffeff88 	.word	0xfffeff88

080034d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <TIM_Base_SetConfig+0x114>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d00f      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <TIM_Base_SetConfig+0x118>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <TIM_Base_SetConfig+0x11c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <TIM_Base_SetConfig+0x120>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <TIM_Base_SetConfig+0x124>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <TIM_Base_SetConfig+0x114>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d027      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <TIM_Base_SetConfig+0x118>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d023      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <TIM_Base_SetConfig+0x11c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01f      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <TIM_Base_SetConfig+0x120>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <TIM_Base_SetConfig+0x124>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d017      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <TIM_Base_SetConfig+0x128>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <TIM_Base_SetConfig+0x12c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <TIM_Base_SetConfig+0x130>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0x134>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <TIM_Base_SetConfig+0x138>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a23      	ldr	r2, [pc, #140]	; (8003670 <TIM_Base_SetConfig+0x13c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0xf8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <TIM_Base_SetConfig+0x124>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	615a      	str	r2, [r3, #20]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800
 8003668:	40001800 	.word	0x40001800
 800366c:	40001c00 	.word	0x40001c00
 8003670:	40002000 	.word	0x40002000

08003674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0201 	bic.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <TIM_OC1_SetConfig+0xd8>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 0302 	bic.w	r3, r3, #2
 80036bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <TIM_OC1_SetConfig+0xdc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_OC1_SetConfig+0x64>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a20      	ldr	r2, [pc, #128]	; (8003754 <TIM_OC1_SetConfig+0xe0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10c      	bne.n	80036f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0308 	bic.w	r3, r3, #8
 80036de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a16      	ldr	r2, [pc, #88]	; (8003750 <TIM_OC1_SetConfig+0xdc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_OC1_SetConfig+0x8e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <TIM_OC1_SetConfig+0xe0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	fffeff8f 	.word	0xfffeff8f
 8003750:	40010000 	.word	0x40010000
 8003754:	40010400 	.word	0x40010400

08003758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0210 	bic.w	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4b2e      	ldr	r3, [pc, #184]	; (800383c <TIM_OC2_SetConfig+0xe4>)
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a23      	ldr	r2, [pc, #140]	; (8003840 <TIM_OC2_SetConfig+0xe8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC2_SetConfig+0x68>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a22      	ldr	r2, [pc, #136]	; (8003844 <TIM_OC2_SetConfig+0xec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10d      	bne.n	80037dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <TIM_OC2_SetConfig+0xe8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_OC2_SetConfig+0x94>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <TIM_OC2_SetConfig+0xec>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d113      	bne.n	8003814 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	feff8fff 	.word	0xfeff8fff
 8003840:	40010000 	.word	0x40010000
 8003844:	40010400 	.word	0x40010400

08003848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <TIM_OC3_SetConfig+0xe0>)
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <TIM_OC3_SetConfig+0xe4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_OC3_SetConfig+0x66>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a21      	ldr	r2, [pc, #132]	; (8003930 <TIM_OC3_SetConfig+0xe8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10d      	bne.n	80038ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <TIM_OC3_SetConfig+0xe4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_OC3_SetConfig+0x92>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a16      	ldr	r2, [pc, #88]	; (8003930 <TIM_OC3_SetConfig+0xe8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d113      	bne.n	8003902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	fffeff8f 	.word	0xfffeff8f
 800392c:	40010000 	.word	0x40010000
 8003930:	40010400 	.word	0x40010400

08003934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <TIM_OC4_SetConfig+0xa4>)
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800397e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	031b      	lsls	r3, r3, #12
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a13      	ldr	r2, [pc, #76]	; (80039dc <TIM_OC4_SetConfig+0xa8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_OC4_SetConfig+0x68>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <TIM_OC4_SetConfig+0xac>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d109      	bne.n	80039b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	feff8fff 	.word	0xfeff8fff
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40010400 	.word	0x40010400

080039e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <TIM_OC5_SetConfig+0x98>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <TIM_OC5_SetConfig+0x9c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_OC5_SetConfig+0x5e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a11      	ldr	r2, [pc, #68]	; (8003a84 <TIM_OC5_SetConfig+0xa0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d109      	bne.n	8003a56 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	621a      	str	r2, [r3, #32]
}
 8003a70:	bf00      	nop
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	fffeff8f 	.word	0xfffeff8f
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40010400 	.word	0x40010400

08003a88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <TIM_OC6_SetConfig+0x9c>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	051b      	lsls	r3, r3, #20
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <TIM_OC6_SetConfig+0xa0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC6_SetConfig+0x60>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <TIM_OC6_SetConfig+0xa4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d109      	bne.n	8003afc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	029b      	lsls	r3, r3, #10
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	feff8fff 	.word	0xfeff8fff
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400

08003b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0201 	bic.w	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 030a 	bic.w	r3, r3, #10
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0210 	bic.w	r2, r3, #16
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	031b      	lsls	r3, r3, #12
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f043 0307 	orr.w	r3, r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	021a      	lsls	r2, r3, #8
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	609a      	str	r2, [r3, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2201      	movs	r2, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	401a      	ands	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e06d      	b.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d108      	bne.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d022      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d01d      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d018      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00e      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d009      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10c      	bne.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40000c00 	.word	0x40000c00
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40001800 	.word	0x40001800

08003dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e040      	b.n	8003e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc ff12 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fafe 	bl	8004448 <UART_SetConfig>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e022      	b.n	8003e9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fd52 	bl	8004908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	6892      	ldr	r2, [r2, #8]
 8003e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fdd9 	bl	8004a4c <UART_CheckIdleState>
 8003e9a:	4603      	mov	r3, r0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d17f      	bne.n	8003fbc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_UART_Transmit+0x24>
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e078      	b.n	8003fbe <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Transmit+0x36>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e071      	b.n	8003fbe <HAL_UART_Transmit+0x11a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2221      	movs	r2, #33	; 0x21
 8003eee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef0:	f7fc ffa8 	bl	8000e44 <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	88fa      	ldrh	r2, [r7, #6]
 8003efa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d108      	bne.n	8003f22 <HAL_UART_Transmit+0x7e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e003      	b.n	8003f2a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f32:	e02b      	b.n	8003f8c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fdb7 	bl	8004ab2 <UART_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e037      	b.n	8003fbe <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	8812      	ldrh	r2, [r2, #0]
 8003f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	3302      	adds	r3, #2
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	e007      	b.n	8003f7a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3301      	adds	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1cd      	bne.n	8003f34 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fd85 	bl	8004ab2 <UART_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e005      	b.n	8003fbe <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d12c      	bne.n	8004036 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_UART_Receive_IT+0x22>
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e025      	b.n	8004038 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Receive_IT+0x34>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e01e      	b.n	8004038 <HAL_UART_Receive_IT+0x72>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004024:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	461a      	mov	r2, r3
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fdbd 	bl	8004bac <UART_Start_Receive_IT>
 8004032:	4603      	mov	r3, r0
 8004034:	e000      	b.n	8004038 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f640 030f 	movw	r3, #2063	; 0x80f
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d113      	bne.n	8004098 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 81ba 	beq.w	8004402 <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
      }
      return;
 8004096:	e1b4      	b.n	8004402 <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80e3 	beq.w	8004266 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4ba5      	ldr	r3, [pc, #660]	; (8004344 <HAL_UART_IRQHandler+0x304>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80d8 	beq.w	8004266 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <HAL_UART_IRQHandler+0xa2>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2201      	movs	r2, #1
 80040d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <HAL_UART_IRQHandler+0xce>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2202      	movs	r2, #2
 80040fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_UART_IRQHandler+0xfa>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004130:	f043 0202 	orr.w	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2208      	movs	r2, #8
 800415e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004166:	f043 0208 	orr.w	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004176:	2b00      	cmp	r3, #0
 8004178:	d011      	beq.n	800419e <HAL_UART_IRQHandler+0x15e>
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800418c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 812e 	beq.w	8004406 <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d004      	beq.n	80041ee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d031      	beq.n	8004252 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fd64 	bl	8004cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d123      	bne.n	800424a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004210:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	2b00      	cmp	r3, #0
 8004218:	d013      	beq.n	8004242 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a4a      	ldr	r2, [pc, #296]	; (8004348 <HAL_UART_IRQHandler+0x308>)
 8004220:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd fa1f 	bl	800166a <HAL_DMA_Abort_IT>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d017      	beq.n	8004262 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800423c:	4610      	mov	r0, r2
 800423e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	e00f      	b.n	8004262 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8ea 	bl	800441c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	e00b      	b.n	8004262 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8e6 	bl	800441c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e007      	b.n	8004262 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8e2 	bl	800441c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004260:	e0d1      	b.n	8004406 <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004262:	bf00      	nop
    return;
 8004264:	e0cf      	b.n	8004406 <HAL_UART_IRQHandler+0x3c6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426a:	2b01      	cmp	r3, #1
 800426c:	f040 80a7 	bne.w	80043be <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80a1 	beq.w	80043be <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 809b 	beq.w	80043be <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2210      	movs	r2, #16
 800428e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d156      	bne.n	800434c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	817b      	strh	r3, [r7, #10]
      if ((nb_remaining_rx_data > 0U)
 80042a8:	897b      	ldrh	r3, [r7, #10]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80ad 	beq.w	800440a <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042b6:	897a      	ldrh	r2, [r7, #10]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	f080 80a6 	bcs.w	800440a <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	897a      	ldrh	r2, [r7, #10]
 80042c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d0:	d02a      	beq.n	8004328 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	6892      	ldr	r2, [r2, #8]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6892      	ldr	r2, [r2, #8]
 80042fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004300:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	f022 0210 	bic.w	r2, r2, #16
 800431c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4618      	mov	r0, r3
 8004324:	f7fd f931 	bl	800158a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004334:	b29b      	uxth	r3, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	b29b      	uxth	r3, r3
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f877 	bl	8004430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004342:	e062      	b.n	800440a <HAL_UART_IRQHandler+0x3ca>
 8004344:	04000120 	.word	0x04000120
 8004348:	08004d1b 	.word	0x08004d1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004358:	b29b      	uxth	r3, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	813b      	strh	r3, [r7, #8]
      if ((huart->RxXferCount > 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d051      	beq.n	800440e <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 800436a:	893b      	ldrh	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d04e      	beq.n	800440e <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800437e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	6892      	ldr	r2, [r2, #8]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f022 0210 	bic.w	r2, r2, #16
 80043b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043b2:	893b      	ldrh	r3, [r7, #8]
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f83a 	bl	8004430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043bc:	e027      	b.n	800440e <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00d      	beq.n	80043e4 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01b      	beq.n	8004412 <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
    }
    return;
 80043e2:	e016      	b.n	8004412 <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <HAL_UART_IRQHandler+0x3d4>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fca4 	bl	8004d46 <UART_EndTransmit_IT>
    return;
 80043fe:	bf00      	nop
 8004400:	e008      	b.n	8004414 <HAL_UART_IRQHandler+0x3d4>
      return;
 8004402:	bf00      	nop
 8004404:	e006      	b.n	8004414 <HAL_UART_IRQHandler+0x3d4>
    return;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <HAL_UART_IRQHandler+0x3d4>
      return;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <HAL_UART_IRQHandler+0x3d4>
      return;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_UART_IRQHandler+0x3d4>
    return;
 8004412:	bf00      	nop
  }

}
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop

0800441c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	4bb3      	ldr	r3, [pc, #716]	; (8004744 <UART_SetConfig+0x2fc>)
 8004478:	400b      	ands	r3, r1
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	430b      	orrs	r3, r1
 800447e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	6852      	ldr	r2, [r2, #4]
 800448a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68d2      	ldr	r2, [r2, #12]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	6892      	ldr	r2, [r2, #8]
 80044b0:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4aa2      	ldr	r2, [pc, #648]	; (8004748 <UART_SetConfig+0x300>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d121      	bne.n	8004508 <UART_SetConfig+0xc0>
 80044c4:	4ba1      	ldr	r3, [pc, #644]	; (800474c <UART_SetConfig+0x304>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d816      	bhi.n	8004500 <UART_SetConfig+0xb8>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0x90>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044f5 	.word	0x080044f5
 80044e0:	080044ef 	.word	0x080044ef
 80044e4:	080044fb 	.word	0x080044fb
 80044e8:	2301      	movs	r3, #1
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e150      	b.n	8004790 <UART_SetConfig+0x348>
 80044ee:	2302      	movs	r3, #2
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e14d      	b.n	8004790 <UART_SetConfig+0x348>
 80044f4:	2304      	movs	r3, #4
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e14a      	b.n	8004790 <UART_SetConfig+0x348>
 80044fa:	2308      	movs	r3, #8
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e147      	b.n	8004790 <UART_SetConfig+0x348>
 8004500:	2310      	movs	r3, #16
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	bf00      	nop
 8004506:	e143      	b.n	8004790 <UART_SetConfig+0x348>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a90      	ldr	r2, [pc, #576]	; (8004750 <UART_SetConfig+0x308>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d134      	bne.n	800457c <UART_SetConfig+0x134>
 8004512:	4b8e      	ldr	r3, [pc, #568]	; (800474c <UART_SetConfig+0x304>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d829      	bhi.n	8004574 <UART_SetConfig+0x12c>
 8004520:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <UART_SetConfig+0xe0>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	0800455d 	.word	0x0800455d
 800452c:	08004575 	.word	0x08004575
 8004530:	08004575 	.word	0x08004575
 8004534:	08004575 	.word	0x08004575
 8004538:	08004569 	.word	0x08004569
 800453c:	08004575 	.word	0x08004575
 8004540:	08004575 	.word	0x08004575
 8004544:	08004575 	.word	0x08004575
 8004548:	08004563 	.word	0x08004563
 800454c:	08004575 	.word	0x08004575
 8004550:	08004575 	.word	0x08004575
 8004554:	08004575 	.word	0x08004575
 8004558:	0800456f 	.word	0x0800456f
 800455c:	2300      	movs	r3, #0
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e116      	b.n	8004790 <UART_SetConfig+0x348>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e113      	b.n	8004790 <UART_SetConfig+0x348>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e110      	b.n	8004790 <UART_SetConfig+0x348>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e10d      	b.n	8004790 <UART_SetConfig+0x348>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	bf00      	nop
 800457a:	e109      	b.n	8004790 <UART_SetConfig+0x348>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a74      	ldr	r2, [pc, #464]	; (8004754 <UART_SetConfig+0x30c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d120      	bne.n	80045c8 <UART_SetConfig+0x180>
 8004586:	4b71      	ldr	r3, [pc, #452]	; (800474c <UART_SetConfig+0x304>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004590:	2b10      	cmp	r3, #16
 8004592:	d00f      	beq.n	80045b4 <UART_SetConfig+0x16c>
 8004594:	2b10      	cmp	r3, #16
 8004596:	d802      	bhi.n	800459e <UART_SetConfig+0x156>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <UART_SetConfig+0x160>
 800459c:	e010      	b.n	80045c0 <UART_SetConfig+0x178>
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d005      	beq.n	80045ae <UART_SetConfig+0x166>
 80045a2:	2b30      	cmp	r3, #48	; 0x30
 80045a4:	d009      	beq.n	80045ba <UART_SetConfig+0x172>
 80045a6:	e00b      	b.n	80045c0 <UART_SetConfig+0x178>
 80045a8:	2300      	movs	r3, #0
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e0f0      	b.n	8004790 <UART_SetConfig+0x348>
 80045ae:	2302      	movs	r3, #2
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e0ed      	b.n	8004790 <UART_SetConfig+0x348>
 80045b4:	2304      	movs	r3, #4
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e0ea      	b.n	8004790 <UART_SetConfig+0x348>
 80045ba:	2308      	movs	r3, #8
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e0e7      	b.n	8004790 <UART_SetConfig+0x348>
 80045c0:	2310      	movs	r3, #16
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	bf00      	nop
 80045c6:	e0e3      	b.n	8004790 <UART_SetConfig+0x348>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a62      	ldr	r2, [pc, #392]	; (8004758 <UART_SetConfig+0x310>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d120      	bne.n	8004614 <UART_SetConfig+0x1cc>
 80045d2:	4b5e      	ldr	r3, [pc, #376]	; (800474c <UART_SetConfig+0x304>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d00f      	beq.n	8004600 <UART_SetConfig+0x1b8>
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d802      	bhi.n	80045ea <UART_SetConfig+0x1a2>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <UART_SetConfig+0x1ac>
 80045e8:	e010      	b.n	800460c <UART_SetConfig+0x1c4>
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	d005      	beq.n	80045fa <UART_SetConfig+0x1b2>
 80045ee:	2bc0      	cmp	r3, #192	; 0xc0
 80045f0:	d009      	beq.n	8004606 <UART_SetConfig+0x1be>
 80045f2:	e00b      	b.n	800460c <UART_SetConfig+0x1c4>
 80045f4:	2300      	movs	r3, #0
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e0ca      	b.n	8004790 <UART_SetConfig+0x348>
 80045fa:	2302      	movs	r3, #2
 80045fc:	77fb      	strb	r3, [r7, #31]
 80045fe:	e0c7      	b.n	8004790 <UART_SetConfig+0x348>
 8004600:	2304      	movs	r3, #4
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e0c4      	b.n	8004790 <UART_SetConfig+0x348>
 8004606:	2308      	movs	r3, #8
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e0c1      	b.n	8004790 <UART_SetConfig+0x348>
 800460c:	2310      	movs	r3, #16
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	bf00      	nop
 8004612:	e0bd      	b.n	8004790 <UART_SetConfig+0x348>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a50      	ldr	r2, [pc, #320]	; (800475c <UART_SetConfig+0x314>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d124      	bne.n	8004668 <UART_SetConfig+0x220>
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <UART_SetConfig+0x304>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462c:	d012      	beq.n	8004654 <UART_SetConfig+0x20c>
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d802      	bhi.n	800463a <UART_SetConfig+0x1f2>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <UART_SetConfig+0x200>
 8004638:	e012      	b.n	8004660 <UART_SetConfig+0x218>
 800463a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463e:	d006      	beq.n	800464e <UART_SetConfig+0x206>
 8004640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004644:	d009      	beq.n	800465a <UART_SetConfig+0x212>
 8004646:	e00b      	b.n	8004660 <UART_SetConfig+0x218>
 8004648:	2300      	movs	r3, #0
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e0a0      	b.n	8004790 <UART_SetConfig+0x348>
 800464e:	2302      	movs	r3, #2
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e09d      	b.n	8004790 <UART_SetConfig+0x348>
 8004654:	2304      	movs	r3, #4
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e09a      	b.n	8004790 <UART_SetConfig+0x348>
 800465a:	2308      	movs	r3, #8
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e097      	b.n	8004790 <UART_SetConfig+0x348>
 8004660:	2310      	movs	r3, #16
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	bf00      	nop
 8004666:	e093      	b.n	8004790 <UART_SetConfig+0x348>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3c      	ldr	r2, [pc, #240]	; (8004760 <UART_SetConfig+0x318>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d124      	bne.n	80046bc <UART_SetConfig+0x274>
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <UART_SetConfig+0x304>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d012      	beq.n	80046a8 <UART_SetConfig+0x260>
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004686:	d802      	bhi.n	800468e <UART_SetConfig+0x246>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <UART_SetConfig+0x254>
 800468c:	e012      	b.n	80046b4 <UART_SetConfig+0x26c>
 800468e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004692:	d006      	beq.n	80046a2 <UART_SetConfig+0x25a>
 8004694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004698:	d009      	beq.n	80046ae <UART_SetConfig+0x266>
 800469a:	e00b      	b.n	80046b4 <UART_SetConfig+0x26c>
 800469c:	2301      	movs	r3, #1
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e076      	b.n	8004790 <UART_SetConfig+0x348>
 80046a2:	2302      	movs	r3, #2
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e073      	b.n	8004790 <UART_SetConfig+0x348>
 80046a8:	2304      	movs	r3, #4
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e070      	b.n	8004790 <UART_SetConfig+0x348>
 80046ae:	2308      	movs	r3, #8
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e06d      	b.n	8004790 <UART_SetConfig+0x348>
 80046b4:	2310      	movs	r3, #16
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	bf00      	nop
 80046ba:	e069      	b.n	8004790 <UART_SetConfig+0x348>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a28      	ldr	r2, [pc, #160]	; (8004764 <UART_SetConfig+0x31c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d124      	bne.n	8004710 <UART_SetConfig+0x2c8>
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <UART_SetConfig+0x304>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d012      	beq.n	80046fc <UART_SetConfig+0x2b4>
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d802      	bhi.n	80046e2 <UART_SetConfig+0x29a>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <UART_SetConfig+0x2a8>
 80046e0:	e012      	b.n	8004708 <UART_SetConfig+0x2c0>
 80046e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e6:	d006      	beq.n	80046f6 <UART_SetConfig+0x2ae>
 80046e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046ec:	d009      	beq.n	8004702 <UART_SetConfig+0x2ba>
 80046ee:	e00b      	b.n	8004708 <UART_SetConfig+0x2c0>
 80046f0:	2300      	movs	r3, #0
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e04c      	b.n	8004790 <UART_SetConfig+0x348>
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e049      	b.n	8004790 <UART_SetConfig+0x348>
 80046fc:	2304      	movs	r3, #4
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e046      	b.n	8004790 <UART_SetConfig+0x348>
 8004702:	2308      	movs	r3, #8
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e043      	b.n	8004790 <UART_SetConfig+0x348>
 8004708:	2310      	movs	r3, #16
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	bf00      	nop
 800470e:	e03f      	b.n	8004790 <UART_SetConfig+0x348>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a14      	ldr	r2, [pc, #80]	; (8004768 <UART_SetConfig+0x320>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d138      	bne.n	800478c <UART_SetConfig+0x344>
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <UART_SetConfig+0x304>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004728:	d026      	beq.n	8004778 <UART_SetConfig+0x330>
 800472a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800472e:	d802      	bhi.n	8004736 <UART_SetConfig+0x2ee>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01b      	beq.n	800476c <UART_SetConfig+0x324>
 8004734:	e026      	b.n	8004784 <UART_SetConfig+0x33c>
 8004736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473a:	d01a      	beq.n	8004772 <UART_SetConfig+0x32a>
 800473c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004740:	d01d      	beq.n	800477e <UART_SetConfig+0x336>
 8004742:	e01f      	b.n	8004784 <UART_SetConfig+0x33c>
 8004744:	efff69f3 	.word	0xefff69f3
 8004748:	40011000 	.word	0x40011000
 800474c:	40023800 	.word	0x40023800
 8004750:	40004400 	.word	0x40004400
 8004754:	40004800 	.word	0x40004800
 8004758:	40004c00 	.word	0x40004c00
 800475c:	40005000 	.word	0x40005000
 8004760:	40011400 	.word	0x40011400
 8004764:	40007800 	.word	0x40007800
 8004768:	40007c00 	.word	0x40007c00
 800476c:	2300      	movs	r3, #0
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e00e      	b.n	8004790 <UART_SetConfig+0x348>
 8004772:	2302      	movs	r3, #2
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e00b      	b.n	8004790 <UART_SetConfig+0x348>
 8004778:	2304      	movs	r3, #4
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e008      	b.n	8004790 <UART_SetConfig+0x348>
 800477e:	2308      	movs	r3, #8
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e005      	b.n	8004790 <UART_SetConfig+0x348>
 8004784:	2310      	movs	r3, #16
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	bf00      	nop
 800478a:	e001      	b.n	8004790 <UART_SetConfig+0x348>
 800478c:	2310      	movs	r3, #16
 800478e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d15c      	bne.n	8004854 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800479a:	7ffb      	ldrb	r3, [r7, #31]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d828      	bhi.n	80047f2 <UART_SetConfig+0x3aa>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x360>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fd fd86 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 80047d0:	61b8      	str	r0, [r7, #24]
        break;
 80047d2:	e013      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fd fd96 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 80047d8:	61b8      	str	r0, [r7, #24]
        break;
 80047da:	e00f      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b49      	ldr	r3, [pc, #292]	; (8004904 <UART_SetConfig+0x4bc>)
 80047de:	61bb      	str	r3, [r7, #24]
        break;
 80047e0:	e00c      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fd fcb9 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80047e6:	61b8      	str	r0, [r7, #24]
        break;
 80047e8:	e008      	b.n	80047fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	61bb      	str	r3, [r7, #24]
        break;
 80047f0:	e004      	b.n	80047fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	77bb      	strb	r3, [r7, #30]
        break;
 80047fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d074      	beq.n	80048ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	005a      	lsls	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b0f      	cmp	r3, #15
 800481e:	d916      	bls.n	800484e <UART_SetConfig+0x406>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d212      	bcs.n	800484e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f023 030f 	bic.w	r3, r3, #15
 8004830:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	b29a      	uxth	r2, r3
 800483e:	89fb      	ldrh	r3, [r7, #14]
 8004840:	4313      	orrs	r3, r2
 8004842:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	89fa      	ldrh	r2, [r7, #14]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	e04e      	b.n	80048ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	77bb      	strb	r3, [r7, #30]
 8004852:	e04b      	b.n	80048ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004854:	7ffb      	ldrb	r3, [r7, #31]
 8004856:	2b08      	cmp	r3, #8
 8004858:	d827      	bhi.n	80048aa <UART_SetConfig+0x462>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x418>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fd fd2a 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8004888:	61b8      	str	r0, [r7, #24]
        break;
 800488a:	e013      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fd fd3a 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8004890:	61b8      	str	r0, [r7, #24]
        break;
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <UART_SetConfig+0x4bc>)
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e00c      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fd fc5d 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 800489e:	61b8      	str	r0, [r7, #24]
        break;
 80048a0:	e008      	b.n	80048b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	61bb      	str	r3, [r7, #24]
        break;
 80048a8:	e004      	b.n	80048b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	77bb      	strb	r3, [r7, #30]
        break;
 80048b2:	bf00      	nop
    }

    if (pclk != 0U)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085a      	lsrs	r2, r3, #1
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d908      	bls.n	80048e8 <UART_SetConfig+0x4a0>
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d204      	bcs.n	80048e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e001      	b.n	80048ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	00f42400 	.word	0x00f42400

08004908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	6852      	ldr	r2, [r2, #4]
 8004926:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	6852      	ldr	r2, [r2, #4]
 8004948:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	6852      	ldr	r2, [r2, #4]
 800496a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	6852      	ldr	r2, [r2, #4]
 800498c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	6892      	ldr	r2, [r2, #8]
 80049d0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	6852      	ldr	r2, [r2, #4]
 80049f2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a06:	d10a      	bne.n	8004a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	6852      	ldr	r2, [r2, #4]
 8004a12:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	6852      	ldr	r2, [r2, #4]
 8004a34:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a5c:	f7fc f9f2 	bl	8000e44 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d10e      	bne.n	8004a8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f817 	bl	8004ab2 <UART_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e00d      	b.n	8004aaa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac2:	e05e      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d05a      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7fc f9ba 	bl	8000e44 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d802      	bhi.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11b      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004af0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	6892      	ldr	r2, [r2, #8]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e043      	b.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02c      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b36:	d124      	bne.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	6892      	ldr	r2, [r2, #8]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e00f      	b.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d091      	beq.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bde:	d10e      	bne.n	8004bfe <UART_Start_Receive_IT+0x52>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <UART_Start_Receive_IT+0x48>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bf2:	e02d      	b.n	8004c50 <UART_Start_Receive_IT+0xa4>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	22ff      	movs	r2, #255	; 0xff
 8004bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bfc:	e028      	b.n	8004c50 <UART_Start_Receive_IT+0xa4>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <UART_Start_Receive_IT+0x76>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <UART_Start_Receive_IT+0x6c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c16:	e01b      	b.n	8004c50 <UART_Start_Receive_IT+0xa4>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	227f      	movs	r2, #127	; 0x7f
 8004c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c20:	e016      	b.n	8004c50 <UART_Start_Receive_IT+0xa4>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2a:	d10d      	bne.n	8004c48 <UART_Start_Receive_IT+0x9c>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <UART_Start_Receive_IT+0x92>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	227f      	movs	r2, #127	; 0x7f
 8004c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3c:	e008      	b.n	8004c50 <UART_Start_Receive_IT+0xa4>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	223f      	movs	r2, #63	; 0x3f
 8004c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c46:	e003      	b.n	8004c50 <UART_Start_Receive_IT+0xa4>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2222      	movs	r2, #34	; 0x22
 8004c5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6892      	ldr	r2, [r2, #8]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d107      	bne.n	8004c88 <UART_Start_Receive_IT+0xdc>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <UART_Start_Receive_IT+0x108>)
 8004c84:	665a      	str	r2, [r3, #100]	; 0x64
 8004c86:	e002      	b.n	8004c8e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <UART_Start_Receive_IT+0x10c>)
 8004c8c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004ca4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	08004e4d 	.word	0x08004e4d
 8004cb8:	08004d79 	.word	0x08004d79

08004cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cd2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	6892      	ldr	r2, [r2, #8]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	f022 0210 	bic.w	r2, r2, #16
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff fb6f 	bl	800441c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fb fc2c 	bl	80005c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d86:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8c:	2b22      	cmp	r3, #34	; 0x22
 8004d8e:	d151      	bne.n	8004e34 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	89ba      	ldrh	r2, [r7, #12]
 8004d9e:	b2d1      	uxtb	r1, r2
 8004da0:	89fa      	ldrh	r2, [r7, #14]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	400a      	ands	r2, r1
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d138      	bne.n	8004e44 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004de0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	6892      	ldr	r2, [r2, #8]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10f      	bne.n	8004e26 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	f022 0210 	bic.w	r2, r2, #16
 8004e14:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fb06 	bl	8004430 <HAL_UARTEx_RxEventCallback>
 8004e24:	e002      	b.n	8004e2c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fb fb76 	bl	8000518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e32:	e007      	b.n	8004e44 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	6992      	ldr	r2, [r2, #24]
 8004e3e:	f042 0208 	orr.w	r2, r2, #8
 8004e42:	619a      	str	r2, [r3, #24]
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e5a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e60:	2b22      	cmp	r3, #34	; 0x22
 8004e62:	d151      	bne.n	8004f08 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e72:	89ba      	ldrh	r2, [r7, #12]
 8004e74:	89fb      	ldrh	r3, [r7, #14]
 8004e76:	4013      	ands	r3, r2
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d138      	bne.n	8004f18 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eb4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	6892      	ldr	r2, [r2, #8]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10f      	bne.n	8004efa <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	f022 0210 	bic.w	r2, r2, #16
 8004ee8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fa9c 	bl	8004430 <HAL_UARTEx_RxEventCallback>
 8004ef8:	e002      	b.n	8004f00 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fb fb0c 	bl	8000518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f06:	e007      	b.n	8004f18 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	6992      	ldr	r2, [r2, #24]
 8004f12:	f042 0208 	orr.w	r2, r2, #8
 8004f16:	619a      	str	r2, [r3, #24]
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f24:	480d      	ldr	r0, [pc, #52]	; (8004f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f26:	490e      	ldr	r1, [pc, #56]	; (8004f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f28:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f2c:	e002      	b.n	8004f34 <LoopCopyDataInit>

08004f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f32:	3304      	adds	r3, #4

08004f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f38:	d3f9      	bcc.n	8004f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f3a:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f3c:	4c0b      	ldr	r4, [pc, #44]	; (8004f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f40:	e001      	b.n	8004f46 <LoopFillZerobss>

08004f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f44:	3204      	adds	r2, #4

08004f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f48:	d3fb      	bcc.n	8004f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f4a:	f7fb ff17 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f4e:	f000 f811 	bl	8004f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f52:	f7fb fb43 	bl	80005dc <main>
  bx  lr    
 8004f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004f64:	08005048 	.word	0x08005048
  ldr r2, =_sbss
 8004f68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004f6c:	200001b0 	.word	0x200001b0

08004f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f70:	e7fe      	b.n	8004f70 <ADC_IRQHandler>
	...

08004f74 <__libc_init_array>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	4e0d      	ldr	r6, [pc, #52]	; (8004fac <__libc_init_array+0x38>)
 8004f78:	4c0d      	ldr	r4, [pc, #52]	; (8004fb0 <__libc_init_array+0x3c>)
 8004f7a:	1ba4      	subs	r4, r4, r6
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	2500      	movs	r5, #0
 8004f80:	42a5      	cmp	r5, r4
 8004f82:	d109      	bne.n	8004f98 <__libc_init_array+0x24>
 8004f84:	4e0b      	ldr	r6, [pc, #44]	; (8004fb4 <__libc_init_array+0x40>)
 8004f86:	4c0c      	ldr	r4, [pc, #48]	; (8004fb8 <__libc_init_array+0x44>)
 8004f88:	f000 f820 	bl	8004fcc <_init>
 8004f8c:	1ba4      	subs	r4, r4, r6
 8004f8e:	10a4      	asrs	r4, r4, #2
 8004f90:	2500      	movs	r5, #0
 8004f92:	42a5      	cmp	r5, r4
 8004f94:	d105      	bne.n	8004fa2 <__libc_init_array+0x2e>
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f9c:	4798      	blx	r3
 8004f9e:	3501      	adds	r5, #1
 8004fa0:	e7ee      	b.n	8004f80 <__libc_init_array+0xc>
 8004fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fa6:	4798      	blx	r3
 8004fa8:	3501      	adds	r5, #1
 8004faa:	e7f2      	b.n	8004f92 <__libc_init_array+0x1e>
 8004fac:	08005040 	.word	0x08005040
 8004fb0:	08005040 	.word	0x08005040
 8004fb4:	08005040 	.word	0x08005040
 8004fb8:	08005044 	.word	0x08005044

08004fbc <memset>:
 8004fbc:	4402      	add	r2, r0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <memset+0xa>
 8004fc4:	4770      	bx	lr
 8004fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fca:	e7f9      	b.n	8004fc0 <memset+0x4>

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr

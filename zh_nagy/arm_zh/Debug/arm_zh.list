
arm_zh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e8  20000000  08005720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  200000e8  08005808  000200e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002c4  08005808  000202c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f335  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002113  00000000  00000000  0002f44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ec0  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da8  00000000  00000000  00032420  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006679  00000000  00000000  000331c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004cc3  00000000  00000000  00039841  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e504  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000040d8  00000000  00000000  0003e580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800569c 	.word	0x0800569c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	0800569c 	.word	0x0800569c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <LCD_clock>:
 */

#include "main.h"
#include "lcd.h"

void LCD_clock(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

	HAL_Delay(6);
 80005c4:	2006      	movs	r0, #6
 80005c6:	f001 f9c1 	bl	800194c <HAL_Delay>
	// lcd e 1
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <LCD_clock+0x34>)
 80005d2:	f001 ff59 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80005d6:	2005      	movs	r0, #5
 80005d8:	f001 f9b8 	bl	800194c <HAL_Delay>
	//lcd e 0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <LCD_clock+0x34>)
 80005e4:	f001 ff50 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f001 f9af 	bl	800194c <HAL_Delay>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <LCD_write>:

void LCD_write(uint8_t data){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

	//felso 4 bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>7)&0x01));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	09db      	lsrs	r3, r3, #7
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	482e      	ldr	r0, [pc, #184]	; (80006c8 <LCD_write+0xd0>)
 8000610:	f001 ff3a 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>6)&0x01));
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	099b      	lsrs	r3, r3, #6
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000626:	4829      	ldr	r0, [pc, #164]	; (80006cc <LCD_write+0xd4>)
 8000628:	f001 ff2e 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>5)&0x01));
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4823      	ldr	r0, [pc, #140]	; (80006cc <LCD_write+0xd4>)
 8000640:	f001 ff22 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data>>4)&0x01));
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	481d      	ldr	r0, [pc, #116]	; (80006cc <LCD_write+0xd4>)
 8000658:	f001 ff16 	bl	8002488 <HAL_GPIO_WritePin>

	LCD_clock();
 800065c:	f7ff ffb0 	bl	80005c0 <LCD_clock>

	//also 4
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>3)&0x01));
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	08db      	lsrs	r3, r3, #3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000672:	4815      	ldr	r0, [pc, #84]	; (80006c8 <LCD_write+0xd0>)
 8000674:	f001 ff08 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>2)&0x01));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <LCD_write+0xd4>)
 800068c:	f001 fefc 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>1)&0x01));
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	085b      	lsrs	r3, r3, #1
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <LCD_write+0xd4>)
 80006a4:	f001 fef0 	bl	8002488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data)&0x01));
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <LCD_write+0xd4>)
 80006b8:	f001 fee6 	bl	8002488 <HAL_GPIO_WritePin>

	LCD_clock();
 80006bc:	f7ff ff80 	bl	80005c0 <LCD_clock>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020400 	.word	0x40020400
 80006cc:	40021000 	.word	0x40021000

080006d0 <LCD_data>:

void LCD_data(uint8_t adat){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <LCD_data+0x24>)
 80006e0:	f001 fed2 	bl	8002488 <HAL_GPIO_WritePin>
	LCD_write(adat);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff86 	bl	80005f8 <LCD_write>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <LCD_cmd>:

void LCD_cmd(uint8_t cmd){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <LCD_cmd+0x24>)
 8000708:	f001 febe 	bl	8002488 <HAL_GPIO_WritePin>
	LCD_write(cmd);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff72 	bl	80005f8 <LCD_write>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <LCD_init>:

void LCD_init(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

	LCD_cmd(0x20);
 8000724:	2020      	movs	r0, #32
 8000726:	f7ff ffe7 	bl	80006f8 <LCD_cmd>
	LCD_clock();
 800072a:	f7ff ff49 	bl	80005c0 <LCD_clock>
	LCD_clock();
 800072e:	f7ff ff47 	bl	80005c0 <LCD_clock>
	LCD_clock();
 8000732:	f7ff ff45 	bl	80005c0 <LCD_clock>
	// mod - 4 bit 2 sor, 5x8pont matrix
	// 3x - nem tudjuk milyen modban volt
	LCD_cmd(0x28);
 8000736:	2028      	movs	r0, #40	; 0x28
 8000738:	f7ff ffde 	bl	80006f8 <LCD_cmd>
	LCD_cmd(0x28);
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f7ff ffdb 	bl	80006f8 <LCD_cmd>
	LCD_cmd(0x28);
 8000742:	2028      	movs	r0, #40	; 0x28
 8000744:	f7ff ffd8 	bl	80006f8 <LCD_cmd>

	//alaphelyzet
	LCD_cmd(0x02);
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ffd5 	bl	80006f8 <LCD_cmd>
	// lcd torles
	LCD_cmd(0x01);
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ffd2 	bl	80006f8 <LCD_cmd>
	//kurzor beallitasa
	LCD_cmd(0x08 | (1<<2) | (0<<1) | (0<<0));
 8000754:	200c      	movs	r0, #12
 8000756:	f7ff ffcf 	bl	80006f8 <LCD_cmd>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <LCD_string>:

void LCD_string(char *p){
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]

	while(*p){
 8000766:	e006      	b.n	8000776 <LCD_string+0x18>

		LCD_data(*p++);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffad 	bl	80006d0 <LCD_data>
	while(*p){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f4      	bne.n	8000768 <LCD_string+0xa>
	}
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <LCD_xy>:

void LCD_xy(uint8_t x, uint8_t y){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

		switch (y)
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	3b01      	subs	r3, #1
 800079c:	2b03      	cmp	r3, #3
 800079e:	d820      	bhi.n	80007e2 <LCD_xy+0x5a>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <LCD_xy+0x20>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007c1 	.word	0x080007c1
 80007b0:	080007c9 	.word	0x080007c9
 80007b4:	080007d1 	.word	0x080007d1
		{
			case 1:    // 1. sor
			position = LCD_START_DDADR + LCD_ADR_LINE1 + x;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	3b80      	subs	r3, #128	; 0x80
 80007bc:	73fb      	strb	r3, [r7, #15]
			break;
 80007be:	e00b      	b.n	80007d8 <LCD_xy+0x50>

			case 2:    // 2. sor
			position = LCD_START_DDADR + LCD_ADR_LINE2 + x;
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3b40      	subs	r3, #64	; 0x40
 80007c4:	73fb      	strb	r3, [r7, #15]
			break;
 80007c6:	e007      	b.n	80007d8 <LCD_xy+0x50>

			case 3:    // 3. sor
			position = LCD_START_DDADR + LCD_ADR_LINE3 + x;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	3b70      	subs	r3, #112	; 0x70
 80007cc:	73fb      	strb	r3, [r7, #15]
			break;
 80007ce:	e003      	b.n	80007d8 <LCD_xy+0x50>

			case 4:    // 4. sor
			position = LCD_START_DDADR + LCD_ADR_LINE4 + x;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3b30      	subs	r3, #48	; 0x30
 80007d4:	73fb      	strb	r3, [r7, #15]
			break;
 80007d6:	bf00      	nop

			default:
			return;
		}
		LCD_cmd(position); // beallitas
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff8c 	bl	80006f8 <LCD_cmd>
 80007e0:	e000      	b.n	80007e4 <LCD_xy+0x5c>
			return;
 80007e2:	bf00      	nop

}
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop

080007ec <LCD_num>:

void LCD_num(uint16_t szam){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]

	char str[5];
	sprintf(str, "%d", szam);
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <LCD_num+0x2c>)
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fb2e 	bl	8004e60 <siprintf>
	LCD_string(str);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffa8 	bl	800075e <LCD_string>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	080056b4 	.word	0x080056b4

0800081c <read_matrix>:
static void MX_TIM12_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void read_matrix(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	matrix_search();
 8000822:	f000 fdf1 	bl	8001408 <matrix_search>
	uint8_t key=get_key();
 8000826:	f000 fe3b 	bl	80014a0 <get_key>
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]

	if(key<12){
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b0b      	cmp	r3, #11
 8000832:	f200 80e8 	bhi.w	8000a06 <read_matrix+0x1ea>
		switch(key){
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	3b01      	subs	r3, #1
 800083a:	2b08      	cmp	r3, #8
 800083c:	f200 80e2 	bhi.w	8000a04 <read_matrix+0x1e8>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <read_matrix+0x2c>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800086d 	.word	0x0800086d
 800084c:	080008a3 	.word	0x080008a3
 8000850:	080008d5 	.word	0x080008d5
 8000854:	0800090b 	.word	0x0800090b
 8000858:	08000943 	.word	0x08000943
 800085c:	0800097d 	.word	0x0800097d
 8000860:	080009b5 	.word	0x080009b5
 8000864:	080009f5 	.word	0x080009f5
 8000868:	080009fd 	.word	0x080009fd
			case 1: round_score = round_score + (15 * szorzo); s15 =s15+szorzo; dobas--; break;
 800086c:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <read_matrix+0x204>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b6a      	ldr	r3, [pc, #424]	; (8000a24 <read_matrix+0x208>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4413      	add	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b68      	ldr	r3, [pc, #416]	; (8000a24 <read_matrix+0x208>)
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <read_matrix+0x20c>)
 8000886:	781a      	ldrb	r2, [r3, #0]
 8000888:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <read_matrix+0x204>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4413      	add	r3, r2
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <read_matrix+0x20c>)
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <read_matrix+0x210>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b63      	ldr	r3, [pc, #396]	; (8000a2c <read_matrix+0x210>)
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	e0b1      	b.n	8000a06 <read_matrix+0x1ea>
			case 2: round_score = round_score + (16 * szorzo); s16 =s16+szorzo; dobas--; break;
 80008a2:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <read_matrix+0x204>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <read_matrix+0x208>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b5c      	ldr	r3, [pc, #368]	; (8000a24 <read_matrix+0x208>)
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <read_matrix+0x214>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b59      	ldr	r3, [pc, #356]	; (8000a20 <read_matrix+0x204>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <read_matrix+0x214>)
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <read_matrix+0x210>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b57      	ldr	r3, [pc, #348]	; (8000a2c <read_matrix+0x210>)
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e098      	b.n	8000a06 <read_matrix+0x1ea>
			case 3: round_score = round_score + (17 * szorzo); s17 =s17+szorzo; dobas--; break;
 80008d4:	4b52      	ldr	r3, [pc, #328]	; (8000a20 <read_matrix+0x204>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	4413      	add	r3, r2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <read_matrix+0x208>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <read_matrix+0x208>)
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	4b51      	ldr	r3, [pc, #324]	; (8000a34 <read_matrix+0x218>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <read_matrix+0x204>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <read_matrix+0x218>)
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <read_matrix+0x210>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b49      	ldr	r3, [pc, #292]	; (8000a2c <read_matrix+0x210>)
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e07d      	b.n	8000a06 <read_matrix+0x1ea>
			case 4: round_score = round_score + (18 * szorzo); s18 =s18+szorzo; dobas--; break;
 800090a:	4b45      	ldr	r3, [pc, #276]	; (8000a20 <read_matrix+0x204>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	4413      	add	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <read_matrix+0x208>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4413      	add	r3, r2
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <read_matrix+0x208>)
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <read_matrix+0x21c>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <read_matrix+0x204>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4413      	add	r3, r2
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <read_matrix+0x21c>)
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <read_matrix+0x210>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <read_matrix+0x210>)
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e061      	b.n	8000a06 <read_matrix+0x1ea>
			case 5: round_score = round_score + (19 * szorzo); s19 =s19+szorzo; dobas--; break;
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <read_matrix+0x204>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	441a      	add	r2, r3
 800094c:	0052      	lsls	r2, r2, #1
 800094e:	4413      	add	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <read_matrix+0x208>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <read_matrix+0x208>)
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <read_matrix+0x220>)
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <read_matrix+0x204>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <read_matrix+0x220>)
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <read_matrix+0x210>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	3b01      	subs	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <read_matrix+0x210>)
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e044      	b.n	8000a06 <read_matrix+0x1ea>
			case 6: round_score = round_score + (20 * szorzo); s20 =s20+szorzo; dobas--; break;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <read_matrix+0x204>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <read_matrix+0x208>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <read_matrix+0x208>)
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <read_matrix+0x224>)
 8000998:	781a      	ldrb	r2, [r3, #0]
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <read_matrix+0x204>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <read_matrix+0x224>)
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <read_matrix+0x210>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <read_matrix+0x210>)
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e028      	b.n	8000a06 <read_matrix+0x1ea>
			case 7: round_score = round_score + (25 * szorzo); sb =sb+szorzo; dobas--; break;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <read_matrix+0x204>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	4413      	add	r3, r2
 80009be:	461a      	mov	r2, r3
 80009c0:	0091      	lsls	r1, r2, #2
 80009c2:	461a      	mov	r2, r3
 80009c4:	460b      	mov	r3, r1
 80009c6:	4413      	add	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <read_matrix+0x208>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <read_matrix+0x208>)
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <read_matrix+0x228>)
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <read_matrix+0x204>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <read_matrix+0x228>)
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <read_matrix+0x210>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <read_matrix+0x210>)
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e008      	b.n	8000a06 <read_matrix+0x1ea>

			case 8: szorzo = 2; break;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <read_matrix+0x204>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e004      	b.n	8000a06 <read_matrix+0x1ea>
			case 9: szorzo = 3; break;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <read_matrix+0x204>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	e000      	b.n	8000a06 <read_matrix+0x1ea>
			default: break;
 8000a04:	bf00      	nop
		}
	}



	if (!dobas){
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <read_matrix+0x210>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 8157 	bne.w	8000cbe <read_matrix+0x4a2>
		switch (player){
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <read_matrix+0x22c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d019      	beq.n	8000a4c <read_matrix+0x230>
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	f000 809f 	beq.w	8000b5c <read_matrix+0x340>
 8000a1e:	e125      	b.n	8000c6c <read_matrix+0x450>
 8000a20:	2000002d 	.word	0x2000002d
 8000a24:	20000108 	.word	0x20000108
 8000a28:	20000109 	.word	0x20000109
 8000a2c:	2000002e 	.word	0x2000002e
 8000a30:	2000010a 	.word	0x2000010a
 8000a34:	2000010b 	.word	0x2000010b
 8000a38:	2000010c 	.word	0x2000010c
 8000a3c:	2000010d 	.word	0x2000010d
 8000a40:	2000010e 	.word	0x2000010e
 8000a44:	2000010f 	.word	0x2000010f
 8000a48:	2000002f 	.word	0x2000002f
				case 1: p1_score = p1_score +  round_score;
 8000a4c:	4b9e      	ldr	r3, [pc, #632]	; (8000cc8 <read_matrix+0x4ac>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b9e      	ldr	r3, [pc, #632]	; (8000ccc <read_matrix+0x4b0>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b9c      	ldr	r3, [pc, #624]	; (8000ccc <read_matrix+0x4b0>)
 8000a5c:	801a      	strh	r2, [r3, #0]

				p1_s15 = p1_s15+s15; LCD_xy(3,1); LCD_num(p1_s15);
 8000a5e:	4b9c      	ldr	r3, [pc, #624]	; (8000cd0 <read_matrix+0x4b4>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b9c      	ldr	r3, [pc, #624]	; (8000cd4 <read_matrix+0x4b8>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b99      	ldr	r3, [pc, #612]	; (8000cd0 <read_matrix+0x4b4>)
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2003      	movs	r0, #3
 8000a72:	f7ff fe89 	bl	8000788 <LCD_xy>
 8000a76:	4b96      	ldr	r3, [pc, #600]	; (8000cd0 <read_matrix+0x4b4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff feb5 	bl	80007ec <LCD_num>
				p1_s16 = p1_s15+s16; LCD_xy(5,1); LCD_num(p1_s16);
 8000a82:	4b93      	ldr	r3, [pc, #588]	; (8000cd0 <read_matrix+0x4b4>)
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	4b94      	ldr	r3, [pc, #592]	; (8000cd8 <read_matrix+0x4bc>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b93      	ldr	r3, [pc, #588]	; (8000cdc <read_matrix+0x4c0>)
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	2101      	movs	r1, #1
 8000a94:	2005      	movs	r0, #5
 8000a96:	f7ff fe77 	bl	8000788 <LCD_xy>
 8000a9a:	4b90      	ldr	r3, [pc, #576]	; (8000cdc <read_matrix+0x4c0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fea3 	bl	80007ec <LCD_num>
				p1_s17 = p1_s15+s17; LCD_xy(7,1); LCD_num(p1_s17);
 8000aa6:	4b8a      	ldr	r3, [pc, #552]	; (8000cd0 <read_matrix+0x4b4>)
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	4b8d      	ldr	r3, [pc, #564]	; (8000ce0 <read_matrix+0x4c4>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b8c      	ldr	r3, [pc, #560]	; (8000ce4 <read_matrix+0x4c8>)
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	2007      	movs	r0, #7
 8000aba:	f7ff fe65 	bl	8000788 <LCD_xy>
 8000abe:	4b89      	ldr	r3, [pc, #548]	; (8000ce4 <read_matrix+0x4c8>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe91 	bl	80007ec <LCD_num>
				p1_s18 = p1_s15+s18; LCD_xy(9,1); LCD_num(p1_s18);
 8000aca:	4b81      	ldr	r3, [pc, #516]	; (8000cd0 <read_matrix+0x4b4>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b86      	ldr	r3, [pc, #536]	; (8000ce8 <read_matrix+0x4cc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b85      	ldr	r3, [pc, #532]	; (8000cec <read_matrix+0x4d0>)
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	2101      	movs	r1, #1
 8000adc:	2009      	movs	r0, #9
 8000ade:	f7ff fe53 	bl	8000788 <LCD_xy>
 8000ae2:	4b82      	ldr	r3, [pc, #520]	; (8000cec <read_matrix+0x4d0>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe7f 	bl	80007ec <LCD_num>
				p1_s19 = p1_s15+s19; LCD_xy(11,1); LCD_num(p1_s19);
 8000aee:	4b78      	ldr	r3, [pc, #480]	; (8000cd0 <read_matrix+0x4b4>)
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b7f      	ldr	r3, [pc, #508]	; (8000cf0 <read_matrix+0x4d4>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b7e      	ldr	r3, [pc, #504]	; (8000cf4 <read_matrix+0x4d8>)
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	2101      	movs	r1, #1
 8000b00:	200b      	movs	r0, #11
 8000b02:	f7ff fe41 	bl	8000788 <LCD_xy>
 8000b06:	4b7b      	ldr	r3, [pc, #492]	; (8000cf4 <read_matrix+0x4d8>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe6d 	bl	80007ec <LCD_num>
				p1_s20 = p1_s15+s20; LCD_xy(13,1); LCD_num(p1_s20);
 8000b12:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <read_matrix+0x4b4>)
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	4b78      	ldr	r3, [pc, #480]	; (8000cf8 <read_matrix+0x4dc>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b77      	ldr	r3, [pc, #476]	; (8000cfc <read_matrix+0x4e0>)
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	2101      	movs	r1, #1
 8000b24:	200d      	movs	r0, #13
 8000b26:	f7ff fe2f 	bl	8000788 <LCD_xy>
 8000b2a:	4b74      	ldr	r3, [pc, #464]	; (8000cfc <read_matrix+0x4e0>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe5b 	bl	80007ec <LCD_num>
				p1_sb = p1_s15+sb; LCD_xy(15,1); LCD_num(p1_sb);
 8000b36:	4b66      	ldr	r3, [pc, #408]	; (8000cd0 <read_matrix+0x4b4>)
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	4b71      	ldr	r3, [pc, #452]	; (8000d00 <read_matrix+0x4e4>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b70      	ldr	r3, [pc, #448]	; (8000d04 <read_matrix+0x4e8>)
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	2101      	movs	r1, #1
 8000b48:	200f      	movs	r0, #15
 8000b4a:	f7ff fe1d 	bl	8000788 <LCD_xy>
 8000b4e:	4b6d      	ldr	r3, [pc, #436]	; (8000d04 <read_matrix+0x4e8>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fe49 	bl	80007ec <LCD_num>

					break;
 8000b5a:	e087      	b.n	8000c6c <read_matrix+0x450>
				case 2: p2_score = p2_score +  round_score;
 8000b5c:	4b5a      	ldr	r3, [pc, #360]	; (8000cc8 <read_matrix+0x4ac>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b69      	ldr	r3, [pc, #420]	; (8000d08 <read_matrix+0x4ec>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <read_matrix+0x4ec>)
 8000b6c:	801a      	strh	r2, [r3, #0]
						p2_s15 = p2_s15+s15; LCD_xy(3,3); LCD_num(p2_s15);
 8000b6e:	4b67      	ldr	r3, [pc, #412]	; (8000d0c <read_matrix+0x4f0>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b58      	ldr	r3, [pc, #352]	; (8000cd4 <read_matrix+0x4b8>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <read_matrix+0x4f0>)
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	2103      	movs	r1, #3
 8000b80:	2003      	movs	r0, #3
 8000b82:	f7ff fe01 	bl	8000788 <LCD_xy>
 8000b86:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <read_matrix+0x4f0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe2d 	bl	80007ec <LCD_num>
						p2_s16 = p2_s15+s16; LCD_xy(5,3); LCD_num(p2_s15);
 8000b92:	4b5e      	ldr	r3, [pc, #376]	; (8000d0c <read_matrix+0x4f0>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <read_matrix+0x4bc>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <read_matrix+0x4f4>)
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	2005      	movs	r0, #5
 8000ba6:	f7ff fdef 	bl	8000788 <LCD_xy>
 8000baa:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <read_matrix+0x4f0>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe1b 	bl	80007ec <LCD_num>
						p2_s17 = p2_s15+s17; LCD_xy(7,3); LCD_num(p2_s15);
 8000bb6:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <read_matrix+0x4f0>)
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	4b49      	ldr	r3, [pc, #292]	; (8000ce0 <read_matrix+0x4c4>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <read_matrix+0x4f8>)
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	2007      	movs	r0, #7
 8000bca:	f7ff fddd 	bl	8000788 <LCD_xy>
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <read_matrix+0x4f0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe09 	bl	80007ec <LCD_num>
						p2_s18 = p2_s15+s18; LCD_xy(9,3); LCD_num(p2_s15);
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <read_matrix+0x4f0>)
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <read_matrix+0x4cc>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <read_matrix+0x4fc>)
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	2103      	movs	r1, #3
 8000bec:	2009      	movs	r0, #9
 8000bee:	f7ff fdcb 	bl	8000788 <LCD_xy>
 8000bf2:	4b46      	ldr	r3, [pc, #280]	; (8000d0c <read_matrix+0x4f0>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fdf7 	bl	80007ec <LCD_num>
						p2_s19 = p2_s15+s19; LCD_xy(11,3); LCD_num(p2_s15);
 8000bfe:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <read_matrix+0x4f0>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <read_matrix+0x4d4>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <read_matrix+0x500>)
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	2103      	movs	r1, #3
 8000c10:	200b      	movs	r0, #11
 8000c12:	f7ff fdb9 	bl	8000788 <LCD_xy>
 8000c16:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <read_matrix+0x4f0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fde5 	bl	80007ec <LCD_num>
						p2_s20 = p2_s15+s20; LCD_xy(13,3); LCD_num(p2_s15);
 8000c22:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <read_matrix+0x4f0>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <read_matrix+0x4dc>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <read_matrix+0x504>)
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	2103      	movs	r1, #3
 8000c34:	200d      	movs	r0, #13
 8000c36:	f7ff fda7 	bl	8000788 <LCD_xy>
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <read_matrix+0x4f0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fdd3 	bl	80007ec <LCD_num>
						p2_sb = p2_s15+sb; LCD_xy(15,3); LCD_num(p2_s15);
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <read_matrix+0x4f0>)
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <read_matrix+0x4e4>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <read_matrix+0x508>)
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	2103      	movs	r1, #3
 8000c58:	200f      	movs	r0, #15
 8000c5a:	f7ff fd95 	bl	8000788 <LCD_xy>
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <read_matrix+0x4f0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fdc1 	bl	80007ec <LCD_num>


				break;
 8000c6a:	bf00      	nop
				}


		dobas = 3;
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <read_matrix+0x50c>)
 8000c6e:	2203      	movs	r2, #3
 8000c70:	701a      	strb	r2, [r3, #0]
		szorzo = 1;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <read_matrix+0x510>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
		round_score = 0;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <read_matrix+0x4ac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]

		s15,s16,s17,s18,s19,s20,sb = 0;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <read_matrix+0x4e4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]

		if(player==1){
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <read_matrix+0x514>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d10c      	bne.n	8000ca6 <read_matrix+0x48a>
			LCD_xy(0,2); LCD_num(p1_score);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fd7a 	bl	8000788 <LCD_xy>
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <read_matrix+0x4b0>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fda7 	bl	80007ec <LCD_num>
			player = 2;
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <read_matrix+0x514>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	701a      	strb	r2, [r3, #0]
		}
	}



}
 8000ca4:	e00b      	b.n	8000cbe <read_matrix+0x4a2>
			LCD_xy(0,4); LCD_num(p2_score);
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fd6d 	bl	8000788 <LCD_xy>
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <read_matrix+0x4ec>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fd9a 	bl	80007ec <LCD_num>
			player = 1;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <read_matrix+0x514>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000108 	.word	0x20000108
 8000ccc:	20000104 	.word	0x20000104
 8000cd0:	20000110 	.word	0x20000110
 8000cd4:	20000109 	.word	0x20000109
 8000cd8:	2000010a 	.word	0x2000010a
 8000cdc:	20000111 	.word	0x20000111
 8000ce0:	2000010b 	.word	0x2000010b
 8000ce4:	20000112 	.word	0x20000112
 8000ce8:	2000010c 	.word	0x2000010c
 8000cec:	20000113 	.word	0x20000113
 8000cf0:	2000010d 	.word	0x2000010d
 8000cf4:	20000114 	.word	0x20000114
 8000cf8:	2000010e 	.word	0x2000010e
 8000cfc:	20000115 	.word	0x20000115
 8000d00:	2000010f 	.word	0x2000010f
 8000d04:	20000116 	.word	0x20000116
 8000d08:	20000106 	.word	0x20000106
 8000d0c:	20000117 	.word	0x20000117
 8000d10:	20000118 	.word	0x20000118
 8000d14:	20000119 	.word	0x20000119
 8000d18:	2000011a 	.word	0x2000011a
 8000d1c:	2000011b 	.word	0x2000011b
 8000d20:	2000011c 	.word	0x2000011c
 8000d24:	2000011d 	.word	0x2000011d
 8000d28:	2000002e 	.word	0x2000002e
 8000d2c:	2000002d 	.word	0x2000002d
 8000d30:	2000002f 	.word	0x2000002f

08000d34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f000 fda0 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f838 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 fa24 	bl	80011a0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000d58:	f000 f954 	bl	8001004 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000d5c:	f000 f9ac 	bl	80010b8 <MX_TIM12_Init>
  MX_ADC1_Init();
 8000d60:	f000 f8aa 	bl	8000eb8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d64:	f000 f8fc 	bl	8000f60 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000d68:	f000 f9ea 	bl	8001140 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000d6c:	f7ff fcd8 	bl	8000720 <LCD_init>
  LCD_cmd(0x80);
 8000d70:	2080      	movs	r0, #128	; 0x80
 8000d72:	f7ff fcc1 	bl	80006f8 <LCD_cmd>

  LCD_xy(0,1); LCD_string(row1);
 8000d76:	2101      	movs	r1, #1
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fd05 	bl	8000788 <LCD_xy>
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <main+0x6c>)
 8000d80:	f7ff fced 	bl	800075e <LCD_string>
  LCD_xy(0,2); LCD_string(row2);
 8000d84:	2102      	movs	r1, #2
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fcfe 	bl	8000788 <LCD_xy>
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <main+0x70>)
 8000d8e:	f7ff fce6 	bl	800075e <LCD_string>
  LCD_xy(0,3); LCD_string(row3);
 8000d92:	2103      	movs	r1, #3
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fcf7 	bl	8000788 <LCD_xy>
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <main+0x74>)
 8000d9c:	f7ff fcdf 	bl	800075e <LCD_string>
  LCD_xy(0,4); LCD_string(row4);
 8000da0:	2104      	movs	r1, #4
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fcf0 	bl	8000788 <LCD_xy>
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <main+0x78>)
 8000daa:	f7ff fcd8 	bl	800075e <LCD_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  read_matrix();
 8000dae:	f7ff fd35 	bl	800081c <read_matrix>
 8000db2:	e7fc      	b.n	8000dae <main+0x66>
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	20000018 	.word	0x20000018
 8000dc0:	2000001c 	.word	0x2000001c

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0b4      	sub	sp, #208	; 0xd0
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000dce:	2230      	movs	r2, #48	; 0x30
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f83c 	bl	8004e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	2284      	movs	r2, #132	; 0x84
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 f82d 	bl	8004e50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4a2e      	ldr	r2, [pc, #184]	; (8000eb0 <SystemClock_Config+0xec>)
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <SystemClock_Config+0xec>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <SystemClock_Config+0xec>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <SystemClock_Config+0xf0>)
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <SystemClock_Config+0xf0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <SystemClock_Config+0xf0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e36:	2310      	movs	r3, #16
 8000e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fb38 	bl	80024bc <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e52:	f000 fa75 	bl	8001340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fdc2 	bl	8002a04 <HAL_RCC_ClockConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e86:	f000 fa5b 	bl	8001340 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 ff89 	bl	8002db0 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ea4:	f000 fa4c 	bl	8001340 <Error_Handler>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	37d0      	adds	r7, #208	; 0xd0
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <MX_ADC1_Init+0x9c>)
 8000ece:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <MX_ADC1_Init+0xa0>)
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f18:	f000 fd3a 	bl	8001990 <HAL_ADC_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fa0d 	bl	8001340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_ADC1_Init+0xa4>)
 8000f28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_ADC1_Init+0x98>)
 8000f38:	f000 fd6e 	bl	8001a18 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f42:	f000 f9fd 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000234 	.word	0x20000234
 8000f54:	40012000 	.word	0x40012000
 8000f58:	0f000001 	.word	0x0f000001
 8000f5c:	10000012 	.word	0x10000012

08000f60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_ADC2_Init+0x9c>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_ADC2_Init+0xa0>)
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fc0:	f000 fce6 	bl	8001990 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f9b9 	bl	8001340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fe0:	f000 fd1a 	bl	8001a18 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fea:	f000 f9a9 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001ec 	.word	0x200001ec
 8000ffc:	40012100 	.word	0x40012100
 8001000:	0f000001 	.word	0x0f000001

08001004 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_TIM4_Init+0xac>)
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <MX_TIM4_Init+0xb0>)
 800102c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_TIM4_Init+0xac>)
 8001030:	220f      	movs	r2, #15
 8001032:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_TIM4_Init+0xac>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_TIM4_Init+0xac>)
 800103c:	2264      	movs	r2, #100	; 0x64
 800103e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_TIM4_Init+0xac>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_TIM4_Init+0xac>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800104c:	4818      	ldr	r0, [pc, #96]	; (80010b0 <MX_TIM4_Init+0xac>)
 800104e:	f002 fa9d 	bl	800358c <HAL_TIM_PWM_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001058:	f000 f972 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <MX_TIM4_Init+0xac>)
 800106c:	f003 f816 	bl	800409c <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001076:	f000 f963 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107a:	2360      	movs	r3, #96	; 0x60
 800107c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 800107e:	2305      	movs	r3, #5
 8001080:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	2204      	movs	r2, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM4_Init+0xac>)
 8001092:	f002 fbc5 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800109c:	f000 f950 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM4_Init+0xac>)
 80010a2:	f000 fac3 	bl	800162c <HAL_TIM_MspPostInit>

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000012c 	.word	0x2000012c
 80010b4:	40000800 	.word	0x40000800

080010b8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_TIM12_Init+0x80>)
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <MX_TIM12_Init+0x84>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 15;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_TIM12_Init+0x80>)
 80010d8:	220f      	movs	r2, #15
 80010da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_TIM12_Init+0x80>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_TIM12_Init+0x80>)
 80010e4:	2264      	movs	r2, #100	; 0x64
 80010e6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_TIM12_Init+0x80>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_TIM12_Init+0x80>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <MX_TIM12_Init+0x80>)
 80010f6:	f002 fa49 	bl	800358c <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001100:	f000 f91e 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8001108:	2305      	movs	r3, #5
 800110a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM12_Init+0x80>)
 800111c:	f002 fb80 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001126:	f000 f90b 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM12_Init+0x80>)
 800112c:	f000 fa7e 	bl	800162c <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000027c 	.word	0x2000027c
 800113c:	40001800 	.word	0x40001800

08001140 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <MX_USART3_UART_Init+0x5c>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART3_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART3_UART_Init+0x58>)
 8001184:	f003 f836 	bl	80041f4 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800118e:	f000 f8d7 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000016c 	.word	0x2000016c
 800119c:	40004800 	.word	0x40004800

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4a5d      	ldr	r2, [pc, #372]	; (800132c <MX_GPIO_Init+0x18c>)
 80011b8:	4b5c      	ldr	r3, [pc, #368]	; (800132c <MX_GPIO_Init+0x18c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b5a      	ldr	r3, [pc, #360]	; (800132c <MX_GPIO_Init+0x18c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4a57      	ldr	r2, [pc, #348]	; (800132c <MX_GPIO_Init+0x18c>)
 80011d0:	4b56      	ldr	r3, [pc, #344]	; (800132c <MX_GPIO_Init+0x18c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b54      	ldr	r3, [pc, #336]	; (800132c <MX_GPIO_Init+0x18c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	4a51      	ldr	r2, [pc, #324]	; (800132c <MX_GPIO_Init+0x18c>)
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <MX_GPIO_Init+0x18c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b4e      	ldr	r3, [pc, #312]	; (800132c <MX_GPIO_Init+0x18c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fe:	4a4b      	ldr	r2, [pc, #300]	; (800132c <MX_GPIO_Init+0x18c>)
 8001200:	4b4a      	ldr	r3, [pc, #296]	; (800132c <MX_GPIO_Init+0x18c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <MX_GPIO_Init+0x18c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	4a45      	ldr	r2, [pc, #276]	; (800132c <MX_GPIO_Init+0x18c>)
 8001218:	4b44      	ldr	r3, [pc, #272]	; (800132c <MX_GPIO_Init+0x18c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <MX_GPIO_Init+0x18c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122e:	4a3f      	ldr	r2, [pc, #252]	; (800132c <MX_GPIO_Init+0x18c>)
 8001230:	4b3e      	ldr	r3, [pc, #248]	; (800132c <MX_GPIO_Init+0x18c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <MX_GPIO_Init+0x18c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LCD_DATA_7_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f240 4101 	movw	r1, #1025	; 0x401
 800124c:	4838      	ldr	r0, [pc, #224]	; (8001330 <MX_GPIO_Init+0x190>)
 800124e:	f001 f91b 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001258:	4836      	ldr	r0, [pc, #216]	; (8001334 <MX_GPIO_Init+0x194>)
 800125a:	f001 f915 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 800125e:	2200      	movs	r2, #0
 8001260:	f24f 4180 	movw	r1, #62592	; 0xf480
 8001264:	4834      	ldr	r0, [pc, #208]	; (8001338 <MX_GPIO_Init+0x198>)
 8001266:	f001 f90f 	bl	8002488 <HAL_GPIO_WritePin>
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KB_PC6_OUT_row4_GPIO_Port, KB_PC6_OUT_row4_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001270:	4832      	ldr	r0, [pc, #200]	; (800133c <MX_GPIO_Init+0x19c>)
 8001272:	f001 f909 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 LCD_DATA_7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_DATA_7_Pin;
 8001276:	f240 4301 	movw	r3, #1025	; 0x401
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4828      	ldr	r0, [pc, #160]	; (8001330 <MX_GPIO_Init+0x190>)
 8001290:	f000 ff38 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC0_IN_LEFT_Pin */
  GPIO_InitStruct.Pin = KB_PC0_IN_LEFT_Pin;
 8001294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KB_PC0_IN_LEFT_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4822      	ldr	r0, [pc, #136]	; (8001334 <MX_GPIO_Init+0x194>)
 80012aa:	f000 ff2b 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC3_OUT_row1_Pin KB_PC5_OUT_row3_Pin */
  GPIO_InitStruct.Pin = KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin;
 80012ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	481b      	ldr	r0, [pc, #108]	; (8001334 <MX_GPIO_Init+0x194>)
 80012c8:	f000 ff1c 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_DATA_4_Pin KB_PC4_OUT_row2_Pin
                           LCD_DATA_5_Pin LCD_DATA_6_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 80012cc:	f24f 4380 	movw	r3, #62592	; 0xf480
 80012d0:	61fb      	str	r3, [r7, #28]
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4814      	ldr	r0, [pc, #80]	; (8001338 <MX_GPIO_Init+0x198>)
 80012e6:	f000 ff0d 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC1_IN_CENTER_Pin KB_PC2_IN_RIGHT_Pin */
  GPIO_InitStruct.Pin = KB_PC1_IN_CENTER_Pin|KB_PC2_IN_RIGHT_Pin;
 80012ea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <MX_GPIO_Init+0x198>)
 8001300:	f000 ff00 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC6_OUT_row4_Pin */
  GPIO_InitStruct.Pin = KB_PC6_OUT_row4_Pin;
 8001304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KB_PC6_OUT_row4_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_GPIO_Init+0x19c>)
 800131e:	f000 fef1 	bl	8002104 <HAL_GPIO_Init>

}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40020400 	.word	0x40020400
 8001334:	40021400 	.word	0x40021400
 8001338:	40021000 	.word	0x40021000
 800133c:	40021800 	.word	0x40021800

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001346:	e7fe      	b.n	8001346 <Error_Handler+0x6>

08001348 <matrix_row>:
GPIO_TypeDef *sor_gpio_port[4] = {KB_PC3_OUT_row1_GPIO_Port, KB_PC4_OUT_row2_GPIO_Port, KB_PC5_OUT_row3_GPIO_Port, KB_PC6_OUT_row4_GPIO_Port};

GPIO_TypeDef *matrix_gpio_port[7] = {KB_PC6_OUT_row4_GPIO_Port, KB_PC5_OUT_row3_GPIO_Port, KB_PC4_OUT_row2_GPIO_Port, KB_PC3_OUT_row1_GPIO_Port, KB_PC2_IN_RIGHT_GPIO_Port, KB_PC1_IN_CENTER_GPIO_Port, KB_PC0_IN_LEFT_GPIO_Port};


void matrix_row(uint8_t row){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]

	uint8_t i = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]

	while(i<4){
 8001356:	e020      	b.n	800139a <matrix_row+0x52>
		if(i==(row-1)) HAL_GPIO_WritePin(sor_gpio_port[i], sor_pin[i], GPIO_PIN_SET);
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	3b01      	subs	r3, #1
 800135e:	429a      	cmp	r2, r3
 8001360:	d10c      	bne.n	800137c <matrix_row+0x34>
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <matrix_row+0x60>)
 8001366:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <matrix_row+0x64>)
 800136e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001372:	2201      	movs	r2, #1
 8001374:	4619      	mov	r1, r3
 8001376:	f001 f887 	bl	8002488 <HAL_GPIO_WritePin>
 800137a:	e00b      	b.n	8001394 <matrix_row+0x4c>
		else HAL_GPIO_WritePin(sor_gpio_port[i], sor_pin[i], GPIO_PIN_RESET);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <matrix_row+0x60>)
 8001380:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <matrix_row+0x64>)
 8001388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	f001 f87a 	bl	8002488 <HAL_GPIO_WritePin>

		i++;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3301      	adds	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
	while(i<4){
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d9db      	bls.n	8001358 <matrix_row+0x10>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000004c 	.word	0x2000004c
 80013ac:	20000034 	.word	0x20000034

080013b0 <matrix_scann>:


uint8_t matrix_scann(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

	uint8_t bill = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
	uint8_t seged = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	71bb      	strb	r3, [r7, #6]

	while(i<7){
 80013c2:	e015      	b.n	80013f0 <matrix_scann+0x40>
		seged=HAL_GPIO_ReadPin(matrix_gpio_port[i], matrix_pin[i]);
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <matrix_scann+0x50>)
 80013c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <matrix_scann+0x54>)
 80013d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f001 f83f 	bl	8002458 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	717b      	strb	r3, [r7, #5]
		bill=(bill<<1)+seged;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	797b      	ldrb	r3, [r7, #5]
 80013e6:	4413      	add	r3, r2
 80013e8:	71fb      	strb	r3, [r7, #7]
		i++;
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	3301      	adds	r3, #1
 80013ee:	71bb      	strb	r3, [r7, #6]
	while(i<7){
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d9e6      	bls.n	80013c4 <matrix_scann+0x14>
	}
		return bill;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000005c 	.word	0x2000005c
 8001404:	2000003c 	.word	0x2000003c

08001408 <matrix_search>:


int matrix_search(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	uint8_t num=0;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
	uint8_t bill=0;
 8001412:	2300      	movs	r3, #0
 8001414:	71bb      	strb	r3, [r7, #6]

	matrix_row(row);
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <matrix_search+0x8c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff94 	bl	8001348 <matrix_row>
	HAL_Delay(5);
 8001420:	2005      	movs	r0, #5
 8001422:	f000 fa93 	bl	800194c <HAL_Delay>
	bill=matrix_scann();
 8001426:	f7ff ffc3 	bl	80013b0 <matrix_scann>
 800142a:	4603      	mov	r3, r0
 800142c:	71bb      	strb	r3, [r7, #6]

	while(num<12){
 800142e:	e01a      	b.n	8001466 <matrix_search+0x5e>

		if(bill==billtomb[num]){
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <matrix_search+0x90>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	79ba      	ldrb	r2, [r7, #6]
 8001438:	429a      	cmp	r2, r3
 800143a:	d10e      	bne.n	800145a <matrix_search+0x52>
			m_button2=num;
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <matrix_search+0x94>)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	7013      	strb	r3, [r2, #0]


			while(matrix_scann()==billtomb[num]);
 8001442:	bf00      	nop
 8001444:	f7ff ffb4 	bl	80013b0 <matrix_scann>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <matrix_search+0x90>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	4299      	cmp	r1, r3
 8001454:	d0f6      	beq.n	8001444 <matrix_search+0x3c>

			return 0;
 8001456:	2300      	movs	r3, #0
 8001458:	e017      	b.n	800148a <matrix_search+0x82>
		}
		else{

			m_button2=12;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <matrix_search+0x94>)
 800145c:	220c      	movs	r2, #12
 800145e:	701a      	strb	r2, [r3, #0]
			num++;
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	3301      	adds	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
	while(num<12){
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b0b      	cmp	r3, #11
 800146a:	d9e1      	bls.n	8001430 <matrix_search+0x28>
		}
	}

	if(row<4) row++;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <matrix_search+0x8c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d806      	bhi.n	8001482 <matrix_search+0x7a>
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <matrix_search+0x8c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <matrix_search+0x8c>)
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e002      	b.n	8001488 <matrix_search+0x80>
	else row=1;
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <matrix_search+0x8c>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]

	return 1;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000030 	.word	0x20000030
 8001498:	080056b8 	.word	0x080056b8
 800149c:	20000031 	.word	0x20000031

080014a0 <get_key>:

int get_key(void){
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	return m_button2;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <get_key+0x14>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000031 	.word	0x20000031

080014b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x44>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <HAL_ADC_MspInit+0x98>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10c      	bne.n	800153c <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_ADC_MspInit+0x9c>)
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_ADC_MspInit+0x9c>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_ADC_MspInit+0x9c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800153a:	e028      	b.n	800158e <HAL_ADC_MspInit+0x8e>
  else if(hadc->Instance==ADC2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_ADC_MspInit+0xa0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d123      	bne.n	800158e <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <HAL_ADC_MspInit+0x9c>)
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_ADC_MspInit+0x9c>)
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_ADC_MspInit+0x9c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_ADC_MspInit+0x9c>)
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_ADC_MspInit+0x9c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_ADC_MspInit+0x9c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001576:	2308      	movs	r3, #8
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 800158a:	f000 fdbb 	bl	8002104 <HAL_GPIO_Init>
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012000 	.word	0x40012000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40012100 	.word	0x40012100
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_TIM_PWM_MspInit+0x78>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d114      	bne.n	80015e4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <HAL_TIM_PWM_MspInit+0x7c>)
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_TIM_PWM_MspInit+0x7c>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_TIM_PWM_MspInit+0x7c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	201e      	movs	r0, #30
 80015d8:	f000 fd3b 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015dc:	201e      	movs	r0, #30
 80015de:	f000 fd54 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80015e2:	e018      	b.n	8001616 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM12)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_TIM_PWM_MspInit+0x80>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d113      	bne.n	8001616 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_TIM_PWM_MspInit+0x7c>)
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_TIM_PWM_MspInit+0x7c>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_TIM_PWM_MspInit+0x7c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	202b      	movs	r0, #43	; 0x2b
 800160c:	f000 fd21 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001610:	202b      	movs	r0, #43	; 0x2b
 8001612:	f000 fd3a 	bl	800208a <HAL_NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40000800 	.word	0x40000800
 8001624:	40023800 	.word	0x40023800
 8001628:	40001800 	.word	0x40001800

0800162c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <HAL_TIM_MspPostInit+0xa8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d11c      	bne.n	8001688 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_TIM_MspPostInit+0xac>)
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_TIM_MspPostInit+0xac>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_TIM_MspPostInit+0xac>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001676:	2302      	movs	r3, #2
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4816      	ldr	r0, [pc, #88]	; (80016dc <HAL_TIM_MspPostInit+0xb0>)
 8001682:	f000 fd3f 	bl	8002104 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001686:	e021      	b.n	80016cc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_TIM_MspPostInit+0xb4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d11c      	bne.n	80016cc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_TIM_MspPostInit+0xac>)
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_TIM_MspPostInit+0xac>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_TIM_MspPostInit+0xac>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80016bc:	2309      	movs	r3, #9
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_TIM_MspPostInit+0xb0>)
 80016c8:	f000 fd1c 	bl	8002104 <HAL_GPIO_Init>
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40000800 	.word	0x40000800
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40001800 	.word	0x40001800

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <HAL_UART_MspInit+0x8c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d130      	bne.n	8001768 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001706:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_UART_MspInit+0x90>)
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_UART_MspInit+0x90>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_UART_MspInit+0x90>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_UART_MspInit+0x90>)
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_UART_MspInit+0x90>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_UART_MspInit+0x90>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001748:	2307      	movs	r3, #7
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4809      	ldr	r0, [pc, #36]	; (8001778 <HAL_UART_MspInit+0x94>)
 8001754:	f000 fcd6 	bl	8002104 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2027      	movs	r0, #39	; 0x27
 800175e:	f000 fc78 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001762:	2027      	movs	r0, #39	; 0x27
 8001764:	f000 fc91 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	; 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40004800 	.word	0x40004800
 8001774:	40023800 	.word	0x40023800
 8001778:	40020c00 	.word	0x40020c00

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 f8a0 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM4_IRQHandler+0x10>)
 80017d6:	f001 ff04 	bl	80035e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000012c 	.word	0x2000012c

080017e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <USART3_IRQHandler+0x10>)
 80017ea:	f002 fd51 	bl	8004290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000016c 	.word	0x2000016c

080017f8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80017fe:	f001 fef0 	bl	80035e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000027c 	.word	0x2000027c

0800180c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x50>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x16>
		heap_end = &end;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <_sbrk+0x50>)
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <_sbrk+0x54>)
 8001820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <_sbrk+0x50>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <_sbrk+0x50>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	466a      	mov	r2, sp
 8001832:	4293      	cmp	r3, r2
 8001834:	d907      	bls.n	8001846 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001836:	f003 fae1 	bl	8004dfc <__errno>
 800183a:	4602      	mov	r2, r0
 800183c:	230c      	movs	r3, #12
 800183e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	e006      	b.n	8001854 <_sbrk+0x48>
	}

	heap_end += incr;
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <_sbrk+0x50>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a03      	ldr	r2, [pc, #12]	; (800185c <_sbrk+0x50>)
 8001850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000120 	.word	0x20000120
 8001860:	200002c4 	.word	0x200002c4

08001864 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4a08      	ldr	r2, [pc, #32]	; (800188c <SystemInit+0x28>)
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <SystemInit+0x28>)
 800186c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <SystemInit+0x28>)
 800187a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800187e:	609a      	str	r2, [r3, #8]
#endif
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 fbd1 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f806 	bl	80018ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fe0a 	bl	80014b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fbeb 	bl	80020a6 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 fbb3 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000078 	.word	0x20000078
 8001904:	20000080 	.word	0x20000080
 8001908:	2000007c 	.word	0x2000007c

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000080 	.word	0x20000080
 8001930:	200002bc 	.word	0x200002bc

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200002bc 	.word	0x200002bc

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_Delay+0x40>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad2      	subs	r2, r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3f7      	bcc.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000080 	.word	0x20000080

08001990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e031      	b.n	8001a0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fda6 	bl	8001500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_ADC_Init+0x84>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f964 	bl	8001cac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
 80019fa:	e001      	b.n	8001a00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	ffffeefd 	.word	0xffffeefd

08001a18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a18:	b490      	push	{r4, r7}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1c>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e12c      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x276>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d93b      	bls.n	8001abc <HAL_ADC_ConfigChannel+0xa4>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a4c:	d036      	beq.n	8001abc <HAL_ADC_ConfigChannel+0xa4>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68d9      	ldr	r1, [r3, #12]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4603      	mov	r3, r0
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4403      	add	r3, r0
 8001a66:	3b1e      	subs	r3, #30
 8001a68:	2007      	movs	r0, #7
 8001a6a:	fa00 f303 	lsl.w	r3, r0, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	400b      	ands	r3, r1
 8001a72:	60d3      	str	r3, [r2, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a87      	ldr	r2, [pc, #540]	; (8001c98 <HAL_ADC_ConfigChannel+0x280>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10a      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	68d1      	ldr	r1, [r2, #12]
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	6892      	ldr	r2, [r2, #8]
 8001a8c:	0612      	lsls	r2, r2, #24
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a92:	e037      	b.n	8001b04 <HAL_ADC_ConfigChannel+0xec>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68d9      	ldr	r1, [r3, #12]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6898      	ldr	r0, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461c      	mov	r4, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4423      	add	r3, r4
 8001ab0:	3b1e      	subs	r3, #30
 8001ab2:	fa00 f303 	lsl.w	r3, r0, r3
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	60d3      	str	r3, [r2, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aba:	e023      	b.n	8001b04 <HAL_ADC_ConfigChannel+0xec>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4403      	add	r3, r0
 8001ad4:	2007      	movs	r0, #7
 8001ad6:	fa00 f303 	lsl.w	r3, r0, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	400b      	ands	r3, r1
 8001ade:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6898      	ldr	r0, [r3, #8]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461c      	mov	r4, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4423      	add	r3, r4
 8001afc:	fa00 f303 	lsl.w	r3, r0, r3
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d824      	bhi.n	8001b56 <HAL_ADC_ConfigChannel+0x13e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6819      	ldr	r1, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b05      	subs	r3, #5
 8001b22:	221f      	movs	r2, #31
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4003      	ands	r3, r0
 8001b2c:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461c      	mov	r4, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b05      	subs	r3, #5
 8001b4c:	fa04 f303 	lsl.w	r3, r4, r3
 8001b50:	4303      	orrs	r3, r0
 8001b52:	634b      	str	r3, [r1, #52]	; 0x34
 8001b54:	e04c      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d824      	bhi.n	8001ba8 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b23      	subs	r3, #35	; 0x23
 8001b74:	221f      	movs	r2, #31
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4003      	ands	r3, r0
 8001b7e:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461c      	mov	r4, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b23      	subs	r3, #35	; 0x23
 8001b9e:	fa04 f303 	lsl.w	r3, r4, r3
 8001ba2:	4303      	orrs	r3, r0
 8001ba4:	630b      	str	r3, [r1, #48]	; 0x30
 8001ba6:	e023      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b41      	subs	r3, #65	; 0x41
 8001bbe:	221f      	movs	r2, #31
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4003      	ands	r3, r0
 8001bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	461c      	mov	r4, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3b41      	subs	r3, #65	; 0x41
 8001be8:	fa04 f303 	lsl.w	r3, r4, r3
 8001bec:	4303      	orrs	r3, r0
 8001bee:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_ADC_ConfigChannel+0x284>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10a      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1f8>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1f8>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c04:	4a26      	ldr	r2, [pc, #152]	; (8001ca0 <HAL_ADC_ConfigChannel+0x288>)
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_ADC_ConfigChannel+0x288>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_ADC_ConfigChannel+0x284>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d109      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x216>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d105      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x216>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_ADC_ConfigChannel+0x288>)
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_ADC_ConfigChannel+0x288>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c2c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_ADC_ConfigChannel+0x284>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d125      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x26c>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_ADC_ConfigChannel+0x280>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d003      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0x232>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b11      	cmp	r3, #17
 8001c48:	d11c      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x26c>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_ADC_ConfigChannel+0x288>)
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_ADC_ConfigChannel+0x288>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c54:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_ADC_ConfigChannel+0x280>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d111      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x26c>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_ADC_ConfigChannel+0x28c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_ADC_ConfigChannel+0x290>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c76:	e002      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x266>
      {
        counter--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x260>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc90      	pop	{r4, r7}
 8001c96:	4770      	bx	lr
 8001c98:	10000012 	.word	0x10000012
 8001c9c:	40012000 	.word	0x40012000
 8001ca0:	40012300 	.word	0x40012300
 8001ca4:	20000078 	.word	0x20000078
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001cb4:	4a78      	ldr	r2, [pc, #480]	; (8001e98 <ADC_Init+0x1ec>)
 8001cb6:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <ADC_Init+0x1ec>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001cbe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001cc0:	4975      	ldr	r1, [pc, #468]	; (8001e98 <ADC_Init+0x1ec>)
 8001cc2:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <ADC_Init+0x1ec>)
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	6852      	ldr	r2, [r2, #4]
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	6851      	ldr	r1, [r2, #4]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6912      	ldr	r2, [r2, #16]
 8001cec:	0212      	lsls	r2, r2, #8
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	6852      	ldr	r2, [r2, #4]
 8001cfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	6851      	ldr	r1, [r2, #4]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6892      	ldr	r2, [r2, #8]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	6892      	ldr	r2, [r2, #8]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	6891      	ldr	r1, [r2, #8]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <ADC_Init+0x1f0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	6892      	ldr	r2, [r2, #8]
 8001d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	6891      	ldr	r1, [r2, #8]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	6892      	ldr	r2, [r2, #8]
 8001d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	6891      	ldr	r1, [r2, #8]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e00f      	b.n	8001da6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	6892      	ldr	r2, [r2, #8]
 8001d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	6892      	ldr	r2, [r2, #8]
 8001da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	6892      	ldr	r2, [r2, #8]
 8001db0:	f022 0202 	bic.w	r2, r2, #2
 8001db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	6891      	ldr	r1, [r2, #8]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6992      	ldr	r2, [r2, #24]
 8001dc4:	0052      	lsls	r2, r2, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	6852      	ldr	r2, [r2, #4]
 8001dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	6852      	ldr	r2, [r2, #4]
 8001dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	6851      	ldr	r1, [r2, #4]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0352      	lsls	r2, r2, #13
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e007      	b.n	8001e1c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	6852      	ldr	r2, [r2, #4]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	69d2      	ldr	r2, [r2, #28]
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0512      	lsls	r2, r2, #20
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	6892      	ldr	r2, [r2, #8]
 8001e4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	6891      	ldr	r1, [r2, #8]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001e62:	0252      	lsls	r2, r2, #9
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	6892      	ldr	r2, [r2, #8]
 8001e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	6891      	ldr	r1, [r2, #8]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6952      	ldr	r2, [r2, #20]
 8001e86:	0292      	lsls	r2, r2, #10
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40012300 	.word	0x40012300
 8001e9c:	0f000001 	.word	0x0f000001

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	05fa0000 	.word	0x05fa0000

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	4909      	ldr	r1, [pc, #36]	; (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	490d      	ldr	r1, [pc, #52]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	4909      	ldr	r1, [pc, #36]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fda:	2101      	movs	r1, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	1e59      	subs	r1, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff90 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff2b 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff40 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff90 	bl	8001f94 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5f 	bl	8001f40 <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff33 	bl	8001f04 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d004      	beq.n	80020dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e00c      	b.n	80020f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2205      	movs	r2, #5
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e175      	b.n	8002410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 8164 	bne.w	800240a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d00b      	beq.n	8002162 <HAL_GPIO_Init+0x5e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002156:	2b11      	cmp	r3, #17
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b12      	cmp	r3, #18
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x100>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d123      	bne.n	800224c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80be 	beq.w	800240a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4a65      	ldr	r2, [pc, #404]	; (8002424 <HAL_GPIO_Init+0x320>)
 8002290:	4b64      	ldr	r3, [pc, #400]	; (8002424 <HAL_GPIO_Init+0x320>)
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b62      	ldr	r3, [pc, #392]	; (8002424 <HAL_GPIO_Init+0x320>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022a6:	4a60      	ldr	r2, [pc, #384]	; (8002428 <HAL_GPIO_Init+0x324>)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a57      	ldr	r2, [pc, #348]	; (800242c <HAL_GPIO_Init+0x328>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d037      	beq.n	8002342 <HAL_GPIO_Init+0x23e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a56      	ldr	r2, [pc, #344]	; (8002430 <HAL_GPIO_Init+0x32c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d031      	beq.n	800233e <HAL_GPIO_Init+0x23a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a55      	ldr	r2, [pc, #340]	; (8002434 <HAL_GPIO_Init+0x330>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02b      	beq.n	800233a <HAL_GPIO_Init+0x236>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a54      	ldr	r2, [pc, #336]	; (8002438 <HAL_GPIO_Init+0x334>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x232>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a53      	ldr	r2, [pc, #332]	; (800243c <HAL_GPIO_Init+0x338>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x22e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_GPIO_Init+0x33c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x22a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_GPIO_Init+0x340>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x226>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_GPIO_Init+0x344>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x222>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	; (800244c <HAL_GPIO_Init+0x348>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x21e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4e      	ldr	r2, [pc, #312]	; (8002450 <HAL_GPIO_Init+0x34c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x21a>
 800231a:	2309      	movs	r3, #9
 800231c:	e012      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800231e:	230a      	movs	r3, #10
 8002320:	e010      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002322:	2308      	movs	r3, #8
 8002324:	e00e      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002326:	2307      	movs	r3, #7
 8002328:	e00c      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800232a:	2306      	movs	r3, #6
 800232c:	e00a      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800232e:	2305      	movs	r3, #5
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x240>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x240>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002354:	4934      	ldr	r1, [pc, #208]	; (8002428 <HAL_GPIO_Init+0x324>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <HAL_GPIO_Init+0x350>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002386:	4a33      	ldr	r2, [pc, #204]	; (8002454 <HAL_GPIO_Init+0x350>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_GPIO_Init+0x350>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <HAL_GPIO_Init+0x350>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_GPIO_Init+0x350>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <HAL_GPIO_Init+0x350>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_GPIO_Init+0x350>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_GPIO_Init+0x350>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f ae86 	bls.w	8002124 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	3724      	adds	r7, #36	; 0x24
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40023800 	.word	0x40023800
 8002428:	40013800 	.word	0x40013800
 800242c:	40020000 	.word	0x40020000
 8002430:	40020400 	.word	0x40020400
 8002434:	40020800 	.word	0x40020800
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40021000 	.word	0x40021000
 8002440:	40021400 	.word	0x40021400
 8002444:	40021800 	.word	0x40021800
 8002448:	40021c00 	.word	0x40021c00
 800244c:	40022000 	.word	0x40022000
 8002450:	40022400 	.word	0x40022400
 8002454:	40013c00 	.word	0x40013c00

08002458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e001      	b.n	800247a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e291      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8087 	beq.w	80025ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e0:	4b96      	ldr	r3, [pc, #600]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d00c      	beq.n	8002506 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ec:	4b93      	ldr	r3, [pc, #588]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d112      	bne.n	800251e <HAL_RCC_OscConfig+0x62>
 80024f8:	4b90      	ldr	r3, [pc, #576]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d10b      	bne.n	800251e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002506:	4b8d      	ldr	r3, [pc, #564]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d06c      	beq.n	80025ec <HAL_RCC_OscConfig+0x130>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d168      	bne.n	80025ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e26b      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x7a>
 8002528:	4a84      	ldr	r2, [pc, #528]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800252a:	4b84      	ldr	r3, [pc, #528]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e02e      	b.n	8002594 <HAL_RCC_OscConfig+0xd8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x9c>
 800253e:	4a7f      	ldr	r2, [pc, #508]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4a7c      	ldr	r2, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e01d      	b.n	8002594 <HAL_RCC_OscConfig+0xd8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0xc0>
 8002562:	4a76      	ldr	r2, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002564:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4a73      	ldr	r2, [pc, #460]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002570:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xd8>
 800257c:	4a6f      	ldr	r2, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800257e:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4a6c      	ldr	r2, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800258a:	4b6c      	ldr	r3, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff f9ca 	bl	8001934 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff f9c6 	bl	8001934 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e21f      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xe8>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff f9b6 	bl	8001934 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f9b2 	bl	8001934 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e20b      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x110>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d069      	beq.n	80026ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002606:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b08      	cmp	r3, #8
 8002610:	d11c      	bne.n	800264c <HAL_RCC_OscConfig+0x190>
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_RCC_OscConfig+0x17a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e1df      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	4941      	ldr	r1, [pc, #260]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	e040      	b.n	80026ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d023      	beq.n	800269c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002654:	4a39      	ldr	r2, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002656:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff f968 	bl	8001934 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7ff f964 	bl	8001934 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1bd      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	492d      	ldr	r1, [pc, #180]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
 800269a:	e018      	b.n	80026ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269c:	4a27      	ldr	r2, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800269e:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7ff f944 	bl	8001934 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b0:	f7ff f940 	bl	8001934 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e199      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d038      	beq.n	800274c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d019      	beq.n	8002716 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e2:	4a16      	ldr	r2, [pc, #88]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCC_OscConfig+0x280>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7ff f921 	bl	8001934 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7ff f91d 	bl	8001934 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e176      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800270a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x23a>
 8002714:	e01a      	b.n	800274c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_RCC_OscConfig+0x280>)
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCC_OscConfig+0x280>)
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7ff f907 	bl	8001934 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7ff f903 	bl	8001934 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d903      	bls.n	8002740 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e15c      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
 800273c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b91      	ldr	r3, [pc, #580]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ee      	bne.n	800272a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a4 	beq.w	80028a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4a88      	ldr	r2, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002768:	4b87      	ldr	r3, [pc, #540]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b85      	ldr	r3, [pc, #532]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002782:	4b82      	ldr	r3, [pc, #520]	; (800298c <HAL_RCC_OscConfig+0x4d0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800278e:	4a7f      	ldr	r2, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x4d0>)
 8002790:	4b7e      	ldr	r3, [pc, #504]	; (800298c <HAL_RCC_OscConfig+0x4d0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279a:	f7ff f8cb 	bl	8001934 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7ff f8c7 	bl	8001934 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e120      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b4:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x4d0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x31a>
 80027c8:	4a6f      	ldr	r2, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	e02d      	b.n	8002832 <HAL_RCC_OscConfig+0x376>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x33c>
 80027de:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	4b69      	ldr	r3, [pc, #420]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4a67      	ldr	r2, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
 80027f6:	e01c      	b.n	8002832 <HAL_RCC_OscConfig+0x376>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x35e>
 8002800:	4a61      	ldr	r2, [pc, #388]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	4b61      	ldr	r3, [pc, #388]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800280e:	4b5e      	ldr	r3, [pc, #376]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	e00b      	b.n	8002832 <HAL_RCC_OscConfig+0x376>
 800281a:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800281c:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	; 0x70
 8002826:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002828:	4b57      	ldr	r3, [pc, #348]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d015      	beq.n	8002866 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7ff f87b 	bl	8001934 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff f877 	bl	8001934 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0ce      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ee      	beq.n	8002842 <HAL_RCC_OscConfig+0x386>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7ff f865 	bl	8001934 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7ff f861 	bl	8001934 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4a3c      	ldr	r2, [pc, #240]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80a4 	beq.w	80029f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d06b      	beq.n	8002990 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d149      	bne.n	8002954 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80028c2:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff f832 	bl	8001934 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff f82e 	bl	8001934 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e087      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f2:	4925      	ldr	r1, [pc, #148]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	4313      	orrs	r3, r2
 800291a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800291e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff f802 	bl	8001934 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fffe 	bl	8001934 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e057      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x478>
 8002952:	e04f      	b.n	80029f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe ffe8 	bl	8001934 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe ffe4 	bl	8001934 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e03d      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x4ac>
 8002986:	e035      	b.n	80029f4 <HAL_RCC_OscConfig+0x538>
 8002988:	40023800 	.word	0x40023800
 800298c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x544>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d028      	beq.n	80029f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d121      	bne.n	80029f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d11a      	bne.n	80029f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d111      	bne.n	80029f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0d0      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 020f 	and.w	r2, r3, #15
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d210      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4967      	ldr	r1, [pc, #412]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 020f 	bic.w	r2, r3, #15
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 020f 	and.w	r2, r3, #15
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4a59      	ldr	r2, [pc, #356]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4a53      	ldr	r2, [pc, #332]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7e:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4950      	ldr	r1, [pc, #320]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d040      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d115      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e073      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae6:	4939      	ldr	r1, [pc, #228]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 0203 	bic.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af8:	f7fe ff1c 	bl	8001934 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b00:	f7fe ff18 	bl	8001934 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e053      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 020c 	and.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1eb      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 020f 	bic.w	r2, r3, #15
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4919      	ldr	r1, [pc, #100]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b82:	4912      	ldr	r1, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ba8:	5cd3      	ldrb	r3, [r2, r3]
 8002baa:	fa21 f303 	lsr.w	r3, r1, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fe78 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	080056c4 	.word	0x080056c4
 8002bd4:	20000078 	.word	0x20000078
 8002bd8:	2000007c 	.word	0x2000007c

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002be4:	2200      	movs	r2, #0
 8002be6:	60fa      	str	r2, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	617a      	str	r2, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	f002 020c 	and.w	r2, r2, #12
 8002bfc:	2a04      	cmp	r2, #4
 8002bfe:	d007      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c00:	2a08      	cmp	r2, #8
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	f040 8090 	bne.w	8002d2a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c0a:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c0c:	613b      	str	r3, [r7, #16]
      break;
 8002c0e:	e08f      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c12:	613b      	str	r3, [r7, #16]
      break;
 8002c14:	e08c      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c16:	4a49      	ldr	r2, [pc, #292]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c18:	6852      	ldr	r2, [r2, #4]
 8002c1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c1e:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c20:	4a46      	ldr	r2, [pc, #280]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c22:	6852      	ldr	r2, [r2, #4]
 8002c24:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c28:	2a00      	cmp	r2, #0
 8002c2a:	d023      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	ea03 0301 	and.w	r3, r3, r1
 8002c42:	ea04 0402 	and.w	r4, r4, r2
 8002c46:	4a3f      	ldr	r2, [pc, #252]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c48:	fb02 f104 	mul.w	r1, r2, r4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	fb02 f203 	mul.w	r2, r2, r3
 8002c52:	440a      	add	r2, r1
 8002c54:	493b      	ldr	r1, [pc, #236]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c56:	fba3 0101 	umull	r0, r1, r3, r1
 8002c5a:	1853      	adds	r3, r2, r1
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	f7fd fb22 	bl	80002b0 <__aeabi_uldivmod>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e04c      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4a31      	ldr	r2, [pc, #196]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	0992      	lsrs	r2, r2, #6
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002c84:	f04f 0600 	mov.w	r6, #0
 8002c88:	ea05 0501 	and.w	r5, r5, r1
 8002c8c:	ea06 0602 	and.w	r6, r6, r2
 8002c90:	4629      	mov	r1, r5
 8002c92:	4632      	mov	r2, r6
 8002c94:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002c98:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002c9c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	465a      	mov	r2, fp
 8002ca4:	46aa      	mov	sl, r5
 8002ca6:	46b3      	mov	fp, r6
 8002ca8:	4655      	mov	r5, sl
 8002caa:	465e      	mov	r6, fp
 8002cac:	1b4d      	subs	r5, r1, r5
 8002cae:	eb62 0606 	sbc.w	r6, r2, r6
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	4632      	mov	r2, r6
 8002cb6:	0194      	lsls	r4, r2, #6
 8002cb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cbc:	018b      	lsls	r3, r1, #6
 8002cbe:	1a5b      	subs	r3, r3, r1
 8002cc0:	eb64 0402 	sbc.w	r4, r4, r2
 8002cc4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002cc8:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002ccc:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	464c      	mov	r4, r9
 8002cd4:	4655      	mov	r5, sl
 8002cd6:	465e      	mov	r6, fp
 8002cd8:	18ed      	adds	r5, r5, r3
 8002cda:	eb46 0604 	adc.w	r6, r6, r4
 8002cde:	462b      	mov	r3, r5
 8002ce0:	4634      	mov	r4, r6
 8002ce2:	02a2      	lsls	r2, r4, #10
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	461a      	mov	r2, r3
 8002d02:	4623      	mov	r3, r4
 8002d04:	f7fd fad4 	bl	80002b0 <__aeabi_uldivmod>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	613b      	str	r3, [r7, #16]
      break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d2c:	613b      	str	r3, [r7, #16]
      break;
 8002d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d30:	693b      	ldr	r3, [r7, #16]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	017d7840 	.word	0x017d7840

08002d48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000078 	.word	0x20000078

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff0 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d68:	4601      	mov	r1, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	080056d4 	.word	0x080056d4

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffdc 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d90:	4601      	mov	r1, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4a03      	ldr	r2, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	080056d4 	.word	0x080056d4

08002db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd8:	4a69      	ldr	r2, [pc, #420]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	4b69      	ldr	r3, [pc, #420]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	4966      	ldr	r1, [pc, #408]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d017      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0a:	495d      	ldr	r1, [pc, #372]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0c:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d017      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e46:	494e      	ldr	r1, [pc, #312]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e48:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 808b 	beq.w	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002eac:	4a35      	ldr	r2, [pc, #212]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fd3c 	bl	8001934 <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7fe fd38 	bl	8001934 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e355      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ed2:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d035      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d02e      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f06:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f12:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d114      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fd00 	bl	8001934 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe fcfc 	bl	8001934 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e317      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ee      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f66:	d111      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f68:	4805      	ldr	r0, [pc, #20]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f78:	400b      	ands	r3, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	6083      	str	r3, [r0, #8]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000
 8002f88:	0ffffcff 	.word	0x0ffffcff
 8002f8c:	4ab0      	ldr	r2, [pc, #704]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f8e:	4bb0      	ldr	r3, [pc, #704]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f96:	6093      	str	r3, [r2, #8]
 8002f98:	49ad      	ldr	r1, [pc, #692]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f9a:	4bad      	ldr	r3, [pc, #692]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d010      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fb6:	4aa6      	ldr	r2, [pc, #664]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fb8:	4ba5      	ldr	r3, [pc, #660]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fc6:	49a2      	ldr	r1, [pc, #648]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fc8:	4ba1      	ldr	r3, [pc, #644]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe4:	499a      	ldr	r1, [pc, #616]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fe6:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003006:	4992      	ldr	r1, [pc, #584]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003008:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003028:	4989      	ldr	r1, [pc, #548]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800302a:	4b89      	ldr	r3, [pc, #548]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800304a:	4981      	ldr	r1, [pc, #516]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800304c:	4b80      	ldr	r3, [pc, #512]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306c:	4978      	ldr	r1, [pc, #480]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800306e:	4b78      	ldr	r3, [pc, #480]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f023 0203 	bic.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800308e:	4970      	ldr	r1, [pc, #448]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f023 020c 	bic.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030b0:	4967      	ldr	r1, [pc, #412]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030b2:	4b67      	ldr	r3, [pc, #412]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030d2:	495f      	ldr	r1, [pc, #380]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030d4:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030f4:	4956      	ldr	r1, [pc, #344]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003116:	494e      	ldr	r1, [pc, #312]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003138:	4945      	ldr	r1, [pc, #276]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800313a:	4b45      	ldr	r3, [pc, #276]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800315a:	493d      	ldr	r1, [pc, #244]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800315c:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800317c:	4934      	ldr	r1, [pc, #208]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d011      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800319e:	492c      	ldr	r1, [pc, #176]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031bc:	d101      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031de:	491c      	ldr	r1, [pc, #112]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003200:	4913      	ldr	r1, [pc, #76]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d005      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003226:	f040 80d8 	bne.w	80033da <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003236:	f7fe fb7d 	bl	8001934 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800323e:	f7fe fb79 	bl	8001934 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	; 0x64
 800324a:	d903      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e196      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003250:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003254:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ee      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d021      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11d      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003274:	4b64      	ldr	r3, [pc, #400]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003282:	4b61      	ldr	r3, [pc, #388]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003288:	0e1b      	lsrs	r3, r3, #24
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003290:	495d      	ldr	r1, [pc, #372]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02e      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032da:	d129      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032dc:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f0:	0f1b      	lsrs	r3, r3, #28
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032f8:	4943      	ldr	r1, [pc, #268]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	019a      	lsls	r2, r3, #6
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	071b      	lsls	r3, r3, #28
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003318:	493b      	ldr	r1, [pc, #236]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800331c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003320:	f023 021f 	bic.w	r2, r3, #31
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	3b01      	subs	r3, #1
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	0e1b      	lsrs	r3, r3, #24
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800334c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003350:	0f1b      	lsrs	r3, r3, #28
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003358:	492b      	ldr	r1, [pc, #172]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	019a      	lsls	r2, r3, #6
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	431a      	orrs	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	061b      	lsls	r3, r3, #24
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	071b      	lsls	r3, r3, #28
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d011      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003384:	4920      	ldr	r1, [pc, #128]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	019a      	lsls	r2, r3, #6
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	041b      	lsls	r3, r3, #16
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	071b      	lsls	r3, r3, #28
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fe fabe 	bl	8001934 <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033bc:	f7fe faba 	bl	8001934 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0d7      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 80cd 	bne.w	800357c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ee:	f7fe faa1 	bl	8001934 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033f6:	f7fe fa9d 	bl	8001934 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d903      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0ba      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003408:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800340c:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003418:	d0ed      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d12a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003442:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	0f1b      	lsrs	r3, r3, #28
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800345e:	494a      	ldr	r1, [pc, #296]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	019a      	lsls	r2, r3, #6
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	071b      	lsls	r3, r3, #28
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800347e:	4942      	ldr	r1, [pc, #264]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003480:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003486:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d022      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ac:	d11d      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	0e1b      	lsrs	r3, r3, #24
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	0f1b      	lsrs	r3, r3, #28
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034ca:	492f      	ldr	r1, [pc, #188]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	019a      	lsls	r2, r3, #6
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	431a      	orrs	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	071b      	lsls	r3, r3, #28
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d028      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	0e1b      	lsrs	r3, r3, #24
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003504:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003512:	491d      	ldr	r1, [pc, #116]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	019a      	lsls	r2, r3, #6
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	431a      	orrs	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	071b      	lsls	r3, r3, #28
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003532:	4915      	ldr	r1, [pc, #84]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003548:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fe f9ee 	bl	8001934 <HAL_GetTick>
 8003558:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800355c:	f7fe f9ea 	bl	8001934 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e007      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800357a:	d1ef      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e01d      	b.n	80035da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fff8 	bl	80015a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fa68 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d122      	bne.n	800363e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d11b      	bne.n	800363e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f06f 0202 	mvn.w	r2, #2
 800360e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fa1d 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 800362a:	e005      	b.n	8003638 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fa0f 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa20 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b04      	cmp	r3, #4
 800364a:	d122      	bne.n	8003692 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d11b      	bne.n	8003692 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f06f 0204 	mvn.w	r2, #4
 8003662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f9f3 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 800367e:	e005      	b.n	800368c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9e5 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9f6 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d122      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11b      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f06f 0208 	mvn.w	r2, #8
 80036b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2204      	movs	r2, #4
 80036bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9c9 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80036d2:	e005      	b.n	80036e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9bb 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9cc 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d122      	bne.n	800373a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d11b      	bne.n	800373a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0210 	mvn.w	r2, #16
 800370a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2208      	movs	r2, #8
 8003710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f99f 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003726:	e005      	b.n	8003734 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f991 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9a2 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10e      	bne.n	8003766 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0201 	mvn.w	r2, #1
 800375e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd fae7 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d10e      	bne.n	8003792 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d107      	bne.n	8003792 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fd1d 	bl	80041cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a0:	d10e      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b80      	cmp	r3, #128	; 0x80
 80037ae:	d107      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fd10 	bl	80041e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d107      	bne.n	80037ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f950 	bl	8003a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b20      	cmp	r3, #32
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0220 	mvn.w	r2, #32
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fcd0 	bl	80041b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003836:	2302      	movs	r3, #2
 8003838:	e105      	b.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x226>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b14      	cmp	r3, #20
 800384e:	f200 80f0 	bhi.w	8003a32 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	080038ad 	.word	0x080038ad
 800385c:	08003a33 	.word	0x08003a33
 8003860:	08003a33 	.word	0x08003a33
 8003864:	08003a33 	.word	0x08003a33
 8003868:	080038ed 	.word	0x080038ed
 800386c:	08003a33 	.word	0x08003a33
 8003870:	08003a33 	.word	0x08003a33
 8003874:	08003a33 	.word	0x08003a33
 8003878:	0800392f 	.word	0x0800392f
 800387c:	08003a33 	.word	0x08003a33
 8003880:	08003a33 	.word	0x08003a33
 8003884:	08003a33 	.word	0x08003a33
 8003888:	0800396f 	.word	0x0800396f
 800388c:	08003a33 	.word	0x08003a33
 8003890:	08003a33 	.word	0x08003a33
 8003894:	08003a33 	.word	0x08003a33
 8003898:	080039b1 	.word	0x080039b1
 800389c:	08003a33 	.word	0x08003a33
 80038a0:	08003a33 	.word	0x08003a33
 80038a4:	08003a33 	.word	0x08003a33
 80038a8:	080039f1 	.word	0x080039f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f994 	bl	8003be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	6992      	ldr	r2, [r2, #24]
 80038c2:	f042 0208 	orr.w	r2, r2, #8
 80038c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	6992      	ldr	r2, [r2, #24]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	6991      	ldr	r1, [r2, #24]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	6912      	ldr	r2, [r2, #16]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	619a      	str	r2, [r3, #24]
      break;
 80038ea:	e0a3      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f9e6 	bl	8003cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	6992      	ldr	r2, [r2, #24]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	6992      	ldr	r2, [r2, #24]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	6991      	ldr	r1, [r2, #24]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	6912      	ldr	r2, [r2, #16]
 8003926:	0212      	lsls	r2, r2, #8
 8003928:	430a      	orrs	r2, r1
 800392a:	619a      	str	r2, [r3, #24]
      break;
 800392c:	e082      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fa3d 	bl	8003db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	69d2      	ldr	r2, [r2, #28]
 8003944:	f042 0208 	orr.w	r2, r2, #8
 8003948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	69d2      	ldr	r2, [r2, #28]
 8003954:	f022 0204 	bic.w	r2, r2, #4
 8003958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	69d1      	ldr	r1, [r2, #28]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	6912      	ldr	r2, [r2, #16]
 8003968:	430a      	orrs	r2, r1
 800396a:	61da      	str	r2, [r3, #28]
      break;
 800396c:	e062      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa93 	bl	8003ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	69d2      	ldr	r2, [r2, #28]
 8003984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	69d2      	ldr	r2, [r2, #28]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	69d1      	ldr	r1, [r2, #28]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	6912      	ldr	r2, [r2, #16]
 80039a8:	0212      	lsls	r2, r2, #8
 80039aa:	430a      	orrs	r2, r1
 80039ac:	61da      	str	r2, [r3, #28]
      break;
 80039ae:	e041      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 faca 	bl	8003f50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039c6:	f042 0208 	orr.w	r2, r2, #8
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	6912      	ldr	r2, [r2, #16]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039ee:	e021      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fafc 	bl	8003ff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	6912      	ldr	r2, [r2, #16]
 8003a2a:	0212      	lsls	r2, r2, #8
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a30:	e000      	b.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003a32:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop

08003a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a40      	ldr	r2, [pc, #256]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3d      	ldr	r2, [pc, #244]	; (8003bb8 <TIM_Base_SetConfig+0x118>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <TIM_Base_SetConfig+0x11c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d027      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2c      	ldr	r2, [pc, #176]	; (8003bb8 <TIM_Base_SetConfig+0x118>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d023      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <TIM_Base_SetConfig+0x11c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01f      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d017      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a28      	ldr	r2, [pc, #160]	; (8003bc8 <TIM_Base_SetConfig+0x128>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <TIM_Base_SetConfig+0x12c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00f      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <TIM_Base_SetConfig+0x130>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <TIM_Base_SetConfig+0x134>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a24      	ldr	r2, [pc, #144]	; (8003bd8 <TIM_Base_SetConfig+0x138>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <TIM_Base_SetConfig+0x13c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d108      	bne.n	8003b64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0xf8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40010400 	.word	0x40010400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	40001800 	.word	0x40001800
 8003bd8:	40001c00 	.word	0x40001c00
 8003bdc:	40002000 	.word	0x40002000

08003be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0201 	bic.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <TIM_OC1_SetConfig+0xd8>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0302 	bic.w	r3, r3, #2
 8003c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <TIM_OC1_SetConfig+0xdc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC1_SetConfig+0x64>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <TIM_OC1_SetConfig+0xe0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10c      	bne.n	8003c5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0308 	bic.w	r3, r3, #8
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <TIM_OC1_SetConfig+0xdc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC1_SetConfig+0x8e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <TIM_OC1_SetConfig+0xe0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d111      	bne.n	8003c92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	fffeff8f 	.word	0xfffeff8f
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0210 	bic.w	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <TIM_OC2_SetConfig+0xe4>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0320 	bic.w	r3, r3, #32
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a23      	ldr	r2, [pc, #140]	; (8003dac <TIM_OC2_SetConfig+0xe8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC2_SetConfig+0x68>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <TIM_OC2_SetConfig+0xec>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a18      	ldr	r2, [pc, #96]	; (8003dac <TIM_OC2_SetConfig+0xe8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_OC2_SetConfig+0x94>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <TIM_OC2_SetConfig+0xec>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d113      	bne.n	8003d80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	feff8fff 	.word	0xfeff8fff
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40010400 	.word	0x40010400

08003db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <TIM_OC3_SetConfig+0xe0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <TIM_OC3_SetConfig+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_OC3_SetConfig+0x66>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <TIM_OC3_SetConfig+0xe8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10d      	bne.n	8003e36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <TIM_OC3_SetConfig+0xe4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_OC3_SetConfig+0x92>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <TIM_OC3_SetConfig+0xe8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d113      	bne.n	8003e6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	fffeff8f 	.word	0xfffeff8f
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <TIM_OC4_SetConfig+0xa4>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	031b      	lsls	r3, r3, #12
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <TIM_OC4_SetConfig+0xa8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_OC4_SetConfig+0x68>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <TIM_OC4_SetConfig+0xac>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d109      	bne.n	8003f1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	feff8fff 	.word	0xfeff8fff
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40010400 	.word	0x40010400

08003f50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <TIM_OC5_SetConfig+0x98>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a12      	ldr	r2, [pc, #72]	; (8003fec <TIM_OC5_SetConfig+0x9c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC5_SetConfig+0x5e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <TIM_OC5_SetConfig+0xa0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d109      	bne.n	8003fc2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	fffeff8f 	.word	0xfffeff8f
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <TIM_OC6_SetConfig+0x9c>)
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	051b      	lsls	r3, r3, #20
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <TIM_OC6_SetConfig+0xa0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_OC6_SetConfig+0x60>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <TIM_OC6_SetConfig+0xa4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d109      	bne.n	8004068 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	feff8fff 	.word	0xfeff8fff
 8004094:	40010000 	.word	0x40010000
 8004098:	40010400 	.word	0x40010400

0800409c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e06d      	b.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a30      	ldr	r2, [pc, #192]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a20      	ldr	r2, [pc, #128]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d01d      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10c      	bne.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40010000 	.word	0x40010000
 80041a0:	40010400 	.word	0x40010400
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40001800 	.word	0x40001800

080041b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e040      	b.n	8004288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd fa64 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f972 	bl	800451c <UART_SetConfig>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e022      	b.n	8004288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fc10 	bl	8004a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	6852      	ldr	r2, [r2, #4]
 800425a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800425e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	6892      	ldr	r2, [r2, #8]
 800426a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fc97 	bl	8004bb4 <UART_CheckIdleState>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d113      	bne.n	80042e8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00e      	beq.n	80042e8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8100 	beq.w	80044de <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      }
      return;
 80042e6:	e0fa      	b.n	80044de <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80d5 	beq.w	800449a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80ca 	beq.w	800449a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <HAL_UART_IRQHandler+0x9e>
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <HAL_UART_IRQHandler+0xc6>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2202      	movs	r2, #2
 8004348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800434e:	f043 0204 	orr.w	r2, r3, #4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <HAL_UART_IRQHandler+0xee>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2204      	movs	r2, #4
 8004370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004398:	2b00      	cmp	r3, #0
 800439a:	d009      	beq.n	80043b0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2208      	movs	r2, #8
 80043a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a8:	f043 0208 	orr.w	r2, r3, #8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00f      	beq.n	80043da <HAL_UART_IRQHandler+0x14a>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d07f      	beq.n	80044e2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d004      	beq.n	8004424 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004420:	2b00      	cmp	r3, #0
 8004422:	d031      	beq.n	8004488 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fc6f 	bl	8004d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d123      	bne.n	8004480 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	6892      	ldr	r2, [r2, #8]
 8004442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004446:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004454:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <HAL_UART_IRQHandler+0x260>)
 8004456:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd fe2e 	bl	80020be <HAL_DMA_Abort_IT>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004472:	4610      	mov	r0, r2
 8004474:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	e00e      	b.n	8004496 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f845 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447e:	e00a      	b.n	8004496 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f841 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004486:	e006      	b.n	8004496 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f83d 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004494:	e025      	b.n	80044e2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004496:	bf00      	nop
    return;
 8004498:	e023      	b.n	80044e2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d017      	beq.n	80044e6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
    }
    return;
 80044be:	e012      	b.n	80044e6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <HAL_UART_IRQHandler+0x258>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fc4d 	bl	8004d74 <UART_EndTransmit_IT>
    return;
 80044da:	bf00      	nop
 80044dc:	e004      	b.n	80044e8 <HAL_UART_IRQHandler+0x258>
      return;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <HAL_UART_IRQHandler+0x258>
    return;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <HAL_UART_IRQHandler+0x258>
    return;
 80044e6:	bf00      	nop
  }

}
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	08004d49 	.word	0x08004d49

080044f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	4bb3      	ldr	r3, [pc, #716]	; (800481c <UART_SetConfig+0x300>)
 8004550:	400b      	ands	r3, r1
 8004552:	6939      	ldr	r1, [r7, #16]
 8004554:	430b      	orrs	r3, r1
 8004556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	6852      	ldr	r2, [r2, #4]
 8004562:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68d2      	ldr	r2, [r2, #12]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	6892      	ldr	r2, [r2, #8]
 8004588:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4aa2      	ldr	r2, [pc, #648]	; (8004820 <UART_SetConfig+0x304>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d121      	bne.n	80045e0 <UART_SetConfig+0xc4>
 800459c:	4ba1      	ldr	r3, [pc, #644]	; (8004824 <UART_SetConfig+0x308>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d816      	bhi.n	80045d8 <UART_SetConfig+0xbc>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x94>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045cd 	.word	0x080045cd
 80045b8:	080045c7 	.word	0x080045c7
 80045bc:	080045d3 	.word	0x080045d3
 80045c0:	2301      	movs	r3, #1
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e150      	b.n	8004868 <UART_SetConfig+0x34c>
 80045c6:	2302      	movs	r3, #2
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e14d      	b.n	8004868 <UART_SetConfig+0x34c>
 80045cc:	2304      	movs	r3, #4
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e14a      	b.n	8004868 <UART_SetConfig+0x34c>
 80045d2:	2308      	movs	r3, #8
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e147      	b.n	8004868 <UART_SetConfig+0x34c>
 80045d8:	2310      	movs	r3, #16
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	bf00      	nop
 80045de:	e143      	b.n	8004868 <UART_SetConfig+0x34c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a90      	ldr	r2, [pc, #576]	; (8004828 <UART_SetConfig+0x30c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d134      	bne.n	8004654 <UART_SetConfig+0x138>
 80045ea:	4b8e      	ldr	r3, [pc, #568]	; (8004824 <UART_SetConfig+0x308>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d829      	bhi.n	800464c <UART_SetConfig+0x130>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0xe4>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004635 	.word	0x08004635
 8004604:	0800464d 	.word	0x0800464d
 8004608:	0800464d 	.word	0x0800464d
 800460c:	0800464d 	.word	0x0800464d
 8004610:	08004641 	.word	0x08004641
 8004614:	0800464d 	.word	0x0800464d
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800464d 	.word	0x0800464d
 8004620:	0800463b 	.word	0x0800463b
 8004624:	0800464d 	.word	0x0800464d
 8004628:	0800464d 	.word	0x0800464d
 800462c:	0800464d 	.word	0x0800464d
 8004630:	08004647 	.word	0x08004647
 8004634:	2300      	movs	r3, #0
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e116      	b.n	8004868 <UART_SetConfig+0x34c>
 800463a:	2302      	movs	r3, #2
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e113      	b.n	8004868 <UART_SetConfig+0x34c>
 8004640:	2304      	movs	r3, #4
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e110      	b.n	8004868 <UART_SetConfig+0x34c>
 8004646:	2308      	movs	r3, #8
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e10d      	b.n	8004868 <UART_SetConfig+0x34c>
 800464c:	2310      	movs	r3, #16
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	bf00      	nop
 8004652:	e109      	b.n	8004868 <UART_SetConfig+0x34c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a74      	ldr	r2, [pc, #464]	; (800482c <UART_SetConfig+0x310>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d120      	bne.n	80046a0 <UART_SetConfig+0x184>
 800465e:	4b71      	ldr	r3, [pc, #452]	; (8004824 <UART_SetConfig+0x308>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004668:	2b10      	cmp	r3, #16
 800466a:	d00f      	beq.n	800468c <UART_SetConfig+0x170>
 800466c:	2b10      	cmp	r3, #16
 800466e:	d802      	bhi.n	8004676 <UART_SetConfig+0x15a>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <UART_SetConfig+0x164>
 8004674:	e010      	b.n	8004698 <UART_SetConfig+0x17c>
 8004676:	2b20      	cmp	r3, #32
 8004678:	d005      	beq.n	8004686 <UART_SetConfig+0x16a>
 800467a:	2b30      	cmp	r3, #48	; 0x30
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x176>
 800467e:	e00b      	b.n	8004698 <UART_SetConfig+0x17c>
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e0f0      	b.n	8004868 <UART_SetConfig+0x34c>
 8004686:	2302      	movs	r3, #2
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e0ed      	b.n	8004868 <UART_SetConfig+0x34c>
 800468c:	2304      	movs	r3, #4
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e0ea      	b.n	8004868 <UART_SetConfig+0x34c>
 8004692:	2308      	movs	r3, #8
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e0e7      	b.n	8004868 <UART_SetConfig+0x34c>
 8004698:	2310      	movs	r3, #16
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	bf00      	nop
 800469e:	e0e3      	b.n	8004868 <UART_SetConfig+0x34c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a62      	ldr	r2, [pc, #392]	; (8004830 <UART_SetConfig+0x314>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d120      	bne.n	80046ec <UART_SetConfig+0x1d0>
 80046aa:	4b5e      	ldr	r3, [pc, #376]	; (8004824 <UART_SetConfig+0x308>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d00f      	beq.n	80046d8 <UART_SetConfig+0x1bc>
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d802      	bhi.n	80046c2 <UART_SetConfig+0x1a6>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <UART_SetConfig+0x1b0>
 80046c0:	e010      	b.n	80046e4 <UART_SetConfig+0x1c8>
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d005      	beq.n	80046d2 <UART_SetConfig+0x1b6>
 80046c6:	2bc0      	cmp	r3, #192	; 0xc0
 80046c8:	d009      	beq.n	80046de <UART_SetConfig+0x1c2>
 80046ca:	e00b      	b.n	80046e4 <UART_SetConfig+0x1c8>
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e0ca      	b.n	8004868 <UART_SetConfig+0x34c>
 80046d2:	2302      	movs	r3, #2
 80046d4:	77fb      	strb	r3, [r7, #31]
 80046d6:	e0c7      	b.n	8004868 <UART_SetConfig+0x34c>
 80046d8:	2304      	movs	r3, #4
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e0c4      	b.n	8004868 <UART_SetConfig+0x34c>
 80046de:	2308      	movs	r3, #8
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e0c1      	b.n	8004868 <UART_SetConfig+0x34c>
 80046e4:	2310      	movs	r3, #16
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	bf00      	nop
 80046ea:	e0bd      	b.n	8004868 <UART_SetConfig+0x34c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a50      	ldr	r2, [pc, #320]	; (8004834 <UART_SetConfig+0x318>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d124      	bne.n	8004740 <UART_SetConfig+0x224>
 80046f6:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <UART_SetConfig+0x308>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004704:	d012      	beq.n	800472c <UART_SetConfig+0x210>
 8004706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470a:	d802      	bhi.n	8004712 <UART_SetConfig+0x1f6>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <UART_SetConfig+0x204>
 8004710:	e012      	b.n	8004738 <UART_SetConfig+0x21c>
 8004712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004716:	d006      	beq.n	8004726 <UART_SetConfig+0x20a>
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d009      	beq.n	8004732 <UART_SetConfig+0x216>
 800471e:	e00b      	b.n	8004738 <UART_SetConfig+0x21c>
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e0a0      	b.n	8004868 <UART_SetConfig+0x34c>
 8004726:	2302      	movs	r3, #2
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e09d      	b.n	8004868 <UART_SetConfig+0x34c>
 800472c:	2304      	movs	r3, #4
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e09a      	b.n	8004868 <UART_SetConfig+0x34c>
 8004732:	2308      	movs	r3, #8
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e097      	b.n	8004868 <UART_SetConfig+0x34c>
 8004738:	2310      	movs	r3, #16
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	bf00      	nop
 800473e:	e093      	b.n	8004868 <UART_SetConfig+0x34c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <UART_SetConfig+0x31c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d124      	bne.n	8004794 <UART_SetConfig+0x278>
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <UART_SetConfig+0x308>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d012      	beq.n	8004780 <UART_SetConfig+0x264>
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d802      	bhi.n	8004766 <UART_SetConfig+0x24a>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <UART_SetConfig+0x258>
 8004764:	e012      	b.n	800478c <UART_SetConfig+0x270>
 8004766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476a:	d006      	beq.n	800477a <UART_SetConfig+0x25e>
 800476c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004770:	d009      	beq.n	8004786 <UART_SetConfig+0x26a>
 8004772:	e00b      	b.n	800478c <UART_SetConfig+0x270>
 8004774:	2301      	movs	r3, #1
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e076      	b.n	8004868 <UART_SetConfig+0x34c>
 800477a:	2302      	movs	r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e073      	b.n	8004868 <UART_SetConfig+0x34c>
 8004780:	2304      	movs	r3, #4
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e070      	b.n	8004868 <UART_SetConfig+0x34c>
 8004786:	2308      	movs	r3, #8
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e06d      	b.n	8004868 <UART_SetConfig+0x34c>
 800478c:	2310      	movs	r3, #16
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	bf00      	nop
 8004792:	e069      	b.n	8004868 <UART_SetConfig+0x34c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a28      	ldr	r2, [pc, #160]	; (800483c <UART_SetConfig+0x320>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d124      	bne.n	80047e8 <UART_SetConfig+0x2cc>
 800479e:	4b21      	ldr	r3, [pc, #132]	; (8004824 <UART_SetConfig+0x308>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d012      	beq.n	80047d4 <UART_SetConfig+0x2b8>
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b2:	d802      	bhi.n	80047ba <UART_SetConfig+0x29e>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <UART_SetConfig+0x2ac>
 80047b8:	e012      	b.n	80047e0 <UART_SetConfig+0x2c4>
 80047ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047be:	d006      	beq.n	80047ce <UART_SetConfig+0x2b2>
 80047c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047c4:	d009      	beq.n	80047da <UART_SetConfig+0x2be>
 80047c6:	e00b      	b.n	80047e0 <UART_SetConfig+0x2c4>
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e04c      	b.n	8004868 <UART_SetConfig+0x34c>
 80047ce:	2302      	movs	r3, #2
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e049      	b.n	8004868 <UART_SetConfig+0x34c>
 80047d4:	2304      	movs	r3, #4
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e046      	b.n	8004868 <UART_SetConfig+0x34c>
 80047da:	2308      	movs	r3, #8
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e043      	b.n	8004868 <UART_SetConfig+0x34c>
 80047e0:	2310      	movs	r3, #16
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	bf00      	nop
 80047e6:	e03f      	b.n	8004868 <UART_SetConfig+0x34c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <UART_SetConfig+0x324>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d138      	bne.n	8004864 <UART_SetConfig+0x348>
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <UART_SetConfig+0x308>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004800:	d026      	beq.n	8004850 <UART_SetConfig+0x334>
 8004802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004806:	d802      	bhi.n	800480e <UART_SetConfig+0x2f2>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <UART_SetConfig+0x328>
 800480c:	e026      	b.n	800485c <UART_SetConfig+0x340>
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004812:	d01a      	beq.n	800484a <UART_SetConfig+0x32e>
 8004814:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004818:	d01d      	beq.n	8004856 <UART_SetConfig+0x33a>
 800481a:	e01f      	b.n	800485c <UART_SetConfig+0x340>
 800481c:	efff69f3 	.word	0xefff69f3
 8004820:	40011000 	.word	0x40011000
 8004824:	40023800 	.word	0x40023800
 8004828:	40004400 	.word	0x40004400
 800482c:	40004800 	.word	0x40004800
 8004830:	40004c00 	.word	0x40004c00
 8004834:	40005000 	.word	0x40005000
 8004838:	40011400 	.word	0x40011400
 800483c:	40007800 	.word	0x40007800
 8004840:	40007c00 	.word	0x40007c00
 8004844:	2300      	movs	r3, #0
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e00e      	b.n	8004868 <UART_SetConfig+0x34c>
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x34c>
 8004850:	2304      	movs	r3, #4
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e008      	b.n	8004868 <UART_SetConfig+0x34c>
 8004856:	2308      	movs	r3, #8
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e005      	b.n	8004868 <UART_SetConfig+0x34c>
 800485c:	2310      	movs	r3, #16
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	bf00      	nop
 8004862:	e001      	b.n	8004868 <UART_SetConfig+0x34c>
 8004864:	2310      	movs	r3, #16
 8004866:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004870:	f040 8080 	bne.w	8004974 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004874:	7ffb      	ldrb	r3, [r7, #31]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d85c      	bhi.n	8004934 <UART_SetConfig+0x418>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <UART_SetConfig+0x364>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048c5 	.word	0x080048c5
 8004888:	080048e5 	.word	0x080048e5
 800488c:	08004935 	.word	0x08004935
 8004890:	080048fd 	.word	0x080048fd
 8004894:	08004935 	.word	0x08004935
 8004898:	08004935 	.word	0x08004935
 800489c:	08004935 	.word	0x08004935
 80048a0:	0800491d 	.word	0x0800491d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7fe fa5c 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80048a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	005a      	lsls	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	b29b      	uxth	r3, r3
 80048c0:	61bb      	str	r3, [r7, #24]
        break;
 80048c2:	e03a      	b.n	800493a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7fe fa60 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 80048c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	005a      	lsls	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	61bb      	str	r3, [r7, #24]
        break;
 80048e2:	e02a      	b.n	800493a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085a      	lsrs	r2, r3, #1
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <UART_SetConfig+0x54c>)
 80048ec:	4413      	add	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6852      	ldr	r2, [r2, #4]
 80048f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	61bb      	str	r3, [r7, #24]
        break;
 80048fa:	e01e      	b.n	800493a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fc:	f7fe f96e 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8004900:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	005a      	lsls	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	b29b      	uxth	r3, r3
 8004918:	61bb      	str	r3, [r7, #24]
        break;
 800491a:	e00e      	b.n	800493a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	b29b      	uxth	r3, r3
 8004930:	61bb      	str	r3, [r7, #24]
        break;
 8004932:	e002      	b.n	800493a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
        break;
 8004938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d916      	bls.n	800496e <UART_SetConfig+0x452>
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004946:	d212      	bcs.n	800496e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f023 030f 	bic.w	r3, r3, #15
 8004950:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	b29a      	uxth	r2, r3
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	4313      	orrs	r3, r2
 8004962:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	897a      	ldrh	r2, [r7, #10]
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	e070      	b.n	8004a50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
 8004972:	e06d      	b.n	8004a50 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004974:	7ffb      	ldrb	r3, [r7, #31]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d859      	bhi.n	8004a2e <UART_SetConfig+0x512>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <UART_SetConfig+0x464>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049e1 	.word	0x080049e1
 800498c:	08004a2f 	.word	0x08004a2f
 8004990:	080049f9 	.word	0x080049f9
 8004994:	08004a2f 	.word	0x08004a2f
 8004998:	08004a2f 	.word	0x08004a2f
 800499c:	08004a2f 	.word	0x08004a2f
 80049a0:	08004a17 	.word	0x08004a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7fe f9dc 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 80049a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	085a      	lsrs	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	441a      	add	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	b29b      	uxth	r3, r3
 80049be:	61bb      	str	r3, [r7, #24]
        break;
 80049c0:	e038      	b.n	8004a34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c2:	f7fe f9e1 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 80049c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	085a      	lsrs	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	b29b      	uxth	r3, r3
 80049dc:	61bb      	str	r3, [r7, #24]
        break;
 80049de:	e029      	b.n	8004a34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	085a      	lsrs	r2, r3, #1
 80049e6:	4b21      	ldr	r3, [pc, #132]	; (8004a6c <UART_SetConfig+0x550>)
 80049e8:	4413      	add	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6852      	ldr	r2, [r2, #4]
 80049ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	61bb      	str	r3, [r7, #24]
        break;
 80049f6:	e01d      	b.n	8004a34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f8:	f7fe f8f0 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 80049fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	085a      	lsrs	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	441a      	add	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	61bb      	str	r3, [r7, #24]
        break;
 8004a14:	e00e      	b.n	8004a34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	61bb      	str	r3, [r7, #24]
        break;
 8004a2c:	e002      	b.n	8004a34 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
        break;
 8004a32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	d908      	bls.n	8004a4c <UART_SetConfig+0x530>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d204      	bcs.n	8004a4c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e001      	b.n	8004a50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	01e84800 	.word	0x01e84800
 8004a6c:	00f42400 	.word	0x00f42400

08004a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	6852      	ldr	r2, [r2, #4]
 8004a8e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	6852      	ldr	r2, [r2, #4]
 8004ab0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	6852      	ldr	r2, [r2, #4]
 8004ad2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	6852      	ldr	r2, [r2, #4]
 8004af4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	6892      	ldr	r2, [r2, #8]
 8004b38:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b40:	430a      	orrs	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01a      	beq.n	8004b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	6852      	ldr	r2, [r2, #4]
 8004b5a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6e:	d10a      	bne.n	8004b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	6852      	ldr	r2, [r2, #4]
 8004b7a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	6852      	ldr	r2, [r2, #4]
 8004b9c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004bc2:	f7fc feb7 	bl	8001934 <HAL_GetTick>
 8004bc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d10e      	bne.n	8004bf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f814 	bl	8004c12 <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e00a      	b.n	8004c0a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c22:	e05d      	b.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d059      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2c:	f7fc fe82 	bl	8001934 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	1ad2      	subs	r2, r2, r3
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d802      	bhi.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d11b      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	6892      	ldr	r2, [r2, #8]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e042      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02b      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c96:	d123      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6892      	ldr	r2, [r2, #8]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e00f      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	401a      	ands	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d092      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	6892      	ldr	r2, [r2, #8]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff fbce 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff fbab 	bl	80044f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004de0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dae:	e003      	b.n	8004db8 <LoopCopyDataInit>

08004db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004db6:	3104      	adds	r1, #4

08004db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004db8:	480b      	ldr	r0, [pc, #44]	; (8004de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004dba:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004dc0:	d3f6      	bcc.n	8004db0 <CopyDataInit>
  ldr  r2, =_sbss
 8004dc2:	4a0b      	ldr	r2, [pc, #44]	; (8004df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004dc4:	e002      	b.n	8004dcc <LoopFillZerobss>

08004dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004dc8:	f842 3b04 	str.w	r3, [r2], #4

08004dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004dd0:	d3f9      	bcc.n	8004dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004dd2:	f7fc fd47 	bl	8001864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dd6:	f000 f817 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dda:	f7fb ffb5 	bl	8000d48 <main>
  bx  lr    
 8004dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004de0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004de4:	08005720 	.word	0x08005720
  ldr  r0, =_sdata
 8004de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004dec:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 8004df0:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 8004df4:	200002c4 	.word	0x200002c4

08004df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004df8:	e7fe      	b.n	8004df8 <ADC_IRQHandler>
	...

08004dfc <__errno>:
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <__errno+0x8>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000084 	.word	0x20000084

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4e0d      	ldr	r6, [pc, #52]	; (8004e40 <__libc_init_array+0x38>)
 8004e0c:	4c0d      	ldr	r4, [pc, #52]	; (8004e44 <__libc_init_array+0x3c>)
 8004e0e:	1ba4      	subs	r4, r4, r6
 8004e10:	10a4      	asrs	r4, r4, #2
 8004e12:	2500      	movs	r5, #0
 8004e14:	42a5      	cmp	r5, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	4e0b      	ldr	r6, [pc, #44]	; (8004e48 <__libc_init_array+0x40>)
 8004e1a:	4c0c      	ldr	r4, [pc, #48]	; (8004e4c <__libc_init_array+0x44>)
 8004e1c:	f000 fc3e 	bl	800569c <_init>
 8004e20:	1ba4      	subs	r4, r4, r6
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	2500      	movs	r5, #0
 8004e26:	42a5      	cmp	r5, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e30:	4798      	blx	r3
 8004e32:	3501      	adds	r5, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e3a:	4798      	blx	r3
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	08005718 	.word	0x08005718
 8004e44:	08005718 	.word	0x08005718
 8004e48:	08005718 	.word	0x08005718
 8004e4c:	0800571c 	.word	0x0800571c

08004e50 <memset>:
 8004e50:	4402      	add	r2, r0
 8004e52:	4603      	mov	r3, r0
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d100      	bne.n	8004e5a <memset+0xa>
 8004e58:	4770      	bx	lr
 8004e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5e:	e7f9      	b.n	8004e54 <memset+0x4>

08004e60 <siprintf>:
 8004e60:	b40e      	push	{r1, r2, r3}
 8004e62:	b500      	push	{lr}
 8004e64:	b09c      	sub	sp, #112	; 0x70
 8004e66:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e6c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004e70:	9002      	str	r0, [sp, #8]
 8004e72:	9006      	str	r0, [sp, #24]
 8004e74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e78:	480a      	ldr	r0, [pc, #40]	; (8004ea4 <siprintf+0x44>)
 8004e7a:	9104      	str	r1, [sp, #16]
 8004e7c:	9107      	str	r1, [sp, #28]
 8004e7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e86:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	a902      	add	r1, sp, #8
 8004e90:	f000 f866 	bl	8004f60 <_svfiprintf_r>
 8004e94:	9b02      	ldr	r3, [sp, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	b01c      	add	sp, #112	; 0x70
 8004e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ea0:	b003      	add	sp, #12
 8004ea2:	4770      	bx	lr
 8004ea4:	20000084 	.word	0x20000084

08004ea8 <__ssputs_r>:
 8004ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eac:	688e      	ldr	r6, [r1, #8]
 8004eae:	429e      	cmp	r6, r3
 8004eb0:	4682      	mov	sl, r0
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	4691      	mov	r9, r2
 8004eb6:	4698      	mov	r8, r3
 8004eb8:	d835      	bhi.n	8004f26 <__ssputs_r+0x7e>
 8004eba:	898a      	ldrh	r2, [r1, #12]
 8004ebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ec0:	d031      	beq.n	8004f26 <__ssputs_r+0x7e>
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	6909      	ldr	r1, [r1, #16]
 8004ec6:	1a6f      	subs	r7, r5, r1
 8004ec8:	6965      	ldr	r5, [r4, #20]
 8004eca:	2302      	movs	r3, #2
 8004ecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ed0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ed4:	f108 0301 	add.w	r3, r8, #1
 8004ed8:	443b      	add	r3, r7
 8004eda:	429d      	cmp	r5, r3
 8004edc:	bf38      	it	cc
 8004ede:	461d      	movcc	r5, r3
 8004ee0:	0553      	lsls	r3, r2, #21
 8004ee2:	d531      	bpl.n	8004f48 <__ssputs_r+0xa0>
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	f000 fb39 	bl	800555c <_malloc_r>
 8004eea:	4606      	mov	r6, r0
 8004eec:	b950      	cbnz	r0, 8004f04 <__ssputs_r+0x5c>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	f8ca 3000 	str.w	r3, [sl]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f04:	463a      	mov	r2, r7
 8004f06:	6921      	ldr	r1, [r4, #16]
 8004f08:	f000 fab4 	bl	8005474 <memcpy>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	6126      	str	r6, [r4, #16]
 8004f1a:	6165      	str	r5, [r4, #20]
 8004f1c:	443e      	add	r6, r7
 8004f1e:	1bed      	subs	r5, r5, r7
 8004f20:	6026      	str	r6, [r4, #0]
 8004f22:	60a5      	str	r5, [r4, #8]
 8004f24:	4646      	mov	r6, r8
 8004f26:	4546      	cmp	r6, r8
 8004f28:	bf28      	it	cs
 8004f2a:	4646      	movcs	r6, r8
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	f000 faaa 	bl	800548a <memmove>
 8004f36:	68a3      	ldr	r3, [r4, #8]
 8004f38:	1b9b      	subs	r3, r3, r6
 8004f3a:	60a3      	str	r3, [r4, #8]
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	441e      	add	r6, r3
 8004f40:	6026      	str	r6, [r4, #0]
 8004f42:	2000      	movs	r0, #0
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	462a      	mov	r2, r5
 8004f4a:	f000 fb65 	bl	8005618 <_realloc_r>
 8004f4e:	4606      	mov	r6, r0
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d1e1      	bne.n	8004f18 <__ssputs_r+0x70>
 8004f54:	6921      	ldr	r1, [r4, #16]
 8004f56:	4650      	mov	r0, sl
 8004f58:	f000 fab2 	bl	80054c0 <_free_r>
 8004f5c:	e7c7      	b.n	8004eee <__ssputs_r+0x46>
	...

08004f60 <_svfiprintf_r>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b09d      	sub	sp, #116	; 0x74
 8004f66:	4680      	mov	r8, r0
 8004f68:	9303      	str	r3, [sp, #12]
 8004f6a:	898b      	ldrh	r3, [r1, #12]
 8004f6c:	061c      	lsls	r4, r3, #24
 8004f6e:	460d      	mov	r5, r1
 8004f70:	4616      	mov	r6, r2
 8004f72:	d50f      	bpl.n	8004f94 <_svfiprintf_r+0x34>
 8004f74:	690b      	ldr	r3, [r1, #16]
 8004f76:	b96b      	cbnz	r3, 8004f94 <_svfiprintf_r+0x34>
 8004f78:	2140      	movs	r1, #64	; 0x40
 8004f7a:	f000 faef 	bl	800555c <_malloc_r>
 8004f7e:	6028      	str	r0, [r5, #0]
 8004f80:	6128      	str	r0, [r5, #16]
 8004f82:	b928      	cbnz	r0, 8004f90 <_svfiprintf_r+0x30>
 8004f84:	230c      	movs	r3, #12
 8004f86:	f8c8 3000 	str.w	r3, [r8]
 8004f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8e:	e0c5      	b.n	800511c <_svfiprintf_r+0x1bc>
 8004f90:	2340      	movs	r3, #64	; 0x40
 8004f92:	616b      	str	r3, [r5, #20]
 8004f94:	2300      	movs	r3, #0
 8004f96:	9309      	str	r3, [sp, #36]	; 0x24
 8004f98:	2320      	movs	r3, #32
 8004f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f9e:	2330      	movs	r3, #48	; 0x30
 8004fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fa4:	f04f 0b01 	mov.w	fp, #1
 8004fa8:	4637      	mov	r7, r6
 8004faa:	463c      	mov	r4, r7
 8004fac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d13c      	bne.n	800502e <_svfiprintf_r+0xce>
 8004fb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004fb8:	d00b      	beq.n	8004fd2 <_svfiprintf_r+0x72>
 8004fba:	4653      	mov	r3, sl
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	f7ff ff71 	bl	8004ea8 <__ssputs_r>
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	f000 80a3 	beq.w	8005112 <_svfiprintf_r+0x1b2>
 8004fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fce:	4453      	add	r3, sl
 8004fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd2:	783b      	ldrb	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 809c 	beq.w	8005112 <_svfiprintf_r+0x1b2>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	9307      	str	r3, [sp, #28]
 8004fe4:	9205      	str	r2, [sp, #20]
 8004fe6:	9306      	str	r3, [sp, #24]
 8004fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fec:	931a      	str	r3, [sp, #104]	; 0x68
 8004fee:	2205      	movs	r2, #5
 8004ff0:	7821      	ldrb	r1, [r4, #0]
 8004ff2:	4850      	ldr	r0, [pc, #320]	; (8005134 <_svfiprintf_r+0x1d4>)
 8004ff4:	f7fb f90c 	bl	8000210 <memchr>
 8004ff8:	1c67      	adds	r7, r4, #1
 8004ffa:	9b04      	ldr	r3, [sp, #16]
 8004ffc:	b9d8      	cbnz	r0, 8005036 <_svfiprintf_r+0xd6>
 8004ffe:	06d9      	lsls	r1, r3, #27
 8005000:	bf44      	itt	mi
 8005002:	2220      	movmi	r2, #32
 8005004:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005008:	071a      	lsls	r2, r3, #28
 800500a:	bf44      	itt	mi
 800500c:	222b      	movmi	r2, #43	; 0x2b
 800500e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005012:	7822      	ldrb	r2, [r4, #0]
 8005014:	2a2a      	cmp	r2, #42	; 0x2a
 8005016:	d016      	beq.n	8005046 <_svfiprintf_r+0xe6>
 8005018:	9a07      	ldr	r2, [sp, #28]
 800501a:	2100      	movs	r1, #0
 800501c:	200a      	movs	r0, #10
 800501e:	4627      	mov	r7, r4
 8005020:	3401      	adds	r4, #1
 8005022:	783b      	ldrb	r3, [r7, #0]
 8005024:	3b30      	subs	r3, #48	; 0x30
 8005026:	2b09      	cmp	r3, #9
 8005028:	d951      	bls.n	80050ce <_svfiprintf_r+0x16e>
 800502a:	b1c9      	cbz	r1, 8005060 <_svfiprintf_r+0x100>
 800502c:	e011      	b.n	8005052 <_svfiprintf_r+0xf2>
 800502e:	2b25      	cmp	r3, #37	; 0x25
 8005030:	d0c0      	beq.n	8004fb4 <_svfiprintf_r+0x54>
 8005032:	4627      	mov	r7, r4
 8005034:	e7b9      	b.n	8004faa <_svfiprintf_r+0x4a>
 8005036:	4a3f      	ldr	r2, [pc, #252]	; (8005134 <_svfiprintf_r+0x1d4>)
 8005038:	1a80      	subs	r0, r0, r2
 800503a:	fa0b f000 	lsl.w	r0, fp, r0
 800503e:	4318      	orrs	r0, r3
 8005040:	9004      	str	r0, [sp, #16]
 8005042:	463c      	mov	r4, r7
 8005044:	e7d3      	b.n	8004fee <_svfiprintf_r+0x8e>
 8005046:	9a03      	ldr	r2, [sp, #12]
 8005048:	1d11      	adds	r1, r2, #4
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	9103      	str	r1, [sp, #12]
 800504e:	2a00      	cmp	r2, #0
 8005050:	db01      	blt.n	8005056 <_svfiprintf_r+0xf6>
 8005052:	9207      	str	r2, [sp, #28]
 8005054:	e004      	b.n	8005060 <_svfiprintf_r+0x100>
 8005056:	4252      	negs	r2, r2
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	9207      	str	r2, [sp, #28]
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	783b      	ldrb	r3, [r7, #0]
 8005062:	2b2e      	cmp	r3, #46	; 0x2e
 8005064:	d10e      	bne.n	8005084 <_svfiprintf_r+0x124>
 8005066:	787b      	ldrb	r3, [r7, #1]
 8005068:	2b2a      	cmp	r3, #42	; 0x2a
 800506a:	f107 0101 	add.w	r1, r7, #1
 800506e:	d132      	bne.n	80050d6 <_svfiprintf_r+0x176>
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	1d1a      	adds	r2, r3, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	9203      	str	r2, [sp, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	bfb8      	it	lt
 800507c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005080:	3702      	adds	r7, #2
 8005082:	9305      	str	r3, [sp, #20]
 8005084:	4c2c      	ldr	r4, [pc, #176]	; (8005138 <_svfiprintf_r+0x1d8>)
 8005086:	7839      	ldrb	r1, [r7, #0]
 8005088:	2203      	movs	r2, #3
 800508a:	4620      	mov	r0, r4
 800508c:	f7fb f8c0 	bl	8000210 <memchr>
 8005090:	b138      	cbz	r0, 80050a2 <_svfiprintf_r+0x142>
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	1b00      	subs	r0, r0, r4
 8005096:	fa03 f000 	lsl.w	r0, r3, r0
 800509a:	9b04      	ldr	r3, [sp, #16]
 800509c:	4303      	orrs	r3, r0
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	3701      	adds	r7, #1
 80050a2:	7839      	ldrb	r1, [r7, #0]
 80050a4:	4825      	ldr	r0, [pc, #148]	; (800513c <_svfiprintf_r+0x1dc>)
 80050a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050aa:	2206      	movs	r2, #6
 80050ac:	1c7e      	adds	r6, r7, #1
 80050ae:	f7fb f8af 	bl	8000210 <memchr>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d035      	beq.n	8005122 <_svfiprintf_r+0x1c2>
 80050b6:	4b22      	ldr	r3, [pc, #136]	; (8005140 <_svfiprintf_r+0x1e0>)
 80050b8:	b9fb      	cbnz	r3, 80050fa <_svfiprintf_r+0x19a>
 80050ba:	9b03      	ldr	r3, [sp, #12]
 80050bc:	3307      	adds	r3, #7
 80050be:	f023 0307 	bic.w	r3, r3, #7
 80050c2:	3308      	adds	r3, #8
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	444b      	add	r3, r9
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
 80050cc:	e76c      	b.n	8004fa8 <_svfiprintf_r+0x48>
 80050ce:	fb00 3202 	mla	r2, r0, r2, r3
 80050d2:	2101      	movs	r1, #1
 80050d4:	e7a3      	b.n	800501e <_svfiprintf_r+0xbe>
 80050d6:	2300      	movs	r3, #0
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	4618      	mov	r0, r3
 80050dc:	240a      	movs	r4, #10
 80050de:	460f      	mov	r7, r1
 80050e0:	3101      	adds	r1, #1
 80050e2:	783a      	ldrb	r2, [r7, #0]
 80050e4:	3a30      	subs	r2, #48	; 0x30
 80050e6:	2a09      	cmp	r2, #9
 80050e8:	d903      	bls.n	80050f2 <_svfiprintf_r+0x192>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ca      	beq.n	8005084 <_svfiprintf_r+0x124>
 80050ee:	9005      	str	r0, [sp, #20]
 80050f0:	e7c8      	b.n	8005084 <_svfiprintf_r+0x124>
 80050f2:	fb04 2000 	mla	r0, r4, r0, r2
 80050f6:	2301      	movs	r3, #1
 80050f8:	e7f1      	b.n	80050de <_svfiprintf_r+0x17e>
 80050fa:	ab03      	add	r3, sp, #12
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462a      	mov	r2, r5
 8005100:	4b10      	ldr	r3, [pc, #64]	; (8005144 <_svfiprintf_r+0x1e4>)
 8005102:	a904      	add	r1, sp, #16
 8005104:	4640      	mov	r0, r8
 8005106:	f3af 8000 	nop.w
 800510a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800510e:	4681      	mov	r9, r0
 8005110:	d1d9      	bne.n	80050c6 <_svfiprintf_r+0x166>
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	065b      	lsls	r3, r3, #25
 8005116:	f53f af38 	bmi.w	8004f8a <_svfiprintf_r+0x2a>
 800511a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800511c:	b01d      	add	sp, #116	; 0x74
 800511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005122:	ab03      	add	r3, sp, #12
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	462a      	mov	r2, r5
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <_svfiprintf_r+0x1e4>)
 800512a:	a904      	add	r1, sp, #16
 800512c:	4640      	mov	r0, r8
 800512e:	f000 f881 	bl	8005234 <_printf_i>
 8005132:	e7ea      	b.n	800510a <_svfiprintf_r+0x1aa>
 8005134:	080056dc 	.word	0x080056dc
 8005138:	080056e2 	.word	0x080056e2
 800513c:	080056e6 	.word	0x080056e6
 8005140:	00000000 	.word	0x00000000
 8005144:	08004ea9 	.word	0x08004ea9

08005148 <_printf_common>:
 8005148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	4691      	mov	r9, r2
 800514e:	461f      	mov	r7, r3
 8005150:	688a      	ldr	r2, [r1, #8]
 8005152:	690b      	ldr	r3, [r1, #16]
 8005154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005158:	4293      	cmp	r3, r2
 800515a:	bfb8      	it	lt
 800515c:	4613      	movlt	r3, r2
 800515e:	f8c9 3000 	str.w	r3, [r9]
 8005162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005166:	4606      	mov	r6, r0
 8005168:	460c      	mov	r4, r1
 800516a:	b112      	cbz	r2, 8005172 <_printf_common+0x2a>
 800516c:	3301      	adds	r3, #1
 800516e:	f8c9 3000 	str.w	r3, [r9]
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	0699      	lsls	r1, r3, #26
 8005176:	bf42      	ittt	mi
 8005178:	f8d9 3000 	ldrmi.w	r3, [r9]
 800517c:	3302      	addmi	r3, #2
 800517e:	f8c9 3000 	strmi.w	r3, [r9]
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	f015 0506 	ands.w	r5, r5, #6
 8005188:	d107      	bne.n	800519a <_printf_common+0x52>
 800518a:	f104 0a19 	add.w	sl, r4, #25
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	f8d9 2000 	ldr.w	r2, [r9]
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	429d      	cmp	r5, r3
 8005198:	db29      	blt.n	80051ee <_printf_common+0xa6>
 800519a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	3300      	adds	r3, #0
 80051a2:	bf18      	it	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	0692      	lsls	r2, r2, #26
 80051a8:	d42e      	bmi.n	8005208 <_printf_common+0xc0>
 80051aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ae:	4639      	mov	r1, r7
 80051b0:	4630      	mov	r0, r6
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d021      	beq.n	80051fc <_printf_common+0xb4>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	68e5      	ldr	r5, [r4, #12]
 80051bc:	f8d9 2000 	ldr.w	r2, [r9]
 80051c0:	f003 0306 	and.w	r3, r3, #6
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	bf08      	it	eq
 80051c8:	1aad      	subeq	r5, r5, r2
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	6922      	ldr	r2, [r4, #16]
 80051ce:	bf0c      	ite	eq
 80051d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d4:	2500      	movne	r5, #0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bfc4      	itt	gt
 80051da:	1a9b      	subgt	r3, r3, r2
 80051dc:	18ed      	addgt	r5, r5, r3
 80051de:	f04f 0900 	mov.w	r9, #0
 80051e2:	341a      	adds	r4, #26
 80051e4:	454d      	cmp	r5, r9
 80051e6:	d11b      	bne.n	8005220 <_printf_common+0xd8>
 80051e8:	2000      	movs	r0, #0
 80051ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ee:	2301      	movs	r3, #1
 80051f0:	4652      	mov	r2, sl
 80051f2:	4639      	mov	r1, r7
 80051f4:	4630      	mov	r0, r6
 80051f6:	47c0      	blx	r8
 80051f8:	3001      	adds	r0, #1
 80051fa:	d103      	bne.n	8005204 <_printf_common+0xbc>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005204:	3501      	adds	r5, #1
 8005206:	e7c2      	b.n	800518e <_printf_common+0x46>
 8005208:	18e1      	adds	r1, r4, r3
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	2030      	movs	r0, #48	; 0x30
 800520e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005212:	4422      	add	r2, r4
 8005214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800521c:	3302      	adds	r3, #2
 800521e:	e7c4      	b.n	80051aa <_printf_common+0x62>
 8005220:	2301      	movs	r3, #1
 8005222:	4622      	mov	r2, r4
 8005224:	4639      	mov	r1, r7
 8005226:	4630      	mov	r0, r6
 8005228:	47c0      	blx	r8
 800522a:	3001      	adds	r0, #1
 800522c:	d0e6      	beq.n	80051fc <_printf_common+0xb4>
 800522e:	f109 0901 	add.w	r9, r9, #1
 8005232:	e7d7      	b.n	80051e4 <_printf_common+0x9c>

08005234 <_printf_i>:
 8005234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005238:	4617      	mov	r7, r2
 800523a:	7e0a      	ldrb	r2, [r1, #24]
 800523c:	b085      	sub	sp, #20
 800523e:	2a6e      	cmp	r2, #110	; 0x6e
 8005240:	4698      	mov	r8, r3
 8005242:	4606      	mov	r6, r0
 8005244:	460c      	mov	r4, r1
 8005246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005248:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800524c:	f000 80bc 	beq.w	80053c8 <_printf_i+0x194>
 8005250:	d81a      	bhi.n	8005288 <_printf_i+0x54>
 8005252:	2a63      	cmp	r2, #99	; 0x63
 8005254:	d02e      	beq.n	80052b4 <_printf_i+0x80>
 8005256:	d80a      	bhi.n	800526e <_printf_i+0x3a>
 8005258:	2a00      	cmp	r2, #0
 800525a:	f000 80c8 	beq.w	80053ee <_printf_i+0x1ba>
 800525e:	2a58      	cmp	r2, #88	; 0x58
 8005260:	f000 808a 	beq.w	8005378 <_printf_i+0x144>
 8005264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005268:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800526c:	e02a      	b.n	80052c4 <_printf_i+0x90>
 800526e:	2a64      	cmp	r2, #100	; 0x64
 8005270:	d001      	beq.n	8005276 <_printf_i+0x42>
 8005272:	2a69      	cmp	r2, #105	; 0x69
 8005274:	d1f6      	bne.n	8005264 <_printf_i+0x30>
 8005276:	6821      	ldr	r1, [r4, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800527e:	d023      	beq.n	80052c8 <_printf_i+0x94>
 8005280:	1d11      	adds	r1, r2, #4
 8005282:	6019      	str	r1, [r3, #0]
 8005284:	6813      	ldr	r3, [r2, #0]
 8005286:	e027      	b.n	80052d8 <_printf_i+0xa4>
 8005288:	2a73      	cmp	r2, #115	; 0x73
 800528a:	f000 80b4 	beq.w	80053f6 <_printf_i+0x1c2>
 800528e:	d808      	bhi.n	80052a2 <_printf_i+0x6e>
 8005290:	2a6f      	cmp	r2, #111	; 0x6f
 8005292:	d02a      	beq.n	80052ea <_printf_i+0xb6>
 8005294:	2a70      	cmp	r2, #112	; 0x70
 8005296:	d1e5      	bne.n	8005264 <_printf_i+0x30>
 8005298:	680a      	ldr	r2, [r1, #0]
 800529a:	f042 0220 	orr.w	r2, r2, #32
 800529e:	600a      	str	r2, [r1, #0]
 80052a0:	e003      	b.n	80052aa <_printf_i+0x76>
 80052a2:	2a75      	cmp	r2, #117	; 0x75
 80052a4:	d021      	beq.n	80052ea <_printf_i+0xb6>
 80052a6:	2a78      	cmp	r2, #120	; 0x78
 80052a8:	d1dc      	bne.n	8005264 <_printf_i+0x30>
 80052aa:	2278      	movs	r2, #120	; 0x78
 80052ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80052b0:	496e      	ldr	r1, [pc, #440]	; (800546c <_printf_i+0x238>)
 80052b2:	e064      	b.n	800537e <_printf_i+0x14a>
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80052ba:	1d11      	adds	r1, r2, #4
 80052bc:	6019      	str	r1, [r3, #0]
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0a3      	b.n	8005410 <_printf_i+0x1dc>
 80052c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80052cc:	f102 0104 	add.w	r1, r2, #4
 80052d0:	6019      	str	r1, [r3, #0]
 80052d2:	d0d7      	beq.n	8005284 <_printf_i+0x50>
 80052d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	da03      	bge.n	80052e4 <_printf_i+0xb0>
 80052dc:	222d      	movs	r2, #45	; 0x2d
 80052de:	425b      	negs	r3, r3
 80052e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80052e4:	4962      	ldr	r1, [pc, #392]	; (8005470 <_printf_i+0x23c>)
 80052e6:	220a      	movs	r2, #10
 80052e8:	e017      	b.n	800531a <_printf_i+0xe6>
 80052ea:	6820      	ldr	r0, [r4, #0]
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80052f2:	d003      	beq.n	80052fc <_printf_i+0xc8>
 80052f4:	1d08      	adds	r0, r1, #4
 80052f6:	6018      	str	r0, [r3, #0]
 80052f8:	680b      	ldr	r3, [r1, #0]
 80052fa:	e006      	b.n	800530a <_printf_i+0xd6>
 80052fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005300:	f101 0004 	add.w	r0, r1, #4
 8005304:	6018      	str	r0, [r3, #0]
 8005306:	d0f7      	beq.n	80052f8 <_printf_i+0xc4>
 8005308:	880b      	ldrh	r3, [r1, #0]
 800530a:	4959      	ldr	r1, [pc, #356]	; (8005470 <_printf_i+0x23c>)
 800530c:	2a6f      	cmp	r2, #111	; 0x6f
 800530e:	bf14      	ite	ne
 8005310:	220a      	movne	r2, #10
 8005312:	2208      	moveq	r2, #8
 8005314:	2000      	movs	r0, #0
 8005316:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800531a:	6865      	ldr	r5, [r4, #4]
 800531c:	60a5      	str	r5, [r4, #8]
 800531e:	2d00      	cmp	r5, #0
 8005320:	f2c0 809c 	blt.w	800545c <_printf_i+0x228>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	f020 0004 	bic.w	r0, r0, #4
 800532a:	6020      	str	r0, [r4, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d13f      	bne.n	80053b0 <_printf_i+0x17c>
 8005330:	2d00      	cmp	r5, #0
 8005332:	f040 8095 	bne.w	8005460 <_printf_i+0x22c>
 8005336:	4675      	mov	r5, lr
 8005338:	2a08      	cmp	r2, #8
 800533a:	d10b      	bne.n	8005354 <_printf_i+0x120>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07da      	lsls	r2, r3, #31
 8005340:	d508      	bpl.n	8005354 <_printf_i+0x120>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	6862      	ldr	r2, [r4, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	bfde      	ittt	le
 800534a:	2330      	movle	r3, #48	; 0x30
 800534c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005354:	ebae 0305 	sub.w	r3, lr, r5
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	f8cd 8000 	str.w	r8, [sp]
 800535e:	463b      	mov	r3, r7
 8005360:	aa03      	add	r2, sp, #12
 8005362:	4621      	mov	r1, r4
 8005364:	4630      	mov	r0, r6
 8005366:	f7ff feef 	bl	8005148 <_printf_common>
 800536a:	3001      	adds	r0, #1
 800536c:	d155      	bne.n	800541a <_printf_i+0x1e6>
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	b005      	add	sp, #20
 8005374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005378:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800537c:	493c      	ldr	r1, [pc, #240]	; (8005470 <_printf_i+0x23c>)
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005386:	f100 0504 	add.w	r5, r0, #4
 800538a:	601d      	str	r5, [r3, #0]
 800538c:	d001      	beq.n	8005392 <_printf_i+0x15e>
 800538e:	6803      	ldr	r3, [r0, #0]
 8005390:	e002      	b.n	8005398 <_printf_i+0x164>
 8005392:	0655      	lsls	r5, r2, #25
 8005394:	d5fb      	bpl.n	800538e <_printf_i+0x15a>
 8005396:	8803      	ldrh	r3, [r0, #0]
 8005398:	07d0      	lsls	r0, r2, #31
 800539a:	bf44      	itt	mi
 800539c:	f042 0220 	orrmi.w	r2, r2, #32
 80053a0:	6022      	strmi	r2, [r4, #0]
 80053a2:	b91b      	cbnz	r3, 80053ac <_printf_i+0x178>
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	f022 0220 	bic.w	r2, r2, #32
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	2210      	movs	r2, #16
 80053ae:	e7b1      	b.n	8005314 <_printf_i+0xe0>
 80053b0:	4675      	mov	r5, lr
 80053b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80053b6:	fb02 3310 	mls	r3, r2, r0, r3
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053c0:	4603      	mov	r3, r0
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d1f5      	bne.n	80053b2 <_printf_i+0x17e>
 80053c6:	e7b7      	b.n	8005338 <_printf_i+0x104>
 80053c8:	6808      	ldr	r0, [r1, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	6949      	ldr	r1, [r1, #20]
 80053ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80053d2:	d004      	beq.n	80053de <_printf_i+0x1aa>
 80053d4:	1d10      	adds	r0, r2, #4
 80053d6:	6018      	str	r0, [r3, #0]
 80053d8:	6813      	ldr	r3, [r2, #0]
 80053da:	6019      	str	r1, [r3, #0]
 80053dc:	e007      	b.n	80053ee <_printf_i+0x1ba>
 80053de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053e2:	f102 0004 	add.w	r0, r2, #4
 80053e6:	6018      	str	r0, [r3, #0]
 80053e8:	6813      	ldr	r3, [r2, #0]
 80053ea:	d0f6      	beq.n	80053da <_printf_i+0x1a6>
 80053ec:	8019      	strh	r1, [r3, #0]
 80053ee:	2300      	movs	r3, #0
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	4675      	mov	r5, lr
 80053f4:	e7b1      	b.n	800535a <_printf_i+0x126>
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	1d11      	adds	r1, r2, #4
 80053fa:	6019      	str	r1, [r3, #0]
 80053fc:	6815      	ldr	r5, [r2, #0]
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	2100      	movs	r1, #0
 8005402:	4628      	mov	r0, r5
 8005404:	f7fa ff04 	bl	8000210 <memchr>
 8005408:	b108      	cbz	r0, 800540e <_printf_i+0x1da>
 800540a:	1b40      	subs	r0, r0, r5
 800540c:	6060      	str	r0, [r4, #4]
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	6123      	str	r3, [r4, #16]
 8005412:	2300      	movs	r3, #0
 8005414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005418:	e79f      	b.n	800535a <_printf_i+0x126>
 800541a:	6923      	ldr	r3, [r4, #16]
 800541c:	462a      	mov	r2, r5
 800541e:	4639      	mov	r1, r7
 8005420:	4630      	mov	r0, r6
 8005422:	47c0      	blx	r8
 8005424:	3001      	adds	r0, #1
 8005426:	d0a2      	beq.n	800536e <_printf_i+0x13a>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	079b      	lsls	r3, r3, #30
 800542c:	d507      	bpl.n	800543e <_printf_i+0x20a>
 800542e:	2500      	movs	r5, #0
 8005430:	f104 0919 	add.w	r9, r4, #25
 8005434:	68e3      	ldr	r3, [r4, #12]
 8005436:	9a03      	ldr	r2, [sp, #12]
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	429d      	cmp	r5, r3
 800543c:	db05      	blt.n	800544a <_printf_i+0x216>
 800543e:	68e0      	ldr	r0, [r4, #12]
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	4298      	cmp	r0, r3
 8005444:	bfb8      	it	lt
 8005446:	4618      	movlt	r0, r3
 8005448:	e793      	b.n	8005372 <_printf_i+0x13e>
 800544a:	2301      	movs	r3, #1
 800544c:	464a      	mov	r2, r9
 800544e:	4639      	mov	r1, r7
 8005450:	4630      	mov	r0, r6
 8005452:	47c0      	blx	r8
 8005454:	3001      	adds	r0, #1
 8005456:	d08a      	beq.n	800536e <_printf_i+0x13a>
 8005458:	3501      	adds	r5, #1
 800545a:	e7eb      	b.n	8005434 <_printf_i+0x200>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1a7      	bne.n	80053b0 <_printf_i+0x17c>
 8005460:	780b      	ldrb	r3, [r1, #0]
 8005462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005466:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546a:	e765      	b.n	8005338 <_printf_i+0x104>
 800546c:	080056fe 	.word	0x080056fe
 8005470:	080056ed 	.word	0x080056ed

08005474 <memcpy>:
 8005474:	b510      	push	{r4, lr}
 8005476:	1e43      	subs	r3, r0, #1
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	bd10      	pop	{r4, pc}
 8005480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005488:	e7f7      	b.n	800547a <memcpy+0x6>

0800548a <memmove>:
 800548a:	4288      	cmp	r0, r1
 800548c:	b510      	push	{r4, lr}
 800548e:	eb01 0302 	add.w	r3, r1, r2
 8005492:	d803      	bhi.n	800549c <memmove+0x12>
 8005494:	1e42      	subs	r2, r0, #1
 8005496:	4299      	cmp	r1, r3
 8005498:	d10c      	bne.n	80054b4 <memmove+0x2a>
 800549a:	bd10      	pop	{r4, pc}
 800549c:	4298      	cmp	r0, r3
 800549e:	d2f9      	bcs.n	8005494 <memmove+0xa>
 80054a0:	1881      	adds	r1, r0, r2
 80054a2:	1ad2      	subs	r2, r2, r3
 80054a4:	42d3      	cmn	r3, r2
 80054a6:	d100      	bne.n	80054aa <memmove+0x20>
 80054a8:	bd10      	pop	{r4, pc}
 80054aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80054b2:	e7f7      	b.n	80054a4 <memmove+0x1a>
 80054b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80054bc:	e7eb      	b.n	8005496 <memmove+0xc>
	...

080054c0 <_free_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4605      	mov	r5, r0
 80054c4:	2900      	cmp	r1, #0
 80054c6:	d045      	beq.n	8005554 <_free_r+0x94>
 80054c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054cc:	1f0c      	subs	r4, r1, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bfb8      	it	lt
 80054d2:	18e4      	addlt	r4, r4, r3
 80054d4:	f000 f8d6 	bl	8005684 <__malloc_lock>
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <_free_r+0x98>)
 80054da:	6813      	ldr	r3, [r2, #0]
 80054dc:	4610      	mov	r0, r2
 80054de:	b933      	cbnz	r3, 80054ee <_free_r+0x2e>
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	6014      	str	r4, [r2, #0]
 80054e4:	4628      	mov	r0, r5
 80054e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ea:	f000 b8cc 	b.w	8005686 <__malloc_unlock>
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	d90c      	bls.n	800550c <_free_r+0x4c>
 80054f2:	6821      	ldr	r1, [r4, #0]
 80054f4:	1862      	adds	r2, r4, r1
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bf04      	itt	eq
 80054fa:	681a      	ldreq	r2, [r3, #0]
 80054fc:	685b      	ldreq	r3, [r3, #4]
 80054fe:	6063      	str	r3, [r4, #4]
 8005500:	bf04      	itt	eq
 8005502:	1852      	addeq	r2, r2, r1
 8005504:	6022      	streq	r2, [r4, #0]
 8005506:	6004      	str	r4, [r0, #0]
 8005508:	e7ec      	b.n	80054e4 <_free_r+0x24>
 800550a:	4613      	mov	r3, r2
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	b10a      	cbz	r2, 8005514 <_free_r+0x54>
 8005510:	42a2      	cmp	r2, r4
 8005512:	d9fa      	bls.n	800550a <_free_r+0x4a>
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	1858      	adds	r0, r3, r1
 8005518:	42a0      	cmp	r0, r4
 800551a:	d10b      	bne.n	8005534 <_free_r+0x74>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	4401      	add	r1, r0
 8005520:	1858      	adds	r0, r3, r1
 8005522:	4282      	cmp	r2, r0
 8005524:	6019      	str	r1, [r3, #0]
 8005526:	d1dd      	bne.n	80054e4 <_free_r+0x24>
 8005528:	6810      	ldr	r0, [r2, #0]
 800552a:	6852      	ldr	r2, [r2, #4]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	4401      	add	r1, r0
 8005530:	6019      	str	r1, [r3, #0]
 8005532:	e7d7      	b.n	80054e4 <_free_r+0x24>
 8005534:	d902      	bls.n	800553c <_free_r+0x7c>
 8005536:	230c      	movs	r3, #12
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	e7d3      	b.n	80054e4 <_free_r+0x24>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	1821      	adds	r1, r4, r0
 8005540:	428a      	cmp	r2, r1
 8005542:	bf04      	itt	eq
 8005544:	6811      	ldreq	r1, [r2, #0]
 8005546:	6852      	ldreq	r2, [r2, #4]
 8005548:	6062      	str	r2, [r4, #4]
 800554a:	bf04      	itt	eq
 800554c:	1809      	addeq	r1, r1, r0
 800554e:	6021      	streq	r1, [r4, #0]
 8005550:	605c      	str	r4, [r3, #4]
 8005552:	e7c7      	b.n	80054e4 <_free_r+0x24>
 8005554:	bd38      	pop	{r3, r4, r5, pc}
 8005556:	bf00      	nop
 8005558:	20000124 	.word	0x20000124

0800555c <_malloc_r>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	1ccd      	adds	r5, r1, #3
 8005560:	f025 0503 	bic.w	r5, r5, #3
 8005564:	3508      	adds	r5, #8
 8005566:	2d0c      	cmp	r5, #12
 8005568:	bf38      	it	cc
 800556a:	250c      	movcc	r5, #12
 800556c:	2d00      	cmp	r5, #0
 800556e:	4606      	mov	r6, r0
 8005570:	db01      	blt.n	8005576 <_malloc_r+0x1a>
 8005572:	42a9      	cmp	r1, r5
 8005574:	d903      	bls.n	800557e <_malloc_r+0x22>
 8005576:	230c      	movs	r3, #12
 8005578:	6033      	str	r3, [r6, #0]
 800557a:	2000      	movs	r0, #0
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	f000 f881 	bl	8005684 <__malloc_lock>
 8005582:	4a23      	ldr	r2, [pc, #140]	; (8005610 <_malloc_r+0xb4>)
 8005584:	6814      	ldr	r4, [r2, #0]
 8005586:	4621      	mov	r1, r4
 8005588:	b991      	cbnz	r1, 80055b0 <_malloc_r+0x54>
 800558a:	4c22      	ldr	r4, [pc, #136]	; (8005614 <_malloc_r+0xb8>)
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	b91b      	cbnz	r3, 8005598 <_malloc_r+0x3c>
 8005590:	4630      	mov	r0, r6
 8005592:	f000 f867 	bl	8005664 <_sbrk_r>
 8005596:	6020      	str	r0, [r4, #0]
 8005598:	4629      	mov	r1, r5
 800559a:	4630      	mov	r0, r6
 800559c:	f000 f862 	bl	8005664 <_sbrk_r>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d126      	bne.n	80055f2 <_malloc_r+0x96>
 80055a4:	230c      	movs	r3, #12
 80055a6:	6033      	str	r3, [r6, #0]
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 f86c 	bl	8005686 <__malloc_unlock>
 80055ae:	e7e4      	b.n	800557a <_malloc_r+0x1e>
 80055b0:	680b      	ldr	r3, [r1, #0]
 80055b2:	1b5b      	subs	r3, r3, r5
 80055b4:	d41a      	bmi.n	80055ec <_malloc_r+0x90>
 80055b6:	2b0b      	cmp	r3, #11
 80055b8:	d90f      	bls.n	80055da <_malloc_r+0x7e>
 80055ba:	600b      	str	r3, [r1, #0]
 80055bc:	50cd      	str	r5, [r1, r3]
 80055be:	18cc      	adds	r4, r1, r3
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 f860 	bl	8005686 <__malloc_unlock>
 80055c6:	f104 000b 	add.w	r0, r4, #11
 80055ca:	1d23      	adds	r3, r4, #4
 80055cc:	f020 0007 	bic.w	r0, r0, #7
 80055d0:	1ac3      	subs	r3, r0, r3
 80055d2:	d01b      	beq.n	800560c <_malloc_r+0xb0>
 80055d4:	425a      	negs	r2, r3
 80055d6:	50e2      	str	r2, [r4, r3]
 80055d8:	bd70      	pop	{r4, r5, r6, pc}
 80055da:	428c      	cmp	r4, r1
 80055dc:	bf0d      	iteet	eq
 80055de:	6863      	ldreq	r3, [r4, #4]
 80055e0:	684b      	ldrne	r3, [r1, #4]
 80055e2:	6063      	strne	r3, [r4, #4]
 80055e4:	6013      	streq	r3, [r2, #0]
 80055e6:	bf18      	it	ne
 80055e8:	460c      	movne	r4, r1
 80055ea:	e7e9      	b.n	80055c0 <_malloc_r+0x64>
 80055ec:	460c      	mov	r4, r1
 80055ee:	6849      	ldr	r1, [r1, #4]
 80055f0:	e7ca      	b.n	8005588 <_malloc_r+0x2c>
 80055f2:	1cc4      	adds	r4, r0, #3
 80055f4:	f024 0403 	bic.w	r4, r4, #3
 80055f8:	42a0      	cmp	r0, r4
 80055fa:	d005      	beq.n	8005608 <_malloc_r+0xac>
 80055fc:	1a21      	subs	r1, r4, r0
 80055fe:	4630      	mov	r0, r6
 8005600:	f000 f830 	bl	8005664 <_sbrk_r>
 8005604:	3001      	adds	r0, #1
 8005606:	d0cd      	beq.n	80055a4 <_malloc_r+0x48>
 8005608:	6025      	str	r5, [r4, #0]
 800560a:	e7d9      	b.n	80055c0 <_malloc_r+0x64>
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	bf00      	nop
 8005610:	20000124 	.word	0x20000124
 8005614:	20000128 	.word	0x20000128

08005618 <_realloc_r>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	4607      	mov	r7, r0
 800561c:	4614      	mov	r4, r2
 800561e:	460e      	mov	r6, r1
 8005620:	b921      	cbnz	r1, 800562c <_realloc_r+0x14>
 8005622:	4611      	mov	r1, r2
 8005624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005628:	f7ff bf98 	b.w	800555c <_malloc_r>
 800562c:	b922      	cbnz	r2, 8005638 <_realloc_r+0x20>
 800562e:	f7ff ff47 	bl	80054c0 <_free_r>
 8005632:	4625      	mov	r5, r4
 8005634:	4628      	mov	r0, r5
 8005636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005638:	f000 f826 	bl	8005688 <_malloc_usable_size_r>
 800563c:	4284      	cmp	r4, r0
 800563e:	d90f      	bls.n	8005660 <_realloc_r+0x48>
 8005640:	4621      	mov	r1, r4
 8005642:	4638      	mov	r0, r7
 8005644:	f7ff ff8a 	bl	800555c <_malloc_r>
 8005648:	4605      	mov	r5, r0
 800564a:	2800      	cmp	r0, #0
 800564c:	d0f2      	beq.n	8005634 <_realloc_r+0x1c>
 800564e:	4631      	mov	r1, r6
 8005650:	4622      	mov	r2, r4
 8005652:	f7ff ff0f 	bl	8005474 <memcpy>
 8005656:	4631      	mov	r1, r6
 8005658:	4638      	mov	r0, r7
 800565a:	f7ff ff31 	bl	80054c0 <_free_r>
 800565e:	e7e9      	b.n	8005634 <_realloc_r+0x1c>
 8005660:	4635      	mov	r5, r6
 8005662:	e7e7      	b.n	8005634 <_realloc_r+0x1c>

08005664 <_sbrk_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4c06      	ldr	r4, [pc, #24]	; (8005680 <_sbrk_r+0x1c>)
 8005668:	2300      	movs	r3, #0
 800566a:	4605      	mov	r5, r0
 800566c:	4608      	mov	r0, r1
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	f7fc f8cc 	bl	800180c <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_sbrk_r+0x1a>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	b103      	cbz	r3, 800567e <_sbrk_r+0x1a>
 800567c:	602b      	str	r3, [r5, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	200002c0 	.word	0x200002c0

08005684 <__malloc_lock>:
 8005684:	4770      	bx	lr

08005686 <__malloc_unlock>:
 8005686:	4770      	bx	lr

08005688 <_malloc_usable_size_r>:
 8005688:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800568c:	2800      	cmp	r0, #0
 800568e:	f1a0 0004 	sub.w	r0, r0, #4
 8005692:	bfbc      	itt	lt
 8005694:	580b      	ldrlt	r3, [r1, r0]
 8005696:	18c0      	addlt	r0, r0, r3
 8005698:	4770      	bx	lr
	...

0800569c <_init>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr

080056a8 <_fini>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr

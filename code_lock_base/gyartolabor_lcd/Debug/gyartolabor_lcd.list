
gyartolabor_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002680  08002680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000044  200000bc  080027b0  000200bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000100  080027b0  00020100  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000058ec  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013ae  00000000  00000000  000259d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000570  00000000  00000000  00026d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004c0  00000000  00000000  000272f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002773  00000000  00000000  000277b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f5d  00000000  00000000  00029f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002be88  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016b8  00000000  00000000  0002bf04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002668 	.word	0x08002668

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c0 	.word	0x200000c0
 800020c:	08002668 	.word	0x08002668

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <pw_read>:
unsigned char lcd_num[2];



void pw_read(void)
{
 80005c0:	b598      	push	{r3, r4, r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	if(i<4){
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <pw_read+0x30>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d80e      	bhi.n	80005ea <pw_read+0x2a>
		pw_try[i]=get_key();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <pw_read+0x30>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461c      	mov	r4, r3
 80005d2:	f000 fbad 	bl	8000d30 <get_key>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <pw_read+0x34>)
 80005dc:	551a      	strb	r2, [r3, r4]
		i++;
 80005de:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <pw_read+0x30>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <pw_read+0x30>)
 80005e8:	701a      	strb	r2, [r3, #0]
	}
}
 80005ea:	bf00      	nop
 80005ec:	bd98      	pop	{r3, r4, r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000d8 	.word	0x200000d8
 80005f4:	200000f0 	.word	0x200000f0

080005f8 <compare_pw>:

// checks if pw match
int compare_pw(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0

	uint8_t k;

	for(k=0; k<4; k++){
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e00c      	b.n	800061e <compare_pw+0x26>
		if(pw_try[k]!=pw[k]){
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <compare_pw+0x3c>)
 8000608:	5cd2      	ldrb	r2, [r2, r3]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	490a      	ldr	r1, [pc, #40]	; (8000638 <compare_pw+0x40>)
 800060e:	5ccb      	ldrb	r3, [r1, r3]
 8000610:	429a      	cmp	r2, r3
 8000612:	d001      	beq.n	8000618 <compare_pw+0x20>
			return 1;
 8000614:	2301      	movs	r3, #1
 8000616:	e006      	b.n	8000626 <compare_pw+0x2e>
	for(k=0; k<4; k++){
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	3301      	adds	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b03      	cmp	r3, #3
 8000622:	d9ef      	bls.n	8000604 <compare_pw+0xc>
		}
	}

	return 0;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	200000f0 	.word	0x200000f0
 8000638:	20000000 	.word	0x20000000

0800063c <bckspc>:

void bckspc(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	LCD_cmd(0x01); // clear
 8000642:	2001      	movs	r0, #1
 8000644:	f000 f91c 	bl	8000880 <LCD_cmd>
	LCD_xy(4,1);
 8000648:	2101      	movs	r1, #1
 800064a:	2004      	movs	r0, #4
 800064c:	f000 f960 	bl	8000910 <LCD_xy>

	uint8_t temp=0;
 8000650:	2300      	movs	r3, #0
 8000652:	71fb      	strb	r3, [r7, #7]

	while(temp<(i-1)){
 8000654:	e00d      	b.n	8000672 <bckspc+0x36>

		sprintf(num, "%d", pw_try[temp]);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <bckspc+0x58>)
 800065a:	5cd3      	ldrb	r3, [r2, r3]
 800065c:	461a      	mov	r2, r3
 800065e:	490e      	ldr	r1, [pc, #56]	; (8000698 <bckspc+0x5c>)
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <bckspc+0x60>)
 8000662:	f001 fbe3 	bl	8001e2c <siprintf>
		LCD_string(num);
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <bckspc+0x60>)
 8000668:	f000 f93d 	bl	80008e6 <LCD_string>
		temp++;
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	3301      	adds	r3, #1
 8000670:	71fb      	strb	r3, [r7, #7]
	while(temp<(i-1)){
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <bckspc+0x64>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	429a      	cmp	r2, r3
 800067c:	dbeb      	blt.n	8000656 <bckspc+0x1a>
	}
	i--;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <bckspc+0x64>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3b01      	subs	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <bckspc+0x64>)
 8000688:	701a      	strb	r2, [r3, #0]

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000f0 	.word	0x200000f0
 8000698:	08002680 	.word	0x08002680
 800069c:	200000f4 	.word	0x200000f4
 80006a0:	200000d8 	.word	0x200000d8

080006a4 <read_matrix>:

void read_matrix(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

	matrix_search();
 80006aa:	f000 faf5 	bl	8000c98 <matrix_search>

	int key=get_key();
 80006ae:	f000 fb3f 	bl	8000d30 <get_key>
 80006b2:	6078      	str	r0, [r7, #4]
	if(key<10){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b09      	cmp	r3, #9
 80006b8:	dc0d      	bgt.n	80006d6 <read_matrix+0x32>
		if(i==4) return; // ha mar negyet beirtunk
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <read_matrix+0x90>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d032      	beq.n	8000728 <read_matrix+0x84>

		pw_read();
 80006c2:	f7ff ff7d 	bl	80005c0 <pw_read>
		sprintf(num, "%d", key);
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	491b      	ldr	r1, [pc, #108]	; (8000738 <read_matrix+0x94>)
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <read_matrix+0x98>)
 80006cc:	f001 fbae 	bl	8001e2c <siprintf>
		LCD_string(num);
 80006d0:	481a      	ldr	r0, [pc, #104]	; (800073c <read_matrix+0x98>)
 80006d2:	f000 f908 	bl	80008e6 <LCD_string>
	}

	if(key==10) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0a      	cmp	r3, #10
 80006da:	d11f      	bne.n	800071c <read_matrix+0x78>
		if(i!=4) return; // ha nem negyet irtunk be
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <read_matrix+0x90>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b04      	cmp	r3, #4
 80006e2:	d123      	bne.n	800072c <read_matrix+0x88>
		if(!compare_pw()){
 80006e4:	f7ff ff88 	bl	80005f8 <compare_pw>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d107      	bne.n	80006fe <read_matrix+0x5a>

			LCD_xy(1,2);
 80006ee:	2102      	movs	r1, #2
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f90d 	bl	8000910 <LCD_xy>
			LCD_string("succes");
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <read_matrix+0x9c>)
 80006f8:	f000 f8f5 	bl	80008e6 <LCD_string>
 80006fc:	e006      	b.n	800070c <read_matrix+0x68>
		}
		else{
			LCD_xy(1,2);
 80006fe:	2102      	movs	r1, #2
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f905 	bl	8000910 <LCD_xy>
			LCD_string("denied");
 8000706:	480f      	ldr	r0, [pc, #60]	; (8000744 <read_matrix+0xa0>)
 8000708:	f000 f8ed 	bl	80008e6 <LCD_string>
		}
		LCD_xy(4+i,1);
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <read_matrix+0x90>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	3304      	adds	r3, #4
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2101      	movs	r1, #1
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f8fa 	bl	8000910 <LCD_xy>
	}
	if(key==11) bckspc();
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b0b      	cmp	r3, #11
 8000720:	d105      	bne.n	800072e <read_matrix+0x8a>
 8000722:	f7ff ff8b 	bl	800063c <bckspc>
 8000726:	e002      	b.n	800072e <read_matrix+0x8a>
		if(i==4) return; // ha mar negyet beirtunk
 8000728:	bf00      	nop
 800072a:	e000      	b.n	800072e <read_matrix+0x8a>
		if(i!=4) return; // ha nem negyet irtunk be
 800072c:	bf00      	nop
}
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000d8 	.word	0x200000d8
 8000738:	08002680 	.word	0x08002680
 800073c:	200000f4 	.word	0x200000f4
 8000740:	08002684 	.word	0x08002684
 8000744:	0800268c 	.word	0x0800268c

08000748 <LCD_clock>:
 */

#include "main.h"
#include "lcd.h"

void LCD_clock(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

	HAL_Delay(6);
 800074c:	2006      	movs	r0, #6
 800074e:	f000 fbe9 	bl	8000f24 <HAL_Delay>
	// lcd e 1
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <LCD_clock+0x34>)
 800075a:	f000 feab 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800075e:	2005      	movs	r0, #5
 8000760:	f000 fbe0 	bl	8000f24 <HAL_Delay>
	//lcd e 0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <LCD_clock+0x34>)
 800076c:	f000 fea2 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fbd7 	bl	8000f24 <HAL_Delay>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <LCD_write>:

void LCD_write(uint8_t data){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]

	//felso 4 bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>7)&0x01));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	09db      	lsrs	r3, r3, #7
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000796:	482e      	ldr	r0, [pc, #184]	; (8000850 <LCD_write+0xd0>)
 8000798:	f000 fe8c 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>6)&0x01));
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	099b      	lsrs	r3, r3, #6
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	4829      	ldr	r0, [pc, #164]	; (8000854 <LCD_write+0xd4>)
 80007b0:	f000 fe80 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>5)&0x01));
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4823      	ldr	r0, [pc, #140]	; (8000854 <LCD_write+0xd4>)
 80007c8:	f000 fe74 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data>>4)&0x01));
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	091b      	lsrs	r3, r3, #4
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007de:	481d      	ldr	r0, [pc, #116]	; (8000854 <LCD_write+0xd4>)
 80007e0:	f000 fe68 	bl	80014b4 <HAL_GPIO_WritePin>

	LCD_clock();
 80007e4:	f7ff ffb0 	bl	8000748 <LCD_clock>

	//also 4
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>3)&0x01));
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <LCD_write+0xd0>)
 80007fc:	f000 fe5a 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>2)&0x01));
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4810      	ldr	r0, [pc, #64]	; (8000854 <LCD_write+0xd4>)
 8000814:	f000 fe4e 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>1)&0x01));
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	085b      	lsrs	r3, r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082a:	480a      	ldr	r0, [pc, #40]	; (8000854 <LCD_write+0xd4>)
 800082c:	f000 fe42 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data)&0x01));
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <LCD_write+0xd4>)
 8000840:	f000 fe38 	bl	80014b4 <HAL_GPIO_WritePin>

	LCD_clock();
 8000844:	f7ff ff80 	bl	8000748 <LCD_clock>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020400 	.word	0x40020400
 8000854:	40021000 	.word	0x40021000

08000858 <LCD_data>:

void LCD_data(uint8_t adat){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <LCD_data+0x24>)
 8000868:	f000 fe24 	bl	80014b4 <HAL_GPIO_WritePin>
	LCD_write(adat);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff86 	bl	8000780 <LCD_write>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <LCD_cmd>:

void LCD_cmd(uint8_t cmd){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <LCD_cmd+0x24>)
 8000890:	f000 fe10 	bl	80014b4 <HAL_GPIO_WritePin>
	LCD_write(cmd);
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff72 	bl	8000780 <LCD_write>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <LCD_init>:

void LCD_init(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	LCD_cmd(0x20);
 80008ac:	2020      	movs	r0, #32
 80008ae:	f7ff ffe7 	bl	8000880 <LCD_cmd>
	LCD_clock();
 80008b2:	f7ff ff49 	bl	8000748 <LCD_clock>
	LCD_clock();
 80008b6:	f7ff ff47 	bl	8000748 <LCD_clock>
	LCD_clock();
 80008ba:	f7ff ff45 	bl	8000748 <LCD_clock>
	// mod - 4 bit 2 sor, 5x8pont matrix
	// 3x - nem tudjuk milyen modban volt
	LCD_cmd(0x28);
 80008be:	2028      	movs	r0, #40	; 0x28
 80008c0:	f7ff ffde 	bl	8000880 <LCD_cmd>
	LCD_cmd(0x28);
 80008c4:	2028      	movs	r0, #40	; 0x28
 80008c6:	f7ff ffdb 	bl	8000880 <LCD_cmd>
	LCD_cmd(0x28);
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f7ff ffd8 	bl	8000880 <LCD_cmd>

	//alaphelyzet
	LCD_cmd(0x02);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff ffd5 	bl	8000880 <LCD_cmd>
	// lcd torles
	LCD_cmd(0x01);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ffd2 	bl	8000880 <LCD_cmd>
	//kurzor beallitasa
	LCD_cmd(0x08 | (1<<2) | (0<<1) | (0<<0));
 80008dc:	200c      	movs	r0, #12
 80008de:	f7ff ffcf 	bl	8000880 <LCD_cmd>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <LCD_string>:

void LCD_string(char *p){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]

	while(*p){
 80008ee:	e006      	b.n	80008fe <LCD_string+0x18>

		LCD_data(*p++);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffad 	bl	8000858 <LCD_data>
	while(*p){
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f4      	bne.n	80008f0 <LCD_string+0xa>
	}
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <LCD_xy>:

void LCD_xy(uint8_t x, uint8_t y){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	460a      	mov	r2, r1
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

		switch (y)
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	3b01      	subs	r3, #1
 8000924:	2b03      	cmp	r3, #3
 8000926:	d820      	bhi.n	800096a <LCD_xy+0x5a>
 8000928:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <LCD_xy+0x20>)
 800092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092e:	bf00      	nop
 8000930:	08000941 	.word	0x08000941
 8000934:	08000949 	.word	0x08000949
 8000938:	08000951 	.word	0x08000951
 800093c:	08000959 	.word	0x08000959
		{
			case 1:    // 1. sor
			position = LCD_START_DDADR + LCD_ADR_LINE1 + x;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	3b80      	subs	r3, #128	; 0x80
 8000944:	73fb      	strb	r3, [r7, #15]
			break;
 8000946:	e00b      	b.n	8000960 <LCD_xy+0x50>

			case 2:    // 2. sor
			position = LCD_START_DDADR + LCD_ADR_LINE2 + x;
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	3b40      	subs	r3, #64	; 0x40
 800094c:	73fb      	strb	r3, [r7, #15]
			break;
 800094e:	e007      	b.n	8000960 <LCD_xy+0x50>

			case 3:    // 3. sor
			position = LCD_START_DDADR + LCD_ADR_LINE3 + x;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3b70      	subs	r3, #112	; 0x70
 8000954:	73fb      	strb	r3, [r7, #15]
			break;
 8000956:	e003      	b.n	8000960 <LCD_xy+0x50>

			case 4:    // 4. sor
			position = LCD_START_DDADR + LCD_ADR_LINE4 + x;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	3b30      	subs	r3, #48	; 0x30
 800095c:	73fb      	strb	r3, [r7, #15]
			break;
 800095e:	bf00      	nop

			default:
			return;
		}
		LCD_cmd(position); // beallitas
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff8c 	bl	8000880 <LCD_cmd>
 8000968:	e000      	b.n	800096c <LCD_xy+0x5c>
			return;
 800096a:	bf00      	nop

}
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fa75 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f813 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 f86d 	bl	8000a60 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000986:	f7ff ff8f 	bl	80008a8 <LCD_init>
  LCD_cmd(0x01);
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff ff78 	bl	8000880 <LCD_cmd>
  LCD_cmd(0x80);
 8000990:	2080      	movs	r0, #128	; 0x80
 8000992:	f7ff ff75 	bl	8000880 <LCD_cmd>
  LCD_xy(4,1);
 8000996:	2101      	movs	r1, #1
 8000998:	2004      	movs	r0, #4
 800099a:	f7ff ffb9 	bl	8000910 <LCD_xy>
  //LCD_string("hello grg");
  uint8_t matrix_k=0;
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_matrix();
 80009a2:	f7ff fe7f 	bl	80006a4 <read_matrix>
 80009a6:	e7fc      	b.n	80009a2 <main+0x2e>

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	; 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	; 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fa30 	bl	8001e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <SystemClock_Config+0xb0>)
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <SystemClock_Config+0xb0>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <SystemClock_Config+0xb0>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <SystemClock_Config+0xb4>)
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <SystemClock_Config+0xb4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <SystemClock_Config+0xb4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fd67 	bl	80014e8 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a20:	f000 f8d6 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fff6 	bl	8001a30 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a4a:	f000 f8c1 	bl	8000bd0 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	; 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4a51      	ldr	r2, [pc, #324]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	4a4b      	ldr	r2, [pc, #300]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b48      	ldr	r3, [pc, #288]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4a45      	ldr	r2, [pc, #276]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000aa8:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	4a3f      	ldr	r2, [pc, #252]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <MX_GPIO_Init+0x15c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000adc:	4838      	ldr	r0, [pc, #224]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000ade:	f000 fce9 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f24f 4180 	movw	r1, #62592	; 0xf480
 8000ae8:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000aea:	f000 fce3 	bl	80014b4 <HAL_GPIO_WritePin>
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DATA_7_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000af4:	4834      	ldr	r0, [pc, #208]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000af6:	f000 fcdd 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KB_PC6_OUT_row4_GPIO_Port, KB_PC6_OUT_row4_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b00:	4832      	ldr	r0, [pc, #200]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000b02:	f000 fcd7 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KB_PC0_IN_LEFT_Pin */
  GPIO_InitStruct.Pin = KB_PC0_IN_LEFT_Pin;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KB_PC0_IN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4829      	ldr	r0, [pc, #164]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000b1c:	f000 fb08 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC3_OUT_row1_Pin KB_PC5_OUT_row3_Pin */
  GPIO_InitStruct.Pin = KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin;
 8000b20:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <MX_GPIO_Init+0x160>)
 8000b3a:	f000 faf9 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_DATA_4_Pin KB_PC4_OUT_row2_Pin
                           LCD_DATA_5_Pin LCD_DATA_6_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 8000b3e:	f24f 4380 	movw	r3, #62592	; 0xf480
 8000b42:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000b58:	f000 faea 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC1_IN_CENTER_Pin KB_PC2_IN_RIGHT_Pin */
  GPIO_InitStruct.Pin = KB_PC1_IN_CENTER_Pin|KB_PC2_IN_RIGHT_Pin;
 8000b5c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000b72:	f000 fadd 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DATA_7_Pin PB7 */
  GPIO_InitStruct.Pin = LCD_DATA_7_Pin|GPIO_PIN_7;
 8000b76:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000b90:	f000 face 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC6_OUT_row4_Pin */
  GPIO_InitStruct.Pin = KB_PC6_OUT_row4_Pin;
 8000b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KB_PC6_OUT_row4_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000bae:	f000 fabf 	bl	8001130 <HAL_GPIO_Init>

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40021400 	.word	0x40021400
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40021800 	.word	0x40021800

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <Error_Handler+0x6>

08000bd8 <matrix_row>:
GPIO_TypeDef *sor_gpio_port[4] = {KB_PC3_OUT_row1_GPIO_Port, KB_PC4_OUT_row2_GPIO_Port, KB_PC5_OUT_row3_GPIO_Port, KB_PC6_OUT_row4_GPIO_Port};

GPIO_TypeDef *matrix_gpio_port[7] = {KB_PC6_OUT_row4_GPIO_Port, KB_PC5_OUT_row3_GPIO_Port, KB_PC4_OUT_row2_GPIO_Port, KB_PC3_OUT_row1_GPIO_Port, KB_PC2_IN_RIGHT_GPIO_Port, KB_PC1_IN_CENTER_GPIO_Port, KB_PC0_IN_LEFT_GPIO_Port};


void matrix_row(uint8_t row){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]

	uint8_t i = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73fb      	strb	r3, [r7, #15]

	while(i<4){
 8000be6:	e020      	b.n	8000c2a <matrix_row+0x52>
		if(i==(row-1)) HAL_GPIO_WritePin(sor_gpio_port[i], sor_pin[i], GPIO_PIN_SET);
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d10c      	bne.n	8000c0c <matrix_row+0x34>
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <matrix_row+0x60>)
 8000bf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <matrix_row+0x64>)
 8000bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f000 fc55 	bl	80014b4 <HAL_GPIO_WritePin>
 8000c0a:	e00b      	b.n	8000c24 <matrix_row+0x4c>
		else HAL_GPIO_WritePin(sor_gpio_port[i], sor_pin[i], GPIO_PIN_RESET);
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <matrix_row+0x60>)
 8000c10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <matrix_row+0x64>)
 8000c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f000 fc48 	bl	80014b4 <HAL_GPIO_WritePin>

		i++;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	3301      	adds	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
	while(i<4){
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d9db      	bls.n	8000be8 <matrix_row+0x10>
	}
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000020 	.word	0x20000020
 8000c3c:	20000008 	.word	0x20000008

08000c40 <matrix_scann>:


uint8_t matrix_scann(void){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

	uint8_t bill = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]
	uint8_t seged = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	71bb      	strb	r3, [r7, #6]

	while(i<7){
 8000c52:	e015      	b.n	8000c80 <matrix_scann+0x40>
		seged=HAL_GPIO_ReadPin(matrix_gpio_port[i], matrix_pin[i]);
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <matrix_scann+0x50>)
 8000c58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <matrix_scann+0x54>)
 8000c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f000 fc0d 	bl	8001484 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	717b      	strb	r3, [r7, #5]
		bill=(bill<<1)+seged;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	797b      	ldrb	r3, [r7, #5]
 8000c76:	4413      	add	r3, r2
 8000c78:	71fb      	strb	r3, [r7, #7]
		i++;
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	71bb      	strb	r3, [r7, #6]
	while(i<7){
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d9e6      	bls.n	8000c54 <matrix_scann+0x14>
	}
		return bill;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000030 	.word	0x20000030
 8000c94:	20000010 	.word	0x20000010

08000c98 <matrix_search>:


int matrix_search(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	uint8_t num=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t bill=0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71bb      	strb	r3, [r7, #6]

	matrix_row(row);
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <matrix_search+0x8c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff94 	bl	8000bd8 <matrix_row>
	HAL_Delay(5);
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f000 f937 	bl	8000f24 <HAL_Delay>
	bill=matrix_scann();
 8000cb6:	f7ff ffc3 	bl	8000c40 <matrix_scann>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71bb      	strb	r3, [r7, #6]

	while(num<12){
 8000cbe:	e01a      	b.n	8000cf6 <matrix_search+0x5e>

		if(bill==billtomb[num]){
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <matrix_search+0x90>)
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	79ba      	ldrb	r2, [r7, #6]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d10e      	bne.n	8000cea <matrix_search+0x52>
			m_button2=num;
 8000ccc:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <matrix_search+0x94>)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	7013      	strb	r3, [r2, #0]

			while(matrix_scann()==billtomb[num]);
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffb4 	bl	8000c40 <matrix_scann>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <matrix_search+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d0f6      	beq.n	8000cd4 <matrix_search+0x3c>

			return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e017      	b.n	8000d1a <matrix_search+0x82>
		}
		else{

			m_button2=12;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <matrix_search+0x94>)
 8000cec:	220c      	movs	r2, #12
 8000cee:	701a      	strb	r2, [r3, #0]
			num++;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
	while(num<12){
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b0b      	cmp	r3, #11
 8000cfa:	d9e1      	bls.n	8000cc0 <matrix_search+0x28>
		}
	}

	if(row<4) row++;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <matrix_search+0x8c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d806      	bhi.n	8000d12 <matrix_search+0x7a>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <matrix_search+0x8c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <matrix_search+0x8c>)
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e002      	b.n	8000d18 <matrix_search+0x80>
	else row=1;
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <matrix_search+0x8c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004
 8000d28:	08002694 	.word	0x08002694
 8000d2c:	20000005 	.word	0x20000005

08000d30 <get_key>:

int get_key(void){
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	return m_button2;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <get_key+0x14>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000005 	.word	0x20000005

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x44>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f882 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x50>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x16>
		heap_end = &end;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <_sbrk+0x50>)
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <_sbrk+0x54>)
 8000df8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <_sbrk+0x50>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <_sbrk+0x50>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	466a      	mov	r2, sp
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d907      	bls.n	8000e1e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000e0e:	f000 ffdb 	bl	8001dc8 <__errno>
 8000e12:	4602      	mov	r2, r0
 8000e14:	230c      	movs	r3, #12
 8000e16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	e006      	b.n	8000e2c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <_sbrk+0x50>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <_sbrk+0x50>)
 8000e28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000dc 	.word	0x200000dc
 8000e38:	20000100 	.word	0x20000100

08000e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <SystemInit+0x28>)
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <SystemInit+0x28>)
 8000e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SystemInit+0x28>)
 8000e52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e56:	609a      	str	r2, [r3, #8]
#endif
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f92b 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f806 	bl	8000e84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff ff66 	bl	8000d48 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f937 	bl	8001116 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f90d 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000004c 	.word	0x2000004c
 8000edc:	20000054 	.word	0x20000054
 8000ee0:	20000050 	.word	0x20000050

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000054 	.word	0x20000054
 8000f08:	200000f8 	.word	0x200000f8

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000f8 	.word	0x200000f8

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_Delay+0x40>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad2      	subs	r2, r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3f7      	bcc.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000054 	.word	0x20000054

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	05fa0000 	.word	0x05fa0000

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	490d      	ldr	r1, [pc, #52]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	4909      	ldr	r1, [pc, #36]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	2201      	movs	r2, #1
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	401a      	ands	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001066:	2101      	movs	r1, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	1e59      	subs	r1, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff90 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff49 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff5e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff90 	bl	8001020 <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5f 	bl	8000fcc <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffb0 	bl	8001084 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e175      	b.n	800143c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8164 	bne.w	8001436 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d00b      	beq.n	800118e <HAL_GPIO_Init+0x5e>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001182:	2b11      	cmp	r3, #17
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b12      	cmp	r3, #18
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x100>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b12      	cmp	r3, #18
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80be 	beq.w	8001436 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_GPIO_Init+0x320>)
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <HAL_GPIO_Init+0x320>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_GPIO_Init+0x320>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012d2:	4a60      	ldr	r2, [pc, #384]	; (8001454 <HAL_GPIO_Init+0x324>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_GPIO_Init+0x328>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d037      	beq.n	800136e <HAL_GPIO_Init+0x23e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_GPIO_Init+0x32c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d031      	beq.n	800136a <HAL_GPIO_Init+0x23a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a55      	ldr	r2, [pc, #340]	; (8001460 <HAL_GPIO_Init+0x330>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d02b      	beq.n	8001366 <HAL_GPIO_Init+0x236>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a54      	ldr	r2, [pc, #336]	; (8001464 <HAL_GPIO_Init+0x334>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d025      	beq.n	8001362 <HAL_GPIO_Init+0x232>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a53      	ldr	r2, [pc, #332]	; (8001468 <HAL_GPIO_Init+0x338>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01f      	beq.n	800135e <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x33c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_GPIO_Init+0x22a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x340>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	; (8001474 <HAL_GPIO_Init+0x344>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00d      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x348>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d007      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_GPIO_Init+0x34c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d101      	bne.n	800134a <HAL_GPIO_Init+0x21a>
 8001346:	2309      	movs	r3, #9
 8001348:	e012      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800134a:	230a      	movs	r3, #10
 800134c:	e010      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800134e:	2308      	movs	r3, #8
 8001350:	e00e      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001352:	2307      	movs	r3, #7
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001356:	2306      	movs	r3, #6
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001380:	4934      	ldr	r1, [pc, #208]	; (8001454 <HAL_GPIO_Init+0x324>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <HAL_GPIO_Init+0x350>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b2:	4a33      	ldr	r2, [pc, #204]	; (8001480 <HAL_GPIO_Init+0x350>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_GPIO_Init+0x350>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013dc:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_GPIO_Init+0x350>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_GPIO_Init+0x350>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_GPIO_Init+0x350>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_GPIO_Init+0x350>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a13      	ldr	r2, [pc, #76]	; (8001480 <HAL_GPIO_Init+0x350>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f ae86 	bls.w	8001150 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40022000 	.word	0x40022000
 800147c:	40022400 	.word	0x40022400
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e001      	b.n	80014a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014d0:	e003      	b.n	80014da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e291      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8087 	beq.w	800161a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800150c:	4b96      	ldr	r3, [pc, #600]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b04      	cmp	r3, #4
 8001516:	d00c      	beq.n	8001532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001518:	4b93      	ldr	r3, [pc, #588]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	d112      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
 8001524:	4b90      	ldr	r3, [pc, #576]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001530:	d10b      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001532:	4b8d      	ldr	r3, [pc, #564]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d06c      	beq.n	8001618 <HAL_RCC_OscConfig+0x130>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d168      	bne.n	8001618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e26b      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x7a>
 8001554:	4a84      	ldr	r2, [pc, #528]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001556:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e02e      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x9c>
 800156a:	4a7f      	ldr	r2, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800156c:	4b7e      	ldr	r3, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4a7c      	ldr	r2, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001578:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e01d      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0xc0>
 800158e:	4a76      	ldr	r2, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001590:	4b75      	ldr	r3, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4a73      	ldr	r2, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 80015a8:	4a6f      	ldr	r2, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015aa:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4a6c      	ldr	r2, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015b6:	4b6c      	ldr	r3, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fca0 	bl	8000f0c <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fc9c 	bl	8000f0c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e21f      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b61      	ldr	r3, [pc, #388]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0xe8>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc8c 	bl	8000f0c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fc88 	bl	8000f0c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e20b      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x110>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d069      	beq.n	80016fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001626:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001632:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d11c      	bne.n	8001678 <HAL_RCC_OscConfig+0x190>
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d116      	bne.n	8001678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x17a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e1df      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4941      	ldr	r1, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	e040      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d023      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fc3e 	bl	8000f0c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fc3a 	bl	8000f0c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1bd      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	492d      	ldr	r1, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
 80016c6:	e018      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fc1a 	bl	8000f0c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fc16 	bl	8000f0c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e199      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d038      	beq.n	8001778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d019      	beq.n	8001742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4a16      	ldr	r2, [pc, #88]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fbf7 	bl	8000f0c <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fbf3 	bl	8000f0c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e176      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x23a>
 8001740:	e01a      	b.n	8001778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fbdd 	bl	8000f0c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fbd9 	bl	8000f0c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d903      	bls.n	800176c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e15c      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
 8001768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b91      	ldr	r3, [pc, #580]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a4 	beq.w	80018ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4a88      	ldr	r2, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ba:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fba1 	bl	8000f0c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fb9d 	bl	8000f0c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e120      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x31a>
 80017f4:	4a6f      	ldr	r2, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80017f6:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x33c>
 800180a:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800180c:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4a67      	ldr	r2, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001818:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	e01c      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x35e>
 800182c:	4a61      	ldr	r2, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800182e:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	4a5e      	ldr	r2, [pc, #376]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001846:	4a5b      	ldr	r2, [pc, #364]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001848:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
 8001852:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff fb51 	bl	8000f0c <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fb4d 	bl	8000f0c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0ce      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCC_OscConfig+0x386>
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fb3b 	bl	8000f0c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fb37 	bl	8000f0c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a4 	beq.w	8001a20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d06b      	beq.n	80019bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d149      	bne.n	8001980 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb08 	bl	8000f0c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fb04 	bl	8000f0c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e087      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191e:	4925      	ldr	r1, [pc, #148]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69da      	ldr	r2, [r3, #28]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	019b      	lsls	r3, r3, #6
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	085b      	lsrs	r3, r3, #1
 8001938:	3b01      	subs	r3, #1
 800193a:	041b      	lsls	r3, r3, #16
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	061b      	lsls	r3, r3, #24
 8001944:	4313      	orrs	r3, r2
 8001946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800194a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fad8 	bl	8000f0c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fad4 	bl	8000f0c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e057      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x478>
 800197e:	e04f      	b.n	8001a20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fabe 	bl	8000f0c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff faba 	bl	8000f0c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e03d      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x4ac>
 80019b2:	e035      	b.n	8001a20 <HAL_RCC_OscConfig+0x538>
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x544>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d028      	beq.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d121      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d11a      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0d0      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 020f 	and.w	r2, r3, #15
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d210      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4967      	ldr	r1, [pc, #412]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 020f 	bic.w	r2, r3, #15
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 020f 	and.w	r2, r3, #15
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4a59      	ldr	r2, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a92:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4950      	ldr	r1, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d040      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d115      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e073      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06b      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b12:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 0203 	bic.w	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b24:	f7ff f9f2 	bl	8000f0c <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff f9ee 	bl	8000f0c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e053      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 020c 	and.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1eb      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 020f 	and.w	r2, r3, #15
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d910      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4924      	ldr	r1, [pc, #144]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 020f 	bic.w	r2, r3, #15
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 020f 	and.w	r2, r3, #15
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4919      	ldr	r1, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bae:	4912      	ldr	r1, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f821 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1cc>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1d0>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f94e 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	080026a0 	.word	0x080026a0
 8001c00:	2000004c 	.word	0x2000004c
 8001c04:	20000050 	.word	0x20000050

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c0c:	b087      	sub	sp, #28
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c10:	2200      	movs	r2, #0
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	617a      	str	r2, [r7, #20]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c22:	6892      	ldr	r2, [r2, #8]
 8001c24:	f002 020c 	and.w	r2, r2, #12
 8001c28:	2a04      	cmp	r2, #4
 8001c2a:	d007      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c2c:	2a08      	cmp	r2, #8
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c30:	2a00      	cmp	r2, #0
 8001c32:	f040 8090 	bne.w	8001d56 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c36:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x164>)
 8001c38:	613b      	str	r3, [r7, #16]
      break;
 8001c3a:	e08f      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c3e:	613b      	str	r3, [r7, #16]
      break;
 8001c40:	e08c      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c42:	4a49      	ldr	r2, [pc, #292]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001c4a:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c4c:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c4e:	6852      	ldr	r2, [r2, #4]
 8001c50:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001c54:	2a00      	cmp	r2, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	f04f 0400 	mov.w	r4, #0
 8001c62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	ea03 0301 	and.w	r3, r3, r1
 8001c6e:	ea04 0402 	and.w	r4, r4, r2
 8001c72:	4a3f      	ldr	r2, [pc, #252]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c74:	fb02 f104 	mul.w	r1, r2, r4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	fb02 f203 	mul.w	r2, r2, r3
 8001c7e:	440a      	add	r2, r1
 8001c80:	493b      	ldr	r1, [pc, #236]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c82:	fba3 0101 	umull	r0, r1, r3, r1
 8001c86:	1853      	adds	r3, r2, r1
 8001c88:	4619      	mov	r1, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f04f 0400 	mov.w	r4, #0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	f7fe fb0c 	bl	80002b0 <__aeabi_uldivmod>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e04c      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca0:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	0992      	lsrs	r2, r2, #6
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001cb0:	f04f 0600 	mov.w	r6, #0
 8001cb4:	ea05 0501 	and.w	r5, r5, r1
 8001cb8:	ea06 0602 	and.w	r6, r6, r2
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4632      	mov	r2, r6
 8001cc0:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001cc4:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001cc8:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001ccc:	4651      	mov	r1, sl
 8001cce:	465a      	mov	r2, fp
 8001cd0:	46aa      	mov	sl, r5
 8001cd2:	46b3      	mov	fp, r6
 8001cd4:	4655      	mov	r5, sl
 8001cd6:	465e      	mov	r6, fp
 8001cd8:	1b4d      	subs	r5, r1, r5
 8001cda:	eb62 0606 	sbc.w	r6, r2, r6
 8001cde:	4629      	mov	r1, r5
 8001ce0:	4632      	mov	r2, r6
 8001ce2:	0194      	lsls	r4, r2, #6
 8001ce4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ce8:	018b      	lsls	r3, r1, #6
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	eb64 0402 	sbc.w	r4, r4, r2
 8001cf0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001cf4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001cf8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	464c      	mov	r4, r9
 8001d00:	4655      	mov	r5, sl
 8001d02:	465e      	mov	r6, fp
 8001d04:	18ed      	adds	r5, r5, r3
 8001d06:	eb46 0604 	adc.w	r6, r6, r4
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	4634      	mov	r4, r6
 8001d0e:	02a2      	lsls	r2, r4, #10
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001d22:	4618      	mov	r0, r3
 8001d24:	4621      	mov	r1, r4
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f04f 0400 	mov.w	r4, #0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	f7fe fabe 	bl	80002b0 <__aeabi_uldivmod>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	3301      	adds	r3, #1
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	613b      	str	r3, [r7, #16]
      break;
 8001d54:	e002      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x164>)
 8001d58:	613b      	str	r3, [r7, #16]
      break;
 8001d5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5c:	693b      	ldr	r3, [r7, #16]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	017d7840 	.word	0x017d7840

08001d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d7a:	e003      	b.n	8001d84 <LoopCopyDataInit>

08001d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d82:	3104      	adds	r1, #4

08001d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d8c:	d3f6      	bcc.n	8001d7c <CopyDataInit>
  ldr  r2, =_sbss
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d90:	e002      	b.n	8001d98 <LoopFillZerobss>

08001d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d94:	f842 3b04 	str.w	r3, [r2], #4

08001d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d9c:	d3f9      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d9e:	f7ff f84d 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da2:	f000 f817 	bl	8001dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7fe fde5 	bl	8000974 <main>
  bx  lr    
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dac:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001db0:	080026f4 	.word	0x080026f4
  ldr  r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001db8:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8001dbc:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8001dc0:	20000100 	.word	0x20000100

08001dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC_IRQHandler>
	...

08001dc8 <__errno>:
 8001dc8:	4b01      	ldr	r3, [pc, #4]	; (8001dd0 <__errno+0x8>)
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000058 	.word	0x20000058

08001dd4 <__libc_init_array>:
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	4e0d      	ldr	r6, [pc, #52]	; (8001e0c <__libc_init_array+0x38>)
 8001dd8:	4c0d      	ldr	r4, [pc, #52]	; (8001e10 <__libc_init_array+0x3c>)
 8001dda:	1ba4      	subs	r4, r4, r6
 8001ddc:	10a4      	asrs	r4, r4, #2
 8001dde:	2500      	movs	r5, #0
 8001de0:	42a5      	cmp	r5, r4
 8001de2:	d109      	bne.n	8001df8 <__libc_init_array+0x24>
 8001de4:	4e0b      	ldr	r6, [pc, #44]	; (8001e14 <__libc_init_array+0x40>)
 8001de6:	4c0c      	ldr	r4, [pc, #48]	; (8001e18 <__libc_init_array+0x44>)
 8001de8:	f000 fc3e 	bl	8002668 <_init>
 8001dec:	1ba4      	subs	r4, r4, r6
 8001dee:	10a4      	asrs	r4, r4, #2
 8001df0:	2500      	movs	r5, #0
 8001df2:	42a5      	cmp	r5, r4
 8001df4:	d105      	bne.n	8001e02 <__libc_init_array+0x2e>
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dfc:	4798      	blx	r3
 8001dfe:	3501      	adds	r5, #1
 8001e00:	e7ee      	b.n	8001de0 <__libc_init_array+0xc>
 8001e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e06:	4798      	blx	r3
 8001e08:	3501      	adds	r5, #1
 8001e0a:	e7f2      	b.n	8001df2 <__libc_init_array+0x1e>
 8001e0c:	080026ec 	.word	0x080026ec
 8001e10:	080026ec 	.word	0x080026ec
 8001e14:	080026ec 	.word	0x080026ec
 8001e18:	080026f0 	.word	0x080026f0

08001e1c <memset>:
 8001e1c:	4402      	add	r2, r0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d100      	bne.n	8001e26 <memset+0xa>
 8001e24:	4770      	bx	lr
 8001e26:	f803 1b01 	strb.w	r1, [r3], #1
 8001e2a:	e7f9      	b.n	8001e20 <memset+0x4>

08001e2c <siprintf>:
 8001e2c:	b40e      	push	{r1, r2, r3}
 8001e2e:	b500      	push	{lr}
 8001e30:	b09c      	sub	sp, #112	; 0x70
 8001e32:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001e36:	ab1d      	add	r3, sp, #116	; 0x74
 8001e38:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001e3c:	9002      	str	r0, [sp, #8]
 8001e3e:	9006      	str	r0, [sp, #24]
 8001e40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e44:	480a      	ldr	r0, [pc, #40]	; (8001e70 <siprintf+0x44>)
 8001e46:	9104      	str	r1, [sp, #16]
 8001e48:	9107      	str	r1, [sp, #28]
 8001e4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e52:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001e56:	6800      	ldr	r0, [r0, #0]
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	a902      	add	r1, sp, #8
 8001e5c:	f000 f866 	bl	8001f2c <_svfiprintf_r>
 8001e60:	9b02      	ldr	r3, [sp, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	b01c      	add	sp, #112	; 0x70
 8001e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e6c:	b003      	add	sp, #12
 8001e6e:	4770      	bx	lr
 8001e70:	20000058 	.word	0x20000058

08001e74 <__ssputs_r>:
 8001e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e78:	688e      	ldr	r6, [r1, #8]
 8001e7a:	429e      	cmp	r6, r3
 8001e7c:	4682      	mov	sl, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	4691      	mov	r9, r2
 8001e82:	4698      	mov	r8, r3
 8001e84:	d835      	bhi.n	8001ef2 <__ssputs_r+0x7e>
 8001e86:	898a      	ldrh	r2, [r1, #12]
 8001e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e8c:	d031      	beq.n	8001ef2 <__ssputs_r+0x7e>
 8001e8e:	6825      	ldr	r5, [r4, #0]
 8001e90:	6909      	ldr	r1, [r1, #16]
 8001e92:	1a6f      	subs	r7, r5, r1
 8001e94:	6965      	ldr	r5, [r4, #20]
 8001e96:	2302      	movs	r3, #2
 8001e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ea0:	f108 0301 	add.w	r3, r8, #1
 8001ea4:	443b      	add	r3, r7
 8001ea6:	429d      	cmp	r5, r3
 8001ea8:	bf38      	it	cc
 8001eaa:	461d      	movcc	r5, r3
 8001eac:	0553      	lsls	r3, r2, #21
 8001eae:	d531      	bpl.n	8001f14 <__ssputs_r+0xa0>
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	f000 fb39 	bl	8002528 <_malloc_r>
 8001eb6:	4606      	mov	r6, r0
 8001eb8:	b950      	cbnz	r0, 8001ed0 <__ssputs_r+0x5c>
 8001eba:	230c      	movs	r3, #12
 8001ebc:	f8ca 3000 	str.w	r3, [sl]
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec6:	81a3      	strh	r3, [r4, #12]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed0:	463a      	mov	r2, r7
 8001ed2:	6921      	ldr	r1, [r4, #16]
 8001ed4:	f000 fab4 	bl	8002440 <memcpy>
 8001ed8:	89a3      	ldrh	r3, [r4, #12]
 8001eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee2:	81a3      	strh	r3, [r4, #12]
 8001ee4:	6126      	str	r6, [r4, #16]
 8001ee6:	6165      	str	r5, [r4, #20]
 8001ee8:	443e      	add	r6, r7
 8001eea:	1bed      	subs	r5, r5, r7
 8001eec:	6026      	str	r6, [r4, #0]
 8001eee:	60a5      	str	r5, [r4, #8]
 8001ef0:	4646      	mov	r6, r8
 8001ef2:	4546      	cmp	r6, r8
 8001ef4:	bf28      	it	cs
 8001ef6:	4646      	movcs	r6, r8
 8001ef8:	4632      	mov	r2, r6
 8001efa:	4649      	mov	r1, r9
 8001efc:	6820      	ldr	r0, [r4, #0]
 8001efe:	f000 faaa 	bl	8002456 <memmove>
 8001f02:	68a3      	ldr	r3, [r4, #8]
 8001f04:	1b9b      	subs	r3, r3, r6
 8001f06:	60a3      	str	r3, [r4, #8]
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	441e      	add	r6, r3
 8001f0c:	6026      	str	r6, [r4, #0]
 8001f0e:	2000      	movs	r0, #0
 8001f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f14:	462a      	mov	r2, r5
 8001f16:	f000 fb65 	bl	80025e4 <_realloc_r>
 8001f1a:	4606      	mov	r6, r0
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d1e1      	bne.n	8001ee4 <__ssputs_r+0x70>
 8001f20:	6921      	ldr	r1, [r4, #16]
 8001f22:	4650      	mov	r0, sl
 8001f24:	f000 fab2 	bl	800248c <_free_r>
 8001f28:	e7c7      	b.n	8001eba <__ssputs_r+0x46>
	...

08001f2c <_svfiprintf_r>:
 8001f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f30:	b09d      	sub	sp, #116	; 0x74
 8001f32:	4680      	mov	r8, r0
 8001f34:	9303      	str	r3, [sp, #12]
 8001f36:	898b      	ldrh	r3, [r1, #12]
 8001f38:	061c      	lsls	r4, r3, #24
 8001f3a:	460d      	mov	r5, r1
 8001f3c:	4616      	mov	r6, r2
 8001f3e:	d50f      	bpl.n	8001f60 <_svfiprintf_r+0x34>
 8001f40:	690b      	ldr	r3, [r1, #16]
 8001f42:	b96b      	cbnz	r3, 8001f60 <_svfiprintf_r+0x34>
 8001f44:	2140      	movs	r1, #64	; 0x40
 8001f46:	f000 faef 	bl	8002528 <_malloc_r>
 8001f4a:	6028      	str	r0, [r5, #0]
 8001f4c:	6128      	str	r0, [r5, #16]
 8001f4e:	b928      	cbnz	r0, 8001f5c <_svfiprintf_r+0x30>
 8001f50:	230c      	movs	r3, #12
 8001f52:	f8c8 3000 	str.w	r3, [r8]
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5a:	e0c5      	b.n	80020e8 <_svfiprintf_r+0x1bc>
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	616b      	str	r3, [r5, #20]
 8001f60:	2300      	movs	r3, #0
 8001f62:	9309      	str	r3, [sp, #36]	; 0x24
 8001f64:	2320      	movs	r3, #32
 8001f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f6a:	2330      	movs	r3, #48	; 0x30
 8001f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f70:	f04f 0b01 	mov.w	fp, #1
 8001f74:	4637      	mov	r7, r6
 8001f76:	463c      	mov	r4, r7
 8001f78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13c      	bne.n	8001ffa <_svfiprintf_r+0xce>
 8001f80:	ebb7 0a06 	subs.w	sl, r7, r6
 8001f84:	d00b      	beq.n	8001f9e <_svfiprintf_r+0x72>
 8001f86:	4653      	mov	r3, sl
 8001f88:	4632      	mov	r2, r6
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	4640      	mov	r0, r8
 8001f8e:	f7ff ff71 	bl	8001e74 <__ssputs_r>
 8001f92:	3001      	adds	r0, #1
 8001f94:	f000 80a3 	beq.w	80020de <_svfiprintf_r+0x1b2>
 8001f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f9a:	4453      	add	r3, sl
 8001f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f9e:	783b      	ldrb	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 809c 	beq.w	80020de <_svfiprintf_r+0x1b2>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	9304      	str	r3, [sp, #16]
 8001fae:	9307      	str	r3, [sp, #28]
 8001fb0:	9205      	str	r2, [sp, #20]
 8001fb2:	9306      	str	r3, [sp, #24]
 8001fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8001fba:	2205      	movs	r2, #5
 8001fbc:	7821      	ldrb	r1, [r4, #0]
 8001fbe:	4850      	ldr	r0, [pc, #320]	; (8002100 <_svfiprintf_r+0x1d4>)
 8001fc0:	f7fe f926 	bl	8000210 <memchr>
 8001fc4:	1c67      	adds	r7, r4, #1
 8001fc6:	9b04      	ldr	r3, [sp, #16]
 8001fc8:	b9d8      	cbnz	r0, 8002002 <_svfiprintf_r+0xd6>
 8001fca:	06d9      	lsls	r1, r3, #27
 8001fcc:	bf44      	itt	mi
 8001fce:	2220      	movmi	r2, #32
 8001fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fd4:	071a      	lsls	r2, r3, #28
 8001fd6:	bf44      	itt	mi
 8001fd8:	222b      	movmi	r2, #43	; 0x2b
 8001fda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fde:	7822      	ldrb	r2, [r4, #0]
 8001fe0:	2a2a      	cmp	r2, #42	; 0x2a
 8001fe2:	d016      	beq.n	8002012 <_svfiprintf_r+0xe6>
 8001fe4:	9a07      	ldr	r2, [sp, #28]
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	200a      	movs	r0, #10
 8001fea:	4627      	mov	r7, r4
 8001fec:	3401      	adds	r4, #1
 8001fee:	783b      	ldrb	r3, [r7, #0]
 8001ff0:	3b30      	subs	r3, #48	; 0x30
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d951      	bls.n	800209a <_svfiprintf_r+0x16e>
 8001ff6:	b1c9      	cbz	r1, 800202c <_svfiprintf_r+0x100>
 8001ff8:	e011      	b.n	800201e <_svfiprintf_r+0xf2>
 8001ffa:	2b25      	cmp	r3, #37	; 0x25
 8001ffc:	d0c0      	beq.n	8001f80 <_svfiprintf_r+0x54>
 8001ffe:	4627      	mov	r7, r4
 8002000:	e7b9      	b.n	8001f76 <_svfiprintf_r+0x4a>
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <_svfiprintf_r+0x1d4>)
 8002004:	1a80      	subs	r0, r0, r2
 8002006:	fa0b f000 	lsl.w	r0, fp, r0
 800200a:	4318      	orrs	r0, r3
 800200c:	9004      	str	r0, [sp, #16]
 800200e:	463c      	mov	r4, r7
 8002010:	e7d3      	b.n	8001fba <_svfiprintf_r+0x8e>
 8002012:	9a03      	ldr	r2, [sp, #12]
 8002014:	1d11      	adds	r1, r2, #4
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	9103      	str	r1, [sp, #12]
 800201a:	2a00      	cmp	r2, #0
 800201c:	db01      	blt.n	8002022 <_svfiprintf_r+0xf6>
 800201e:	9207      	str	r2, [sp, #28]
 8002020:	e004      	b.n	800202c <_svfiprintf_r+0x100>
 8002022:	4252      	negs	r2, r2
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	9207      	str	r2, [sp, #28]
 800202a:	9304      	str	r3, [sp, #16]
 800202c:	783b      	ldrb	r3, [r7, #0]
 800202e:	2b2e      	cmp	r3, #46	; 0x2e
 8002030:	d10e      	bne.n	8002050 <_svfiprintf_r+0x124>
 8002032:	787b      	ldrb	r3, [r7, #1]
 8002034:	2b2a      	cmp	r3, #42	; 0x2a
 8002036:	f107 0101 	add.w	r1, r7, #1
 800203a:	d132      	bne.n	80020a2 <_svfiprintf_r+0x176>
 800203c:	9b03      	ldr	r3, [sp, #12]
 800203e:	1d1a      	adds	r2, r3, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	9203      	str	r2, [sp, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	bfb8      	it	lt
 8002048:	f04f 33ff 	movlt.w	r3, #4294967295
 800204c:	3702      	adds	r7, #2
 800204e:	9305      	str	r3, [sp, #20]
 8002050:	4c2c      	ldr	r4, [pc, #176]	; (8002104 <_svfiprintf_r+0x1d8>)
 8002052:	7839      	ldrb	r1, [r7, #0]
 8002054:	2203      	movs	r2, #3
 8002056:	4620      	mov	r0, r4
 8002058:	f7fe f8da 	bl	8000210 <memchr>
 800205c:	b138      	cbz	r0, 800206e <_svfiprintf_r+0x142>
 800205e:	2340      	movs	r3, #64	; 0x40
 8002060:	1b00      	subs	r0, r0, r4
 8002062:	fa03 f000 	lsl.w	r0, r3, r0
 8002066:	9b04      	ldr	r3, [sp, #16]
 8002068:	4303      	orrs	r3, r0
 800206a:	9304      	str	r3, [sp, #16]
 800206c:	3701      	adds	r7, #1
 800206e:	7839      	ldrb	r1, [r7, #0]
 8002070:	4825      	ldr	r0, [pc, #148]	; (8002108 <_svfiprintf_r+0x1dc>)
 8002072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002076:	2206      	movs	r2, #6
 8002078:	1c7e      	adds	r6, r7, #1
 800207a:	f7fe f8c9 	bl	8000210 <memchr>
 800207e:	2800      	cmp	r0, #0
 8002080:	d035      	beq.n	80020ee <_svfiprintf_r+0x1c2>
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <_svfiprintf_r+0x1e0>)
 8002084:	b9fb      	cbnz	r3, 80020c6 <_svfiprintf_r+0x19a>
 8002086:	9b03      	ldr	r3, [sp, #12]
 8002088:	3307      	adds	r3, #7
 800208a:	f023 0307 	bic.w	r3, r3, #7
 800208e:	3308      	adds	r3, #8
 8002090:	9303      	str	r3, [sp, #12]
 8002092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002094:	444b      	add	r3, r9
 8002096:	9309      	str	r3, [sp, #36]	; 0x24
 8002098:	e76c      	b.n	8001f74 <_svfiprintf_r+0x48>
 800209a:	fb00 3202 	mla	r2, r0, r2, r3
 800209e:	2101      	movs	r1, #1
 80020a0:	e7a3      	b.n	8001fea <_svfiprintf_r+0xbe>
 80020a2:	2300      	movs	r3, #0
 80020a4:	9305      	str	r3, [sp, #20]
 80020a6:	4618      	mov	r0, r3
 80020a8:	240a      	movs	r4, #10
 80020aa:	460f      	mov	r7, r1
 80020ac:	3101      	adds	r1, #1
 80020ae:	783a      	ldrb	r2, [r7, #0]
 80020b0:	3a30      	subs	r2, #48	; 0x30
 80020b2:	2a09      	cmp	r2, #9
 80020b4:	d903      	bls.n	80020be <_svfiprintf_r+0x192>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ca      	beq.n	8002050 <_svfiprintf_r+0x124>
 80020ba:	9005      	str	r0, [sp, #20]
 80020bc:	e7c8      	b.n	8002050 <_svfiprintf_r+0x124>
 80020be:	fb04 2000 	mla	r0, r4, r0, r2
 80020c2:	2301      	movs	r3, #1
 80020c4:	e7f1      	b.n	80020aa <_svfiprintf_r+0x17e>
 80020c6:	ab03      	add	r3, sp, #12
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	462a      	mov	r2, r5
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <_svfiprintf_r+0x1e4>)
 80020ce:	a904      	add	r1, sp, #16
 80020d0:	4640      	mov	r0, r8
 80020d2:	f3af 8000 	nop.w
 80020d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020da:	4681      	mov	r9, r0
 80020dc:	d1d9      	bne.n	8002092 <_svfiprintf_r+0x166>
 80020de:	89ab      	ldrh	r3, [r5, #12]
 80020e0:	065b      	lsls	r3, r3, #25
 80020e2:	f53f af38 	bmi.w	8001f56 <_svfiprintf_r+0x2a>
 80020e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020e8:	b01d      	add	sp, #116	; 0x74
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ee:	ab03      	add	r3, sp, #12
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	462a      	mov	r2, r5
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <_svfiprintf_r+0x1e4>)
 80020f6:	a904      	add	r1, sp, #16
 80020f8:	4640      	mov	r0, r8
 80020fa:	f000 f881 	bl	8002200 <_printf_i>
 80020fe:	e7ea      	b.n	80020d6 <_svfiprintf_r+0x1aa>
 8002100:	080026b0 	.word	0x080026b0
 8002104:	080026b6 	.word	0x080026b6
 8002108:	080026ba 	.word	0x080026ba
 800210c:	00000000 	.word	0x00000000
 8002110:	08001e75 	.word	0x08001e75

08002114 <_printf_common>:
 8002114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002118:	4691      	mov	r9, r2
 800211a:	461f      	mov	r7, r3
 800211c:	688a      	ldr	r2, [r1, #8]
 800211e:	690b      	ldr	r3, [r1, #16]
 8002120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002124:	4293      	cmp	r3, r2
 8002126:	bfb8      	it	lt
 8002128:	4613      	movlt	r3, r2
 800212a:	f8c9 3000 	str.w	r3, [r9]
 800212e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002132:	4606      	mov	r6, r0
 8002134:	460c      	mov	r4, r1
 8002136:	b112      	cbz	r2, 800213e <_printf_common+0x2a>
 8002138:	3301      	adds	r3, #1
 800213a:	f8c9 3000 	str.w	r3, [r9]
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	0699      	lsls	r1, r3, #26
 8002142:	bf42      	ittt	mi
 8002144:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002148:	3302      	addmi	r3, #2
 800214a:	f8c9 3000 	strmi.w	r3, [r9]
 800214e:	6825      	ldr	r5, [r4, #0]
 8002150:	f015 0506 	ands.w	r5, r5, #6
 8002154:	d107      	bne.n	8002166 <_printf_common+0x52>
 8002156:	f104 0a19 	add.w	sl, r4, #25
 800215a:	68e3      	ldr	r3, [r4, #12]
 800215c:	f8d9 2000 	ldr.w	r2, [r9]
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	429d      	cmp	r5, r3
 8002164:	db29      	blt.n	80021ba <_printf_common+0xa6>
 8002166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	3300      	adds	r3, #0
 800216e:	bf18      	it	ne
 8002170:	2301      	movne	r3, #1
 8002172:	0692      	lsls	r2, r2, #26
 8002174:	d42e      	bmi.n	80021d4 <_printf_common+0xc0>
 8002176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800217a:	4639      	mov	r1, r7
 800217c:	4630      	mov	r0, r6
 800217e:	47c0      	blx	r8
 8002180:	3001      	adds	r0, #1
 8002182:	d021      	beq.n	80021c8 <_printf_common+0xb4>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	68e5      	ldr	r5, [r4, #12]
 8002188:	f8d9 2000 	ldr.w	r2, [r9]
 800218c:	f003 0306 	and.w	r3, r3, #6
 8002190:	2b04      	cmp	r3, #4
 8002192:	bf08      	it	eq
 8002194:	1aad      	subeq	r5, r5, r2
 8002196:	68a3      	ldr	r3, [r4, #8]
 8002198:	6922      	ldr	r2, [r4, #16]
 800219a:	bf0c      	ite	eq
 800219c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021a0:	2500      	movne	r5, #0
 80021a2:	4293      	cmp	r3, r2
 80021a4:	bfc4      	itt	gt
 80021a6:	1a9b      	subgt	r3, r3, r2
 80021a8:	18ed      	addgt	r5, r5, r3
 80021aa:	f04f 0900 	mov.w	r9, #0
 80021ae:	341a      	adds	r4, #26
 80021b0:	454d      	cmp	r5, r9
 80021b2:	d11b      	bne.n	80021ec <_printf_common+0xd8>
 80021b4:	2000      	movs	r0, #0
 80021b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ba:	2301      	movs	r3, #1
 80021bc:	4652      	mov	r2, sl
 80021be:	4639      	mov	r1, r7
 80021c0:	4630      	mov	r0, r6
 80021c2:	47c0      	blx	r8
 80021c4:	3001      	adds	r0, #1
 80021c6:	d103      	bne.n	80021d0 <_printf_common+0xbc>
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021d0:	3501      	adds	r5, #1
 80021d2:	e7c2      	b.n	800215a <_printf_common+0x46>
 80021d4:	18e1      	adds	r1, r4, r3
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	2030      	movs	r0, #48	; 0x30
 80021da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021de:	4422      	add	r2, r4
 80021e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021e8:	3302      	adds	r3, #2
 80021ea:	e7c4      	b.n	8002176 <_printf_common+0x62>
 80021ec:	2301      	movs	r3, #1
 80021ee:	4622      	mov	r2, r4
 80021f0:	4639      	mov	r1, r7
 80021f2:	4630      	mov	r0, r6
 80021f4:	47c0      	blx	r8
 80021f6:	3001      	adds	r0, #1
 80021f8:	d0e6      	beq.n	80021c8 <_printf_common+0xb4>
 80021fa:	f109 0901 	add.w	r9, r9, #1
 80021fe:	e7d7      	b.n	80021b0 <_printf_common+0x9c>

08002200 <_printf_i>:
 8002200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002204:	4617      	mov	r7, r2
 8002206:	7e0a      	ldrb	r2, [r1, #24]
 8002208:	b085      	sub	sp, #20
 800220a:	2a6e      	cmp	r2, #110	; 0x6e
 800220c:	4698      	mov	r8, r3
 800220e:	4606      	mov	r6, r0
 8002210:	460c      	mov	r4, r1
 8002212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002214:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002218:	f000 80bc 	beq.w	8002394 <_printf_i+0x194>
 800221c:	d81a      	bhi.n	8002254 <_printf_i+0x54>
 800221e:	2a63      	cmp	r2, #99	; 0x63
 8002220:	d02e      	beq.n	8002280 <_printf_i+0x80>
 8002222:	d80a      	bhi.n	800223a <_printf_i+0x3a>
 8002224:	2a00      	cmp	r2, #0
 8002226:	f000 80c8 	beq.w	80023ba <_printf_i+0x1ba>
 800222a:	2a58      	cmp	r2, #88	; 0x58
 800222c:	f000 808a 	beq.w	8002344 <_printf_i+0x144>
 8002230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002234:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002238:	e02a      	b.n	8002290 <_printf_i+0x90>
 800223a:	2a64      	cmp	r2, #100	; 0x64
 800223c:	d001      	beq.n	8002242 <_printf_i+0x42>
 800223e:	2a69      	cmp	r2, #105	; 0x69
 8002240:	d1f6      	bne.n	8002230 <_printf_i+0x30>
 8002242:	6821      	ldr	r1, [r4, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f011 0f80 	tst.w	r1, #128	; 0x80
 800224a:	d023      	beq.n	8002294 <_printf_i+0x94>
 800224c:	1d11      	adds	r1, r2, #4
 800224e:	6019      	str	r1, [r3, #0]
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	e027      	b.n	80022a4 <_printf_i+0xa4>
 8002254:	2a73      	cmp	r2, #115	; 0x73
 8002256:	f000 80b4 	beq.w	80023c2 <_printf_i+0x1c2>
 800225a:	d808      	bhi.n	800226e <_printf_i+0x6e>
 800225c:	2a6f      	cmp	r2, #111	; 0x6f
 800225e:	d02a      	beq.n	80022b6 <_printf_i+0xb6>
 8002260:	2a70      	cmp	r2, #112	; 0x70
 8002262:	d1e5      	bne.n	8002230 <_printf_i+0x30>
 8002264:	680a      	ldr	r2, [r1, #0]
 8002266:	f042 0220 	orr.w	r2, r2, #32
 800226a:	600a      	str	r2, [r1, #0]
 800226c:	e003      	b.n	8002276 <_printf_i+0x76>
 800226e:	2a75      	cmp	r2, #117	; 0x75
 8002270:	d021      	beq.n	80022b6 <_printf_i+0xb6>
 8002272:	2a78      	cmp	r2, #120	; 0x78
 8002274:	d1dc      	bne.n	8002230 <_printf_i+0x30>
 8002276:	2278      	movs	r2, #120	; 0x78
 8002278:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800227c:	496e      	ldr	r1, [pc, #440]	; (8002438 <_printf_i+0x238>)
 800227e:	e064      	b.n	800234a <_printf_i+0x14a>
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002286:	1d11      	adds	r1, r2, #4
 8002288:	6019      	str	r1, [r3, #0]
 800228a:	6813      	ldr	r3, [r2, #0]
 800228c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002290:	2301      	movs	r3, #1
 8002292:	e0a3      	b.n	80023dc <_printf_i+0x1dc>
 8002294:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002298:	f102 0104 	add.w	r1, r2, #4
 800229c:	6019      	str	r1, [r3, #0]
 800229e:	d0d7      	beq.n	8002250 <_printf_i+0x50>
 80022a0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da03      	bge.n	80022b0 <_printf_i+0xb0>
 80022a8:	222d      	movs	r2, #45	; 0x2d
 80022aa:	425b      	negs	r3, r3
 80022ac:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022b0:	4962      	ldr	r1, [pc, #392]	; (800243c <_printf_i+0x23c>)
 80022b2:	220a      	movs	r2, #10
 80022b4:	e017      	b.n	80022e6 <_printf_i+0xe6>
 80022b6:	6820      	ldr	r0, [r4, #0]
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022be:	d003      	beq.n	80022c8 <_printf_i+0xc8>
 80022c0:	1d08      	adds	r0, r1, #4
 80022c2:	6018      	str	r0, [r3, #0]
 80022c4:	680b      	ldr	r3, [r1, #0]
 80022c6:	e006      	b.n	80022d6 <_printf_i+0xd6>
 80022c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022cc:	f101 0004 	add.w	r0, r1, #4
 80022d0:	6018      	str	r0, [r3, #0]
 80022d2:	d0f7      	beq.n	80022c4 <_printf_i+0xc4>
 80022d4:	880b      	ldrh	r3, [r1, #0]
 80022d6:	4959      	ldr	r1, [pc, #356]	; (800243c <_printf_i+0x23c>)
 80022d8:	2a6f      	cmp	r2, #111	; 0x6f
 80022da:	bf14      	ite	ne
 80022dc:	220a      	movne	r2, #10
 80022de:	2208      	moveq	r2, #8
 80022e0:	2000      	movs	r0, #0
 80022e2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80022e6:	6865      	ldr	r5, [r4, #4]
 80022e8:	60a5      	str	r5, [r4, #8]
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f2c0 809c 	blt.w	8002428 <_printf_i+0x228>
 80022f0:	6820      	ldr	r0, [r4, #0]
 80022f2:	f020 0004 	bic.w	r0, r0, #4
 80022f6:	6020      	str	r0, [r4, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d13f      	bne.n	800237c <_printf_i+0x17c>
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	f040 8095 	bne.w	800242c <_printf_i+0x22c>
 8002302:	4675      	mov	r5, lr
 8002304:	2a08      	cmp	r2, #8
 8002306:	d10b      	bne.n	8002320 <_printf_i+0x120>
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	07da      	lsls	r2, r3, #31
 800230c:	d508      	bpl.n	8002320 <_printf_i+0x120>
 800230e:	6923      	ldr	r3, [r4, #16]
 8002310:	6862      	ldr	r2, [r4, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	bfde      	ittt	le
 8002316:	2330      	movle	r3, #48	; 0x30
 8002318:	f805 3c01 	strble.w	r3, [r5, #-1]
 800231c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002320:	ebae 0305 	sub.w	r3, lr, r5
 8002324:	6123      	str	r3, [r4, #16]
 8002326:	f8cd 8000 	str.w	r8, [sp]
 800232a:	463b      	mov	r3, r7
 800232c:	aa03      	add	r2, sp, #12
 800232e:	4621      	mov	r1, r4
 8002330:	4630      	mov	r0, r6
 8002332:	f7ff feef 	bl	8002114 <_printf_common>
 8002336:	3001      	adds	r0, #1
 8002338:	d155      	bne.n	80023e6 <_printf_i+0x1e6>
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	b005      	add	sp, #20
 8002340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002344:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002348:	493c      	ldr	r1, [pc, #240]	; (800243c <_printf_i+0x23c>)
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002352:	f100 0504 	add.w	r5, r0, #4
 8002356:	601d      	str	r5, [r3, #0]
 8002358:	d001      	beq.n	800235e <_printf_i+0x15e>
 800235a:	6803      	ldr	r3, [r0, #0]
 800235c:	e002      	b.n	8002364 <_printf_i+0x164>
 800235e:	0655      	lsls	r5, r2, #25
 8002360:	d5fb      	bpl.n	800235a <_printf_i+0x15a>
 8002362:	8803      	ldrh	r3, [r0, #0]
 8002364:	07d0      	lsls	r0, r2, #31
 8002366:	bf44      	itt	mi
 8002368:	f042 0220 	orrmi.w	r2, r2, #32
 800236c:	6022      	strmi	r2, [r4, #0]
 800236e:	b91b      	cbnz	r3, 8002378 <_printf_i+0x178>
 8002370:	6822      	ldr	r2, [r4, #0]
 8002372:	f022 0220 	bic.w	r2, r2, #32
 8002376:	6022      	str	r2, [r4, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	e7b1      	b.n	80022e0 <_printf_i+0xe0>
 800237c:	4675      	mov	r5, lr
 800237e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002382:	fb02 3310 	mls	r3, r2, r0, r3
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800238c:	4603      	mov	r3, r0
 800238e:	2800      	cmp	r0, #0
 8002390:	d1f5      	bne.n	800237e <_printf_i+0x17e>
 8002392:	e7b7      	b.n	8002304 <_printf_i+0x104>
 8002394:	6808      	ldr	r0, [r1, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	6949      	ldr	r1, [r1, #20]
 800239a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800239e:	d004      	beq.n	80023aa <_printf_i+0x1aa>
 80023a0:	1d10      	adds	r0, r2, #4
 80023a2:	6018      	str	r0, [r3, #0]
 80023a4:	6813      	ldr	r3, [r2, #0]
 80023a6:	6019      	str	r1, [r3, #0]
 80023a8:	e007      	b.n	80023ba <_printf_i+0x1ba>
 80023aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023ae:	f102 0004 	add.w	r0, r2, #4
 80023b2:	6018      	str	r0, [r3, #0]
 80023b4:	6813      	ldr	r3, [r2, #0]
 80023b6:	d0f6      	beq.n	80023a6 <_printf_i+0x1a6>
 80023b8:	8019      	strh	r1, [r3, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	6123      	str	r3, [r4, #16]
 80023be:	4675      	mov	r5, lr
 80023c0:	e7b1      	b.n	8002326 <_printf_i+0x126>
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	1d11      	adds	r1, r2, #4
 80023c6:	6019      	str	r1, [r3, #0]
 80023c8:	6815      	ldr	r5, [r2, #0]
 80023ca:	6862      	ldr	r2, [r4, #4]
 80023cc:	2100      	movs	r1, #0
 80023ce:	4628      	mov	r0, r5
 80023d0:	f7fd ff1e 	bl	8000210 <memchr>
 80023d4:	b108      	cbz	r0, 80023da <_printf_i+0x1da>
 80023d6:	1b40      	subs	r0, r0, r5
 80023d8:	6060      	str	r0, [r4, #4]
 80023da:	6863      	ldr	r3, [r4, #4]
 80023dc:	6123      	str	r3, [r4, #16]
 80023de:	2300      	movs	r3, #0
 80023e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023e4:	e79f      	b.n	8002326 <_printf_i+0x126>
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	462a      	mov	r2, r5
 80023ea:	4639      	mov	r1, r7
 80023ec:	4630      	mov	r0, r6
 80023ee:	47c0      	blx	r8
 80023f0:	3001      	adds	r0, #1
 80023f2:	d0a2      	beq.n	800233a <_printf_i+0x13a>
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	079b      	lsls	r3, r3, #30
 80023f8:	d507      	bpl.n	800240a <_printf_i+0x20a>
 80023fa:	2500      	movs	r5, #0
 80023fc:	f104 0919 	add.w	r9, r4, #25
 8002400:	68e3      	ldr	r3, [r4, #12]
 8002402:	9a03      	ldr	r2, [sp, #12]
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	429d      	cmp	r5, r3
 8002408:	db05      	blt.n	8002416 <_printf_i+0x216>
 800240a:	68e0      	ldr	r0, [r4, #12]
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	4298      	cmp	r0, r3
 8002410:	bfb8      	it	lt
 8002412:	4618      	movlt	r0, r3
 8002414:	e793      	b.n	800233e <_printf_i+0x13e>
 8002416:	2301      	movs	r3, #1
 8002418:	464a      	mov	r2, r9
 800241a:	4639      	mov	r1, r7
 800241c:	4630      	mov	r0, r6
 800241e:	47c0      	blx	r8
 8002420:	3001      	adds	r0, #1
 8002422:	d08a      	beq.n	800233a <_printf_i+0x13a>
 8002424:	3501      	adds	r5, #1
 8002426:	e7eb      	b.n	8002400 <_printf_i+0x200>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1a7      	bne.n	800237c <_printf_i+0x17c>
 800242c:	780b      	ldrb	r3, [r1, #0]
 800242e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002432:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002436:	e765      	b.n	8002304 <_printf_i+0x104>
 8002438:	080026d2 	.word	0x080026d2
 800243c:	080026c1 	.word	0x080026c1

08002440 <memcpy>:
 8002440:	b510      	push	{r4, lr}
 8002442:	1e43      	subs	r3, r0, #1
 8002444:	440a      	add	r2, r1
 8002446:	4291      	cmp	r1, r2
 8002448:	d100      	bne.n	800244c <memcpy+0xc>
 800244a:	bd10      	pop	{r4, pc}
 800244c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002454:	e7f7      	b.n	8002446 <memcpy+0x6>

08002456 <memmove>:
 8002456:	4288      	cmp	r0, r1
 8002458:	b510      	push	{r4, lr}
 800245a:	eb01 0302 	add.w	r3, r1, r2
 800245e:	d803      	bhi.n	8002468 <memmove+0x12>
 8002460:	1e42      	subs	r2, r0, #1
 8002462:	4299      	cmp	r1, r3
 8002464:	d10c      	bne.n	8002480 <memmove+0x2a>
 8002466:	bd10      	pop	{r4, pc}
 8002468:	4298      	cmp	r0, r3
 800246a:	d2f9      	bcs.n	8002460 <memmove+0xa>
 800246c:	1881      	adds	r1, r0, r2
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	42d3      	cmn	r3, r2
 8002472:	d100      	bne.n	8002476 <memmove+0x20>
 8002474:	bd10      	pop	{r4, pc}
 8002476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800247a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800247e:	e7f7      	b.n	8002470 <memmove+0x1a>
 8002480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002484:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002488:	e7eb      	b.n	8002462 <memmove+0xc>
	...

0800248c <_free_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4605      	mov	r5, r0
 8002490:	2900      	cmp	r1, #0
 8002492:	d045      	beq.n	8002520 <_free_r+0x94>
 8002494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002498:	1f0c      	subs	r4, r1, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	bfb8      	it	lt
 800249e:	18e4      	addlt	r4, r4, r3
 80024a0:	f000 f8d6 	bl	8002650 <__malloc_lock>
 80024a4:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <_free_r+0x98>)
 80024a6:	6813      	ldr	r3, [r2, #0]
 80024a8:	4610      	mov	r0, r2
 80024aa:	b933      	cbnz	r3, 80024ba <_free_r+0x2e>
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	6014      	str	r4, [r2, #0]
 80024b0:	4628      	mov	r0, r5
 80024b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024b6:	f000 b8cc 	b.w	8002652 <__malloc_unlock>
 80024ba:	42a3      	cmp	r3, r4
 80024bc:	d90c      	bls.n	80024d8 <_free_r+0x4c>
 80024be:	6821      	ldr	r1, [r4, #0]
 80024c0:	1862      	adds	r2, r4, r1
 80024c2:	4293      	cmp	r3, r2
 80024c4:	bf04      	itt	eq
 80024c6:	681a      	ldreq	r2, [r3, #0]
 80024c8:	685b      	ldreq	r3, [r3, #4]
 80024ca:	6063      	str	r3, [r4, #4]
 80024cc:	bf04      	itt	eq
 80024ce:	1852      	addeq	r2, r2, r1
 80024d0:	6022      	streq	r2, [r4, #0]
 80024d2:	6004      	str	r4, [r0, #0]
 80024d4:	e7ec      	b.n	80024b0 <_free_r+0x24>
 80024d6:	4613      	mov	r3, r2
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	b10a      	cbz	r2, 80024e0 <_free_r+0x54>
 80024dc:	42a2      	cmp	r2, r4
 80024de:	d9fa      	bls.n	80024d6 <_free_r+0x4a>
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	1858      	adds	r0, r3, r1
 80024e4:	42a0      	cmp	r0, r4
 80024e6:	d10b      	bne.n	8002500 <_free_r+0x74>
 80024e8:	6820      	ldr	r0, [r4, #0]
 80024ea:	4401      	add	r1, r0
 80024ec:	1858      	adds	r0, r3, r1
 80024ee:	4282      	cmp	r2, r0
 80024f0:	6019      	str	r1, [r3, #0]
 80024f2:	d1dd      	bne.n	80024b0 <_free_r+0x24>
 80024f4:	6810      	ldr	r0, [r2, #0]
 80024f6:	6852      	ldr	r2, [r2, #4]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	4401      	add	r1, r0
 80024fc:	6019      	str	r1, [r3, #0]
 80024fe:	e7d7      	b.n	80024b0 <_free_r+0x24>
 8002500:	d902      	bls.n	8002508 <_free_r+0x7c>
 8002502:	230c      	movs	r3, #12
 8002504:	602b      	str	r3, [r5, #0]
 8002506:	e7d3      	b.n	80024b0 <_free_r+0x24>
 8002508:	6820      	ldr	r0, [r4, #0]
 800250a:	1821      	adds	r1, r4, r0
 800250c:	428a      	cmp	r2, r1
 800250e:	bf04      	itt	eq
 8002510:	6811      	ldreq	r1, [r2, #0]
 8002512:	6852      	ldreq	r2, [r2, #4]
 8002514:	6062      	str	r2, [r4, #4]
 8002516:	bf04      	itt	eq
 8002518:	1809      	addeq	r1, r1, r0
 800251a:	6021      	streq	r1, [r4, #0]
 800251c:	605c      	str	r4, [r3, #4]
 800251e:	e7c7      	b.n	80024b0 <_free_r+0x24>
 8002520:	bd38      	pop	{r3, r4, r5, pc}
 8002522:	bf00      	nop
 8002524:	200000e0 	.word	0x200000e0

08002528 <_malloc_r>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	1ccd      	adds	r5, r1, #3
 800252c:	f025 0503 	bic.w	r5, r5, #3
 8002530:	3508      	adds	r5, #8
 8002532:	2d0c      	cmp	r5, #12
 8002534:	bf38      	it	cc
 8002536:	250c      	movcc	r5, #12
 8002538:	2d00      	cmp	r5, #0
 800253a:	4606      	mov	r6, r0
 800253c:	db01      	blt.n	8002542 <_malloc_r+0x1a>
 800253e:	42a9      	cmp	r1, r5
 8002540:	d903      	bls.n	800254a <_malloc_r+0x22>
 8002542:	230c      	movs	r3, #12
 8002544:	6033      	str	r3, [r6, #0]
 8002546:	2000      	movs	r0, #0
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	f000 f881 	bl	8002650 <__malloc_lock>
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <_malloc_r+0xb4>)
 8002550:	6814      	ldr	r4, [r2, #0]
 8002552:	4621      	mov	r1, r4
 8002554:	b991      	cbnz	r1, 800257c <_malloc_r+0x54>
 8002556:	4c22      	ldr	r4, [pc, #136]	; (80025e0 <_malloc_r+0xb8>)
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	b91b      	cbnz	r3, 8002564 <_malloc_r+0x3c>
 800255c:	4630      	mov	r0, r6
 800255e:	f000 f867 	bl	8002630 <_sbrk_r>
 8002562:	6020      	str	r0, [r4, #0]
 8002564:	4629      	mov	r1, r5
 8002566:	4630      	mov	r0, r6
 8002568:	f000 f862 	bl	8002630 <_sbrk_r>
 800256c:	1c43      	adds	r3, r0, #1
 800256e:	d126      	bne.n	80025be <_malloc_r+0x96>
 8002570:	230c      	movs	r3, #12
 8002572:	6033      	str	r3, [r6, #0]
 8002574:	4630      	mov	r0, r6
 8002576:	f000 f86c 	bl	8002652 <__malloc_unlock>
 800257a:	e7e4      	b.n	8002546 <_malloc_r+0x1e>
 800257c:	680b      	ldr	r3, [r1, #0]
 800257e:	1b5b      	subs	r3, r3, r5
 8002580:	d41a      	bmi.n	80025b8 <_malloc_r+0x90>
 8002582:	2b0b      	cmp	r3, #11
 8002584:	d90f      	bls.n	80025a6 <_malloc_r+0x7e>
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	50cd      	str	r5, [r1, r3]
 800258a:	18cc      	adds	r4, r1, r3
 800258c:	4630      	mov	r0, r6
 800258e:	f000 f860 	bl	8002652 <__malloc_unlock>
 8002592:	f104 000b 	add.w	r0, r4, #11
 8002596:	1d23      	adds	r3, r4, #4
 8002598:	f020 0007 	bic.w	r0, r0, #7
 800259c:	1ac3      	subs	r3, r0, r3
 800259e:	d01b      	beq.n	80025d8 <_malloc_r+0xb0>
 80025a0:	425a      	negs	r2, r3
 80025a2:	50e2      	str	r2, [r4, r3]
 80025a4:	bd70      	pop	{r4, r5, r6, pc}
 80025a6:	428c      	cmp	r4, r1
 80025a8:	bf0d      	iteet	eq
 80025aa:	6863      	ldreq	r3, [r4, #4]
 80025ac:	684b      	ldrne	r3, [r1, #4]
 80025ae:	6063      	strne	r3, [r4, #4]
 80025b0:	6013      	streq	r3, [r2, #0]
 80025b2:	bf18      	it	ne
 80025b4:	460c      	movne	r4, r1
 80025b6:	e7e9      	b.n	800258c <_malloc_r+0x64>
 80025b8:	460c      	mov	r4, r1
 80025ba:	6849      	ldr	r1, [r1, #4]
 80025bc:	e7ca      	b.n	8002554 <_malloc_r+0x2c>
 80025be:	1cc4      	adds	r4, r0, #3
 80025c0:	f024 0403 	bic.w	r4, r4, #3
 80025c4:	42a0      	cmp	r0, r4
 80025c6:	d005      	beq.n	80025d4 <_malloc_r+0xac>
 80025c8:	1a21      	subs	r1, r4, r0
 80025ca:	4630      	mov	r0, r6
 80025cc:	f000 f830 	bl	8002630 <_sbrk_r>
 80025d0:	3001      	adds	r0, #1
 80025d2:	d0cd      	beq.n	8002570 <_malloc_r+0x48>
 80025d4:	6025      	str	r5, [r4, #0]
 80025d6:	e7d9      	b.n	800258c <_malloc_r+0x64>
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	bf00      	nop
 80025dc:	200000e0 	.word	0x200000e0
 80025e0:	200000e4 	.word	0x200000e4

080025e4 <_realloc_r>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	4607      	mov	r7, r0
 80025e8:	4614      	mov	r4, r2
 80025ea:	460e      	mov	r6, r1
 80025ec:	b921      	cbnz	r1, 80025f8 <_realloc_r+0x14>
 80025ee:	4611      	mov	r1, r2
 80025f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025f4:	f7ff bf98 	b.w	8002528 <_malloc_r>
 80025f8:	b922      	cbnz	r2, 8002604 <_realloc_r+0x20>
 80025fa:	f7ff ff47 	bl	800248c <_free_r>
 80025fe:	4625      	mov	r5, r4
 8002600:	4628      	mov	r0, r5
 8002602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002604:	f000 f826 	bl	8002654 <_malloc_usable_size_r>
 8002608:	4284      	cmp	r4, r0
 800260a:	d90f      	bls.n	800262c <_realloc_r+0x48>
 800260c:	4621      	mov	r1, r4
 800260e:	4638      	mov	r0, r7
 8002610:	f7ff ff8a 	bl	8002528 <_malloc_r>
 8002614:	4605      	mov	r5, r0
 8002616:	2800      	cmp	r0, #0
 8002618:	d0f2      	beq.n	8002600 <_realloc_r+0x1c>
 800261a:	4631      	mov	r1, r6
 800261c:	4622      	mov	r2, r4
 800261e:	f7ff ff0f 	bl	8002440 <memcpy>
 8002622:	4631      	mov	r1, r6
 8002624:	4638      	mov	r0, r7
 8002626:	f7ff ff31 	bl	800248c <_free_r>
 800262a:	e7e9      	b.n	8002600 <_realloc_r+0x1c>
 800262c:	4635      	mov	r5, r6
 800262e:	e7e7      	b.n	8002600 <_realloc_r+0x1c>

08002630 <_sbrk_r>:
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	4c06      	ldr	r4, [pc, #24]	; (800264c <_sbrk_r+0x1c>)
 8002634:	2300      	movs	r3, #0
 8002636:	4605      	mov	r5, r0
 8002638:	4608      	mov	r0, r1
 800263a:	6023      	str	r3, [r4, #0]
 800263c:	f7fe fbd2 	bl	8000de4 <_sbrk>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	d102      	bne.n	800264a <_sbrk_r+0x1a>
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	b103      	cbz	r3, 800264a <_sbrk_r+0x1a>
 8002648:	602b      	str	r3, [r5, #0]
 800264a:	bd38      	pop	{r3, r4, r5, pc}
 800264c:	200000fc 	.word	0x200000fc

08002650 <__malloc_lock>:
 8002650:	4770      	bx	lr

08002652 <__malloc_unlock>:
 8002652:	4770      	bx	lr

08002654 <_malloc_usable_size_r>:
 8002654:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002658:	2800      	cmp	r0, #0
 800265a:	f1a0 0004 	sub.w	r0, r0, #4
 800265e:	bfbc      	itt	lt
 8002660:	580b      	ldrlt	r3, [r1, r0]
 8002662:	18c0      	addlt	r0, r0, r3
 8002664:	4770      	bx	lr
	...

08002668 <_init>:
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	bf00      	nop
 800266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266e:	bc08      	pop	{r3}
 8002670:	469e      	mov	lr, r3
 8002672:	4770      	bx	lr

08002674 <_fini>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

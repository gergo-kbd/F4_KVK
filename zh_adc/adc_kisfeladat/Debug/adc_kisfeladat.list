
adc_kisfeladat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000504c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08005288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000214  20000070  080052f8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000284  080052f8  00020284  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d911  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cf7  00000000  00000000  0002d9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000de0  00000000  00000000  0002f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ce8  00000000  00000000  00030488  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005dde  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004882  00000000  00000000  00036f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003b7d0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d7c  00000000  00000000  0003b84c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005204 	.word	0x08005204

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005204 	.word	0x08005204

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <LCD_clock>:
 */

#include "main.h"
#include "lcd.h"

void LCD_clock(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

	HAL_Delay(6);
 80005c4:	2006      	movs	r0, #6
 80005c6:	f000 ffbd 	bl	8001544 <HAL_Delay>
	// lcd e 1
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <LCD_clock+0x34>)
 80005d2:	f001 fde9 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80005d6:	2005      	movs	r0, #5
 80005d8:	f000 ffb4 	bl	8001544 <HAL_Delay>
	//lcd e 0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <LCD_clock+0x34>)
 80005e4:	f001 fde0 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 ffab 	bl	8001544 <HAL_Delay>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <LCD_write>:

void LCD_write(uint8_t data){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

	//felso 4 bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>7)&0x01));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	09db      	lsrs	r3, r3, #7
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	482e      	ldr	r0, [pc, #184]	; (80006c8 <LCD_write+0xd0>)
 8000610:	f001 fdca 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>6)&0x01));
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	099b      	lsrs	r3, r3, #6
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000626:	4829      	ldr	r0, [pc, #164]	; (80006cc <LCD_write+0xd4>)
 8000628:	f001 fdbe 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>5)&0x01));
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4823      	ldr	r0, [pc, #140]	; (80006cc <LCD_write+0xd4>)
 8000640:	f001 fdb2 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data>>4)&0x01));
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	481d      	ldr	r0, [pc, #116]	; (80006cc <LCD_write+0xd4>)
 8000658:	f001 fda6 	bl	80021a8 <HAL_GPIO_WritePin>

	LCD_clock();
 800065c:	f7ff ffb0 	bl	80005c0 <LCD_clock>

	//also 4
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port, LCD_DATA_7_Pin, ((data>>3)&0x01));
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	08db      	lsrs	r3, r3, #3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000672:	4815      	ldr	r0, [pc, #84]	; (80006c8 <LCD_write+0xd0>)
 8000674:	f001 fd98 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port, LCD_DATA_6_Pin, ((data>>2)&0x01));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <LCD_write+0xd4>)
 800068c:	f001 fd8c 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port, LCD_DATA_5_Pin, ((data>>1)&0x01));
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	085b      	lsrs	r3, r3, #1
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <LCD_write+0xd4>)
 80006a4:	f001 fd80 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port, LCD_DATA_4_Pin, ((data)&0x01));
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <LCD_write+0xd4>)
 80006b8:	f001 fd76 	bl	80021a8 <HAL_GPIO_WritePin>

	LCD_clock();
 80006bc:	f7ff ff80 	bl	80005c0 <LCD_clock>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020400 	.word	0x40020400
 80006cc:	40021000 	.word	0x40021000

080006d0 <LCD_data>:

void LCD_data(uint8_t adat){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <LCD_data+0x24>)
 80006e0:	f001 fd62 	bl	80021a8 <HAL_GPIO_WritePin>
	LCD_write(adat);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff86 	bl	80005f8 <LCD_write>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <LCD_cmd>:

void LCD_cmd(uint8_t cmd){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <LCD_cmd+0x24>)
 8000708:	f001 fd4e 	bl	80021a8 <HAL_GPIO_WritePin>
	LCD_write(cmd);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff72 	bl	80005f8 <LCD_write>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <LCD_init>:

void LCD_init(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

	LCD_cmd(0x20);
 8000724:	2020      	movs	r0, #32
 8000726:	f7ff ffe7 	bl	80006f8 <LCD_cmd>
	LCD_clock();
 800072a:	f7ff ff49 	bl	80005c0 <LCD_clock>
	LCD_clock();
 800072e:	f7ff ff47 	bl	80005c0 <LCD_clock>
	LCD_clock();
 8000732:	f7ff ff45 	bl	80005c0 <LCD_clock>
	// mod - 4 bit 2 sor, 5x8pont matrix
	// 3x - nem tudjuk milyen modban volt
	LCD_cmd(0x28);
 8000736:	2028      	movs	r0, #40	; 0x28
 8000738:	f7ff ffde 	bl	80006f8 <LCD_cmd>
	LCD_cmd(0x28);
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f7ff ffdb 	bl	80006f8 <LCD_cmd>
	LCD_cmd(0x28);
 8000742:	2028      	movs	r0, #40	; 0x28
 8000744:	f7ff ffd8 	bl	80006f8 <LCD_cmd>

	//alaphelyzet
	LCD_cmd(0x02);
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ffd5 	bl	80006f8 <LCD_cmd>
	// lcd torles
	LCD_cmd(0x01);
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ffd2 	bl	80006f8 <LCD_cmd>
	//kurzor beallitasa
	LCD_cmd(0x08 | (1<<2) | (0<<1) | (0<<0));
 8000754:	200c      	movs	r0, #12
 8000756:	f7ff ffcf 	bl	80006f8 <LCD_cmd>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <LCD_string>:

void LCD_string(char *p){
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]

	while(*p){
 8000766:	e006      	b.n	8000776 <LCD_string+0x18>

		LCD_data(*p++);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffad 	bl	80006d0 <LCD_data>
	while(*p){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f4      	bne.n	8000768 <LCD_string+0xa>
	}
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <LCD_xy>:

void LCD_xy(uint8_t x, uint8_t y){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

		switch (y)
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	3b01      	subs	r3, #1
 800079c:	2b03      	cmp	r3, #3
 800079e:	d820      	bhi.n	80007e2 <LCD_xy+0x5a>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <LCD_xy+0x20>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007c1 	.word	0x080007c1
 80007b0:	080007c9 	.word	0x080007c9
 80007b4:	080007d1 	.word	0x080007d1
		{
			case 1:    // 1. sor
			position = LCD_START_DDADR + LCD_ADR_LINE1 + x;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	3b80      	subs	r3, #128	; 0x80
 80007bc:	73fb      	strb	r3, [r7, #15]
			break;
 80007be:	e00b      	b.n	80007d8 <LCD_xy+0x50>

			case 2:    // 2. sor
			position = LCD_START_DDADR + LCD_ADR_LINE2 + x;
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3b40      	subs	r3, #64	; 0x40
 80007c4:	73fb      	strb	r3, [r7, #15]
			break;
 80007c6:	e007      	b.n	80007d8 <LCD_xy+0x50>

			case 3:    // 3. sor
			position = LCD_START_DDADR + LCD_ADR_LINE3 + x;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	3b70      	subs	r3, #112	; 0x70
 80007cc:	73fb      	strb	r3, [r7, #15]
			break;
 80007ce:	e003      	b.n	80007d8 <LCD_xy+0x50>

			case 4:    // 4. sor
			position = LCD_START_DDADR + LCD_ADR_LINE4 + x;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3b30      	subs	r3, #48	; 0x30
 80007d4:	73fb      	strb	r3, [r7, #15]
			break;
 80007d6:	bf00      	nop

			default:
			return;
		}
		LCD_cmd(position); // beallitas
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff8c 	bl	80006f8 <LCD_cmd>
 80007e0:	e000      	b.n	80007e4 <LCD_xy+0x5c>
			return;
 80007e2:	bf00      	nop

}
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop

080007ec <HAL_TIM_PeriodElapsedCallback>:
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if(cnt==2000){
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007fc:	d127      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x62>
		HAL_ADC_Start(&hadc2); //adc conv start
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000800:	f000 ff06 	bl	8001610 <HAL_ADC_Start>
		//HAL_Delay(50);
		adc_data_reg = HAL_ADC_GetValue(&hadc2);
 8000804:	4818      	ldr	r0, [pc, #96]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000806:	f000 ffc3 	bl	8001790 <HAL_ADC_GetValue>
 800080a:	4602      	mov	r2, r0
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800080e:	601a      	str	r2, [r3, #0]
		v_adc_ch3 = (3300*adc_data_reg)/4096;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	0b1b      	lsrs	r3, r3, #12
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000820:	6013      	str	r3, [r2, #0]
		sprintf(num, "%d", v_adc_ch3);
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	4912      	ldr	r1, [pc, #72]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800082a:	4813      	ldr	r0, [pc, #76]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800082c:	f004 f8cc 	bl	80049c8 <siprintf>
		HAL_UART_Transmit(&huart3, num, sizeof(num), 10);
 8000830:	230a      	movs	r3, #10
 8000832:	2206      	movs	r2, #6
 8000834:	4910      	ldr	r1, [pc, #64]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000838:	f003 fbe4 	bl	8004004 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\n\r", sizeof("\n\r"), 10);
 800083c:	230a      	movs	r3, #10
 800083e:	2203      	movs	r2, #3
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000844:	f003 fbde 	bl	8004004 <HAL_UART_Transmit>


		cnt=0;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]
	}
	cnt++;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000858:	801a      	strh	r2, [r3, #0]

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000090 	.word	0x20000090
 8000868:	20000164 	.word	0x20000164
 800086c:	200000a0 	.word	0x200000a0
 8000870:	2000008c 	.word	0x2000008c
 8000874:	0800521c 	.word	0x0800521c
 8000878:	20000234 	.word	0x20000234
 800087c:	200000e4 	.word	0x200000e4
 8000880:	08005220 	.word	0x08005220

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fdfe 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f8be 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 fb04 	bl	8000e9c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000894:	f000 fa34 	bl	8000d00 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000898:	f000 fa8c 	bl	8000db4 <MX_TIM12_Init>
  MX_ADC1_Init();
 800089c:	f000 f930 	bl	8000b00 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008a0:	f000 f982 	bl	8000ba8 <MX_ADC2_Init>
  MX_TIM3_Init();
 80008a4:	f000 f9d2 	bl	8000c4c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80008a8:	f000 fac8 	bl	8000e3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80008ac:	4853      	ldr	r0, [pc, #332]	; (80009fc <main+0x178>)
 80008ae:	f002 fcfd 	bl	80032ac <HAL_TIM_Base_Start_IT>
  LCD_init();
 80008b2:	f7ff ff35 	bl	8000720 <LCD_init>
  LCD_cmd(0x80);
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	f7ff ff1e 	bl	80006f8 <LCD_cmd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD_xy(0,1);
 80008bc:	2101      	movs	r1, #1
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ff62 	bl	8000788 <LCD_xy>


	  	  if((v_adc_ch3>=2476) && (v_adc_ch3<=3300))
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <main+0x17c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f640 12ab 	movw	r2, #2475	; 0x9ab
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d921      	bls.n	8000914 <main+0x90>
 80008d0:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <main+0x17c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80008d8:	4293      	cmp	r3, r2
 80008da:	d81b      	bhi.n	8000914 <main+0x90>
	  	  	  {
	  		  LCD_xy(15,1); LCD_string("*");
 80008dc:	2101      	movs	r1, #1
 80008de:	200f      	movs	r0, #15
 80008e0:	f7ff ff52 	bl	8000788 <LCD_xy>
 80008e4:	4847      	ldr	r0, [pc, #284]	; (8000a04 <main+0x180>)
 80008e6:	f7ff ff3a 	bl	800075e <LCD_string>
	  		  LCD_xy(15,2); LCD_string("*");
 80008ea:	2102      	movs	r1, #2
 80008ec:	200f      	movs	r0, #15
 80008ee:	f7ff ff4b 	bl	8000788 <LCD_xy>
 80008f2:	4844      	ldr	r0, [pc, #272]	; (8000a04 <main+0x180>)
 80008f4:	f7ff ff33 	bl	800075e <LCD_string>
	  		  LCD_xy(15,3); LCD_string("*");
 80008f8:	2103      	movs	r1, #3
 80008fa:	200f      	movs	r0, #15
 80008fc:	f7ff ff44 	bl	8000788 <LCD_xy>
 8000900:	4840      	ldr	r0, [pc, #256]	; (8000a04 <main+0x180>)
 8000902:	f7ff ff2c 	bl	800075e <LCD_string>
	  		  LCD_xy(15,4); LCD_string("*");
 8000906:	2104      	movs	r1, #4
 8000908:	200f      	movs	r0, #15
 800090a:	f7ff ff3d 	bl	8000788 <LCD_xy>
 800090e:	483d      	ldr	r0, [pc, #244]	; (8000a04 <main+0x180>)
 8000910:	f7ff ff25 	bl	800075e <LCD_string>

	  	  	  }

	  	  	  if((v_adc_ch3>=1651) && (v_adc_ch3<=2475))
 8000914:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <main+0x17c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f240 6272 	movw	r2, #1650	; 0x672
 800091c:	4293      	cmp	r3, r2
 800091e:	d921      	bls.n	8000964 <main+0xe0>
 8000920:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <main+0x17c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f640 12ab 	movw	r2, #2475	; 0x9ab
 8000928:	4293      	cmp	r3, r2
 800092a:	d81b      	bhi.n	8000964 <main+0xe0>
	  	  	  {
	  	  		LCD_xy(15,1); LCD_string(" ");
 800092c:	2101      	movs	r1, #1
 800092e:	200f      	movs	r0, #15
 8000930:	f7ff ff2a 	bl	8000788 <LCD_xy>
 8000934:	4834      	ldr	r0, [pc, #208]	; (8000a08 <main+0x184>)
 8000936:	f7ff ff12 	bl	800075e <LCD_string>
	  	  		LCD_xy(15,2); LCD_string("*");
 800093a:	2102      	movs	r1, #2
 800093c:	200f      	movs	r0, #15
 800093e:	f7ff ff23 	bl	8000788 <LCD_xy>
 8000942:	4830      	ldr	r0, [pc, #192]	; (8000a04 <main+0x180>)
 8000944:	f7ff ff0b 	bl	800075e <LCD_string>
	  	  		LCD_xy(15,3); LCD_string("*");
 8000948:	2103      	movs	r1, #3
 800094a:	200f      	movs	r0, #15
 800094c:	f7ff ff1c 	bl	8000788 <LCD_xy>
 8000950:	482c      	ldr	r0, [pc, #176]	; (8000a04 <main+0x180>)
 8000952:	f7ff ff04 	bl	800075e <LCD_string>
	  	  		LCD_xy(15,4); LCD_string("*");
 8000956:	2104      	movs	r1, #4
 8000958:	200f      	movs	r0, #15
 800095a:	f7ff ff15 	bl	8000788 <LCD_xy>
 800095e:	4829      	ldr	r0, [pc, #164]	; (8000a04 <main+0x180>)
 8000960:	f7ff fefd 	bl	800075e <LCD_string>
	  	  	  	}

	  	  	  	if((v_adc_ch3<=1650) && (v_adc_ch3>=826))
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <main+0x17c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f240 6272 	movw	r2, #1650	; 0x672
 800096c:	4293      	cmp	r3, r2
 800096e:	d821      	bhi.n	80009b4 <main+0x130>
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <main+0x17c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f240 3239 	movw	r2, #825	; 0x339
 8000978:	4293      	cmp	r3, r2
 800097a:	d91b      	bls.n	80009b4 <main+0x130>
	  	  	  	 {
	  	  	  	LCD_xy(15,1); LCD_string(" ");
 800097c:	2101      	movs	r1, #1
 800097e:	200f      	movs	r0, #15
 8000980:	f7ff ff02 	bl	8000788 <LCD_xy>
 8000984:	4820      	ldr	r0, [pc, #128]	; (8000a08 <main+0x184>)
 8000986:	f7ff feea 	bl	800075e <LCD_string>
	  	  	  	LCD_xy(15,2); LCD_string(" ");
 800098a:	2102      	movs	r1, #2
 800098c:	200f      	movs	r0, #15
 800098e:	f7ff fefb 	bl	8000788 <LCD_xy>
 8000992:	481d      	ldr	r0, [pc, #116]	; (8000a08 <main+0x184>)
 8000994:	f7ff fee3 	bl	800075e <LCD_string>
	  	  	  	LCD_xy(15,3); LCD_string("*");
 8000998:	2103      	movs	r1, #3
 800099a:	200f      	movs	r0, #15
 800099c:	f7ff fef4 	bl	8000788 <LCD_xy>
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <main+0x180>)
 80009a2:	f7ff fedc 	bl	800075e <LCD_string>
	  	  	  	LCD_xy(15,4); LCD_string("*");
 80009a6:	2104      	movs	r1, #4
 80009a8:	200f      	movs	r0, #15
 80009aa:	f7ff feed 	bl	8000788 <LCD_xy>
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <main+0x180>)
 80009b0:	f7ff fed5 	bl	800075e <LCD_string>
	  	  	 }

	  	  	  if(v_adc_ch3<825)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <main+0x17c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f5b3 7f4e 	cmp.w	r3, #824	; 0x338
 80009bc:	f63f af7e 	bhi.w	80008bc <main+0x38>
	  	  	  {

	  	  		LCD_xy(15,1); LCD_string(" ");
 80009c0:	2101      	movs	r1, #1
 80009c2:	200f      	movs	r0, #15
 80009c4:	f7ff fee0 	bl	8000788 <LCD_xy>
 80009c8:	480f      	ldr	r0, [pc, #60]	; (8000a08 <main+0x184>)
 80009ca:	f7ff fec8 	bl	800075e <LCD_string>
	  	  		LCD_xy(15,2); LCD_string(" ");
 80009ce:	2102      	movs	r1, #2
 80009d0:	200f      	movs	r0, #15
 80009d2:	f7ff fed9 	bl	8000788 <LCD_xy>
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <main+0x184>)
 80009d8:	f7ff fec1 	bl	800075e <LCD_string>
	  	  		LCD_xy(15,3); LCD_string(" ");
 80009dc:	2103      	movs	r1, #3
 80009de:	200f      	movs	r0, #15
 80009e0:	f7ff fed2 	bl	8000788 <LCD_xy>
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <main+0x184>)
 80009e6:	f7ff feba 	bl	800075e <LCD_string>
	  	  		LCD_xy(15,4); LCD_string("*");
 80009ea:	2104      	movs	r1, #4
 80009ec:	200f      	movs	r0, #15
 80009ee:	f7ff fecb 	bl	8000788 <LCD_xy>
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <main+0x180>)
 80009f4:	f7ff feb3 	bl	800075e <LCD_string>
	  LCD_xy(0,1);
 80009f8:	e760      	b.n	80008bc <main+0x38>
 80009fa:	bf00      	nop
 80009fc:	200000a4 	.word	0x200000a4
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	08005224 	.word	0x08005224
 8000a08:	08005228 	.word	0x08005228

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0b4      	sub	sp, #208	; 0xd0
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a16:	2230      	movs	r2, #48	; 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 ffcc 	bl	80049b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2284      	movs	r2, #132	; 0x84
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 ffbd 	bl	80049b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	; (8000af8 <SystemClock_Config+0xec>)
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <SystemClock_Config+0xec>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <SystemClock_Config+0xec>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a56:	4a29      	ldr	r2, [pc, #164]	; (8000afc <SystemClock_Config+0xf0>)
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <SystemClock_Config+0xf0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <SystemClock_Config+0xf0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fba4 	bl	80021dc <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a9a:	f000 fadb 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000abc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fe2e 	bl	8002724 <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ace:	f000 fac1 	bl	8001054 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fff5 	bl	8002ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000aec:	f000 fab2 	bl	8001054 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	37d0      	adds	r7, #208	; 0xd0
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <MX_ADC1_Init+0x9c>)
 8000b16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <MX_ADC1_Init+0xa0>)
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b60:	f000 fd12 	bl	8001588 <HAL_ADC_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b6a:	f000 fa73 	bl	8001054 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_ADC1_Init+0xa4>)
 8000b70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b80:	f000 fe14 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b8a:	f000 fa63 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001ec 	.word	0x200001ec
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	0f000001 	.word	0x0f000001
 8000ba4:	10000012 	.word	0x10000012

08000ba8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <MX_ADC2_Init+0x9c>)
 8000bbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <MX_ADC2_Init+0xa0>)
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000c08:	f000 fcbe 	bl	8001588 <HAL_ADC_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 fa1f 	bl	8001054 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c16:	2303      	movs	r3, #3
 8000c18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_ADC2_Init+0x98>)
 8000c28:	f000 fdc0 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000c32:	f000 fa0f 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000164 	.word	0x20000164
 8000c44:	40012100 	.word	0x40012100
 8000c48:	0f000001 	.word	0x0f000001

08000c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <MX_TIM3_Init+0xb0>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c96:	4818      	ldr	r0, [pc, #96]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000c98:	f002 fb32 	bl	8003300 <HAL_TIM_PWM_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ca2:	f000 f9d7 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000cb6:	f003 f8ab 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cc0:	f000 f9c8 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc4:	2360      	movs	r3, #96	; 0x60
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000cdc:	f002 fc5a 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ce6:	f000 f9b5 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MX_TIM3_Init+0xac>)
 8000cec:	f000 fa84 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200001ac 	.word	0x200001ac
 8000cfc:	40000400 	.word	0x40000400

08000d00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <MX_TIM4_Init+0xb0>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d38:	2264      	movs	r2, #100	; 0x64
 8000d3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d48:	4818      	ldr	r0, [pc, #96]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d4a:	f002 fad9 	bl	8003300 <HAL_TIM_PWM_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d54:	f000 f97e 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d68:	f003 f852 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000d72:	f000 f96f 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2360      	movs	r3, #96	; 0x60
 8000d78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d8e:	f002 fc01 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d98:	f000 f95c 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <MX_TIM4_Init+0xac>)
 8000d9e:	f000 fa2b 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000a4 	.word	0x200000a4
 8000db0:	40000800 	.word	0x40000800

08000db4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <MX_TIM12_Init+0x84>)
 8000dd0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 15;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000de0:	2264      	movs	r2, #100	; 0x64
 8000de2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000df2:	f002 fa85 	bl	8003300 <HAL_TIM_PWM_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 f92a 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e00:	2360      	movs	r3, #96	; 0x60
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8000e04:	2305      	movs	r3, #5
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000e18:	f002 fbbc 	bl	8003594 <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8000e22:	f000 f917 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <MX_TIM12_Init+0x80>)
 8000e28:	f000 f9e6 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000023c 	.word	0x2000023c
 8000e38:	40001800 	.word	0x40001800

08000e3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <MX_USART3_UART_Init+0x5c>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_USART3_UART_Init+0x58>)
 8000e80:	f003 f872 	bl	8003f68 <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e8a:	f000 f8e3 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000e4 	.word	0x200000e4
 8000e98:	40004800 	.word	0x40004800

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4a63      	ldr	r2, [pc, #396]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000eb4:	4b62      	ldr	r3, [pc, #392]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b60      	ldr	r3, [pc, #384]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	4a5d      	ldr	r2, [pc, #372]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000ecc:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee2:	4a57      	ldr	r2, [pc, #348]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000ee4:	4b56      	ldr	r3, [pc, #344]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f043 0320 	orr.w	r3, r3, #32
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b54      	ldr	r3, [pc, #336]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0320 	and.w	r3, r3, #32
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	4a51      	ldr	r2, [pc, #324]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b48      	ldr	r3, [pc, #288]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4a45      	ldr	r2, [pc, #276]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f2c:	4b44      	ldr	r3, [pc, #272]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	4a3f      	ldr	r2, [pc, #252]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <MX_GPIO_Init+0x1a4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LCD_DATA_7_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f240 4101 	movw	r1, #1025	; 0x401
 8000f60:	4838      	ldr	r0, [pc, #224]	; (8001044 <MX_GPIO_Init+0x1a8>)
 8000f62:	f001 f921 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f6c:	4836      	ldr	r0, [pc, #216]	; (8001048 <MX_GPIO_Init+0x1ac>)
 8000f6e:	f001 f91b 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 8000f72:	2200      	movs	r2, #0
 8000f74:	f24f 4180 	movw	r1, #62592	; 0xf480
 8000f78:	4834      	ldr	r0, [pc, #208]	; (800104c <MX_GPIO_Init+0x1b0>)
 8000f7a:	f001 f915 	bl	80021a8 <HAL_GPIO_WritePin>
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KB_PC6_OUT_row4_GPIO_Port, KB_PC6_OUT_row4_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f84:	4832      	ldr	r0, [pc, #200]	; (8001050 <MX_GPIO_Init+0x1b4>)
 8000f86:	f001 f90f 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 LCD_DATA_7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_DATA_7_Pin;
 8000f8a:	f240 4301 	movw	r3, #1025	; 0x401
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4828      	ldr	r0, [pc, #160]	; (8001044 <MX_GPIO_Init+0x1a8>)
 8000fa4:	f000 ff56 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC0_IN_LEFT_Pin */
  GPIO_InitStruct.Pin = KB_PC0_IN_LEFT_Pin;
 8000fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KB_PC0_IN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_GPIO_Init+0x1ac>)
 8000fbe:	f000 ff49 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC3_OUT_row1_Pin KB_PC5_OUT_row3_Pin */
  GPIO_InitStruct.Pin = KB_PC3_OUT_row1_Pin|KB_PC5_OUT_row3_Pin;
 8000fc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x1ac>)
 8000fdc:	f000 ff3a 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_DATA_4_Pin KB_PC4_OUT_row2_Pin
                           LCD_DATA_5_Pin LCD_DATA_6_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_DATA_4_Pin|KB_PC4_OUT_row2_Pin
 8000fe0:	f24f 4380 	movw	r3, #62592	; 0xf480
 8000fe4:	61fb      	str	r3, [r7, #28]
                          |LCD_DATA_5_Pin|LCD_DATA_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_GPIO_Init+0x1b0>)
 8000ffa:	f000 ff2b 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : KB_PC1_IN_CENTER_Pin KB_PC2_IN_RIGHT_Pin */
  GPIO_InitStruct.Pin = KB_PC1_IN_CENTER_Pin|KB_PC2_IN_RIGHT_Pin;
 8000ffe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <MX_GPIO_Init+0x1b0>)
 8001014:	f000 ff1e 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : KB_PC6_OUT_row4_Pin */
  GPIO_InitStruct.Pin = KB_PC6_OUT_row4_Pin;
 8001018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KB_PC6_OUT_row4_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_GPIO_Init+0x1b4>)
 8001032:	f000 ff0f 	bl	8001e54 <HAL_GPIO_Init>

}
 8001036:	bf00      	nop
 8001038:	3730      	adds	r7, #48	; 0x30
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	40021400 	.word	0x40021400
 800104c:	40021000 	.word	0x40021000
 8001050:	40021800 	.word	0x40021800

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105a:	e7fe      	b.n	800105a <Error_Handler+0x6>

0800105c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_MspInit+0x44>)
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_MspInit+0x44>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_MspInit+0x44>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_MspInit+0x44>)
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_MspInit+0x44>)
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x44>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1e      	ldr	r2, [pc, #120]	; (800113c <HAL_ADC_MspInit+0x98>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10c      	bne.n	80010e0 <HAL_ADC_MspInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010de:	e028      	b.n	8001132 <HAL_ADC_MspInit+0x8e>
  else if(hadc->Instance==ADC2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <HAL_ADC_MspInit+0xa0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d123      	bne.n	8001132 <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_ADC_MspInit+0x9c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800111a:	2308      	movs	r3, #8
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <HAL_ADC_MspInit+0xa4>)
 800112e:	f000 fe91 	bl	8001e54 <HAL_GPIO_Init>
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012000 	.word	0x40012000
 8001140:	40023800 	.word	0x40023800
 8001144:	40012100 	.word	0x40012100
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <HAL_TIM_PWM_MspInit+0x9c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10c      	bne.n	8001178 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001176:	e032      	b.n	80011de <HAL_TIM_PWM_MspInit+0x92>
  else if(htim_pwm->Instance==TIM4)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_TIM_PWM_MspInit+0xa4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d114      	bne.n	80011ac <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001182:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	201e      	movs	r0, #30
 80011a0:	f000 fe21 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011a4:	201e      	movs	r0, #30
 80011a6:	f000 fe3a 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 80011aa:	e018      	b.n	80011de <HAL_TIM_PWM_MspInit+0x92>
  else if(htim_pwm->Instance==TIM12)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d113      	bne.n	80011de <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80011b6:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_PWM_MspInit+0xa0>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	202b      	movs	r0, #43	; 0x2b
 80011d4:	f000 fe07 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80011d8:	202b      	movs	r0, #43	; 0x2b
 80011da:	f000 fe20 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40000800 	.word	0x40000800
 80011f4:	40001800 	.word	0x40001800

080011f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a34      	ldr	r2, [pc, #208]	; (80012e8 <HAL_TIM_MspPostInit+0xf0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d11d      	bne.n	8001256 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4a34      	ldr	r2, [pc, #208]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001244:	2302      	movs	r3, #2
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4828      	ldr	r0, [pc, #160]	; (80012f0 <HAL_TIM_MspPostInit+0xf8>)
 8001250:	f000 fe00 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001254:	e043      	b.n	80012de <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <HAL_TIM_MspPostInit+0xfc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d11c      	bne.n	800129a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001288:	2302      	movs	r3, #2
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4819      	ldr	r0, [pc, #100]	; (80012f8 <HAL_TIM_MspPostInit+0x100>)
 8001294:	f000 fdde 	bl	8001e54 <HAL_GPIO_Init>
}
 8001298:	e021      	b.n	80012de <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM12)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_TIM_MspPostInit+0x104>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d11c      	bne.n	80012de <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_TIM_MspPostInit+0xf4>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80012ce:	2309      	movs	r3, #9
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <HAL_TIM_MspPostInit+0x100>)
 80012da:	f000 fdbb 	bl	8001e54 <HAL_GPIO_Init>
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40000400 	.word	0x40000400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40000800 	.word	0x40000800
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40001800 	.word	0x40001800

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_UART_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d128      	bne.n	8001374 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_UART_MspInit+0x80>)
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_UART_MspInit+0x80>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001364:	2307      	movs	r3, #7
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_UART_MspInit+0x84>)
 8001370:	f000 fd70 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40004800 	.word	0x40004800
 8001380:	40023800 	.word	0x40023800
 8001384:	40020c00 	.word	0x40020c00

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800138c:	e7fe      	b.n	800138c <NMI_Handler+0x4>

0800138e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <MemManage_Handler+0x4>

0800139a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f896 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <TIM4_IRQHandler+0x10>)
 80013e2:	f001 ffb8 	bl	8003356 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000a4 	.word	0x200000a4

080013f0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80013f6:	f001 ffae 	bl	8003356 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000023c 	.word	0x2000023c

08001404 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x50>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x16>
		heap_end = &end;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <_sbrk+0x50>)
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <_sbrk+0x54>)
 8001418:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <_sbrk+0x50>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <_sbrk+0x50>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	466a      	mov	r2, sp
 800142a:	4293      	cmp	r3, r2
 800142c:	d907      	bls.n	800143e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800142e:	f003 fa99 	bl	8004964 <__errno>
 8001432:	4602      	mov	r2, r0
 8001434:	230c      	movs	r3, #12
 8001436:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	e006      	b.n	800144c <_sbrk+0x48>
	}

	heap_end += incr;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <_sbrk+0x50>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a03      	ldr	r2, [pc, #12]	; (8001454 <_sbrk+0x50>)
 8001448:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000094 	.word	0x20000094
 8001458:	20000284 	.word	0x20000284

0800145c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4a08      	ldr	r2, [pc, #32]	; (8001484 <SystemInit+0x28>)
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <SystemInit+0x28>)
 8001464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SystemInit+0x28>)
 8001472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001476:	609a      	str	r2, [r3, #8]
#endif
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 fc9f 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f806 	bl	80014a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fde0 	bl	800105c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fcb9 	bl	8001e3a <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 fc81 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	2000027c 	.word	0x2000027c

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000027c 	.word	0x2000027c

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_Delay+0x40>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffde 	bl	800152c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad2      	subs	r2, r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3f7      	bcc.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e031      	b.n	8001602 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd7c 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_ADC_Init+0x84>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	f043 0202 	orr.w	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fa32 	bl	8001a40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
 80015f2:	e001      	b.n	80015f8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	ffffeefd 	.word	0xffffeefd

08001610 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_Start+0x1a>
 8001626:	2302      	movs	r3, #2
 8001628:	e0a0      	b.n	800176c <HAL_ADC_Start+0x15c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d018      	beq.n	8001672 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	6892      	ldr	r2, [r2, #8]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001650:	4b49      	ldr	r3, [pc, #292]	; (8001778 <HAL_ADC_Start+0x168>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a49      	ldr	r2, [pc, #292]	; (800177c <HAL_ADC_Start+0x16c>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9a      	lsrs	r2, r3, #18
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001664:	e002      	b.n	800166c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3b01      	subs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d174      	bne.n	800176a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_ADC_Start+0x170>)
 8001686:	4013      	ands	r3, r2
 8001688:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ba:	d106      	bne.n	80016ca <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f023 0206 	bic.w	r2, r3, #6
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_ADC_Start+0x174>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d136      	bne.n	800176a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	6892      	ldr	r2, [r2, #8]
 8001706:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	e02d      	b.n	800176a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_ADC_Start+0x178>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d10e      	bne.n	8001736 <HAL_ADC_Start+0x126>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	6892      	ldr	r2, [r2, #8]
 8001730:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001734:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_ADC_Start+0x174>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b00      	cmp	r3, #0
 8001740:	d113      	bne.n	800176a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_ADC_Start+0x17c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d10e      	bne.n	800176a <HAL_ADC_Start+0x15a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	6892      	ldr	r2, [r2, #8]
 8001764:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001768:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	20000000 	.word	0x20000000
 800177c:	431bde83 	.word	0x431bde83
 8001780:	fffff8fe 	.word	0xfffff8fe
 8001784:	40012300 	.word	0x40012300
 8001788:	40012000 	.word	0x40012000
 800178c:	40012200 	.word	0x40012200

08001790 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017ac:	b490      	push	{r4, r7}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e12c      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x276>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d93b      	bls.n	8001850 <HAL_ADC_ConfigChannel+0xa4>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017e0:	d036      	beq.n	8001850 <HAL_ADC_ConfigChannel+0xa4>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68d9      	ldr	r1, [r3, #12]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4403      	add	r3, r0
 80017fa:	3b1e      	subs	r3, #30
 80017fc:	2007      	movs	r0, #7
 80017fe:	fa00 f303 	lsl.w	r3, r0, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	400b      	ands	r3, r1
 8001806:	60d3      	str	r3, [r2, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a87      	ldr	r2, [pc, #540]	; (8001a2c <HAL_ADC_ConfigChannel+0x280>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10a      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	68d1      	ldr	r1, [r2, #12]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	6892      	ldr	r2, [r2, #8]
 8001820:	0612      	lsls	r2, r2, #24
 8001822:	430a      	orrs	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001826:	e037      	b.n	8001898 <HAL_ADC_ConfigChannel+0xec>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68d9      	ldr	r1, [r3, #12]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6898      	ldr	r0, [r3, #8]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	461c      	mov	r4, r3
 800183e:	4623      	mov	r3, r4
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4423      	add	r3, r4
 8001844:	3b1e      	subs	r3, #30
 8001846:	fa00 f303 	lsl.w	r3, r0, r3
 800184a:	430b      	orrs	r3, r1
 800184c:	60d3      	str	r3, [r2, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800184e:	e023      	b.n	8001898 <HAL_ADC_ConfigChannel+0xec>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6919      	ldr	r1, [r3, #16]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	4603      	mov	r3, r0
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4403      	add	r3, r0
 8001868:	2007      	movs	r0, #7
 800186a:	fa00 f303 	lsl.w	r3, r0, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	400b      	ands	r3, r1
 8001872:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6919      	ldr	r1, [r3, #16]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6898      	ldr	r0, [r3, #8]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	461c      	mov	r4, r3
 800188a:	4623      	mov	r3, r4
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4423      	add	r3, r4
 8001890:	fa00 f303 	lsl.w	r3, r0, r3
 8001894:	430b      	orrs	r3, r1
 8001896:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b06      	cmp	r3, #6
 800189e:	d824      	bhi.n	80018ea <HAL_ADC_ConfigChannel+0x13e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b05      	subs	r3, #5
 80018b6:	221f      	movs	r2, #31
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	4003      	ands	r3, r0
 80018c0:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	461c      	mov	r4, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b05      	subs	r3, #5
 80018e0:	fa04 f303 	lsl.w	r3, r4, r3
 80018e4:	4303      	orrs	r3, r0
 80018e6:	634b      	str	r3, [r1, #52]	; 0x34
 80018e8:	e04c      	b.n	8001984 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d824      	bhi.n	800193c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3b23      	subs	r3, #35	; 0x23
 8001908:	221f      	movs	r2, #31
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	4003      	ands	r3, r0
 8001912:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	461c      	mov	r4, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b23      	subs	r3, #35	; 0x23
 8001932:	fa04 f303 	lsl.w	r3, r4, r3
 8001936:	4303      	orrs	r3, r0
 8001938:	630b      	str	r3, [r1, #48]	; 0x30
 800193a:	e023      	b.n	8001984 <HAL_ADC_ConfigChannel+0x1d8>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b41      	subs	r3, #65	; 0x41
 8001952:	221f      	movs	r2, #31
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	4003      	ands	r3, r0
 800195c:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	461c      	mov	r4, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b41      	subs	r3, #65	; 0x41
 800197c:	fa04 f303 	lsl.w	r3, r4, r3
 8001980:	4303      	orrs	r3, r0
 8001982:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <HAL_ADC_ConfigChannel+0x284>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1f8>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1f8>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_ADC_ConfigChannel+0x288>)
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_ADC_ConfigChannel+0x288>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_ADC_ConfigChannel+0x284>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x216>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d105      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x216>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <HAL_ADC_ConfigChannel+0x288>)
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_ADC_ConfigChannel+0x288>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_ADC_ConfigChannel+0x284>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d125      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x26c>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <HAL_ADC_ConfigChannel+0x280>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <HAL_ADC_ConfigChannel+0x232>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d11c      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x26c>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019de:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <HAL_ADC_ConfigChannel+0x288>)
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_ADC_ConfigChannel+0x288>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_ADC_ConfigChannel+0x280>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x26c>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_ADC_ConfigChannel+0x28c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_ADC_ConfigChannel+0x290>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0c9a      	lsrs	r2, r3, #18
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a0a:	e002      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x266>
      {
        counter--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f9      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x260>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc90      	pop	{r4, r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	10000012 	.word	0x10000012
 8001a30:	40012000 	.word	0x40012000
 8001a34:	40012300 	.word	0x40012300
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	431bde83 	.word	0x431bde83

08001a40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a48:	4a78      	ldr	r2, [pc, #480]	; (8001c2c <ADC_Init+0x1ec>)
 8001a4a:	4b78      	ldr	r3, [pc, #480]	; (8001c2c <ADC_Init+0x1ec>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a54:	4975      	ldr	r1, [pc, #468]	; (8001c2c <ADC_Init+0x1ec>)
 8001a56:	4b75      	ldr	r3, [pc, #468]	; (8001c2c <ADC_Init+0x1ec>)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	6852      	ldr	r2, [r2, #4]
 8001a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	6851      	ldr	r1, [r2, #4]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6912      	ldr	r2, [r2, #16]
 8001a80:	0212      	lsls	r2, r2, #8
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	6852      	ldr	r2, [r2, #4]
 8001a90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	6851      	ldr	r1, [r2, #4]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6892      	ldr	r2, [r2, #8]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	6892      	ldr	r2, [r2, #8]
 8001ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	6891      	ldr	r1, [r2, #8]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68d2      	ldr	r2, [r2, #12]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <ADC_Init+0x1f0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d022      	beq.n	8001b1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	6892      	ldr	r2, [r2, #8]
 8001ade:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	6891      	ldr	r1, [r2, #8]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	6892      	ldr	r2, [r2, #8]
 8001b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	6891      	ldr	r1, [r2, #8]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e00f      	b.n	8001b3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	6892      	ldr	r2, [r2, #8]
 8001b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	6892      	ldr	r2, [r2, #8]
 8001b34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	6892      	ldr	r2, [r2, #8]
 8001b44:	f022 0202 	bic.w	r2, r2, #2
 8001b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	6891      	ldr	r1, [r2, #8]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6992      	ldr	r2, [r2, #24]
 8001b58:	0052      	lsls	r2, r2, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01b      	beq.n	8001ba0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	6852      	ldr	r2, [r2, #4]
 8001b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	6852      	ldr	r2, [r2, #4]
 8001b82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	6851      	ldr	r1, [r2, #4]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b96:	3a01      	subs	r2, #1
 8001b98:	0352      	lsls	r2, r2, #13
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	e007      	b.n	8001bb0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	6852      	ldr	r2, [r2, #4]
 8001baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	69d2      	ldr	r2, [r2, #28]
 8001bce:	3a01      	subs	r2, #1
 8001bd0:	0512      	lsls	r2, r2, #20
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	6892      	ldr	r2, [r2, #8]
 8001be0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	6891      	ldr	r1, [r2, #8]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001bf6:	0252      	lsls	r2, r2, #9
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	6892      	ldr	r2, [r2, #8]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	6891      	ldr	r1, [r2, #8]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6952      	ldr	r2, [r2, #20]
 8001c1a:	0292      	lsls	r2, r2, #10
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40012300 	.word	0x40012300
 8001c30:	0f000001 	.word	0x0f000001

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <__NVIC_SetPriorityGrouping+0x40>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x40>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00
 8001c78:	05fa0000 	.word	0x05fa0000

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	490d      	ldr	r1, [pc, #52]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	4909      	ldr	r1, [pc, #36]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	401a      	ands	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6e:	2101      	movs	r1, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	1e59      	subs	r1, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff90 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff2b 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff40 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff90 	bl	8001d28 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5f 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff33 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa2 	bl	8001d8c <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e175      	b.n	8002160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8164 	bne.w	800215a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d00b      	beq.n	8001eb2 <HAL_GPIO_Init+0x5e>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea6:	2b11      	cmp	r3, #17
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x100>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b12      	cmp	r3, #18
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80be 	beq.w	800215a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_GPIO_Init+0x320>)
 8001fe0:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_GPIO_Init+0x320>)
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b62      	ldr	r3, [pc, #392]	; (8002174 <HAL_GPIO_Init+0x320>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ff6:	4a60      	ldr	r2, [pc, #384]	; (8002178 <HAL_GPIO_Init+0x324>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_GPIO_Init+0x328>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d037      	beq.n	8002092 <HAL_GPIO_Init+0x23e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d031      	beq.n	800208e <HAL_GPIO_Init+0x23a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a55      	ldr	r2, [pc, #340]	; (8002184 <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02b      	beq.n	800208a <HAL_GPIO_Init+0x236>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x334>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x232>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_GPIO_Init+0x338>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x22e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x22a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_GPIO_Init+0x340>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x226>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x344>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x222>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x348>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x21e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x21a>
 800206a:	2309      	movs	r3, #9
 800206c:	e012      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800206e:	230a      	movs	r3, #10
 8002070:	e010      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002072:	2308      	movs	r3, #8
 8002074:	e00e      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002076:	2307      	movs	r3, #7
 8002078:	e00c      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800207a:	2306      	movs	r3, #6
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800207e:	2305      	movs	r3, #5
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020a4:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_GPIO_Init+0x324>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_GPIO_Init+0x350>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_GPIO_Init+0x350>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_GPIO_Init+0x350>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212a:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <HAL_GPIO_Init+0x350>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f ae86 	bls.w	8001e74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40021c00 	.word	0x40021c00
 800219c:	40022000 	.word	0x40022000
 80021a0:	40022400 	.word	0x40022400
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e291      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002200:	4b96      	ldr	r3, [pc, #600]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00c      	beq.n	8002226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220c:	4b93      	ldr	r3, [pc, #588]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d112      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
 8002218:	4b90      	ldr	r3, [pc, #576]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	4b8d      	ldr	r3, [pc, #564]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d06c      	beq.n	800230c <HAL_RCC_OscConfig+0x130>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d168      	bne.n	800230c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e26b      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x7a>
 8002248:	4a84      	ldr	r2, [pc, #528]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800224a:	4b84      	ldr	r3, [pc, #528]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e02e      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x9c>
 800225e:	4a7f      	ldr	r2, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4a7c      	ldr	r2, [pc, #496]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800226c:	4b7b      	ldr	r3, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xc0>
 8002282:	4a76      	ldr	r2, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4a73      	ldr	r2, [pc, #460]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002290:	4b72      	ldr	r3, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 800229c:	4a6f      	ldr	r2, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800229e:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4a6c      	ldr	r2, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022aa:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff f936 	bl	800152c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff f932 	bl	800152c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e21f      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe8>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff f922 	bl	800152c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff f91e 	bl	800152c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e20b      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x110>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d069      	beq.n	80023ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002326:	4b4d      	ldr	r3, [pc, #308]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x190>
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x17a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1df      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4941      	ldr	r1, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e040      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4a39      	ldr	r2, [pc, #228]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7ff f8d4 	bl	800152c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7ff f8d0 	bl	800152c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1bd      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	492d      	ldr	r1, [pc, #180]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
 80023ba:	e018      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f8b0 	bl	800152c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7ff f8ac 	bl	800152c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e199      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d038      	beq.n	800246c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d019      	beq.n	8002436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4a16      	ldr	r2, [pc, #88]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7ff f88d 	bl	800152c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7ff f889 	bl	800152c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e176      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x23a>
 8002434:	e01a      	b.n	800246c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_RCC_OscConfig+0x280>)
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_RCC_OscConfig+0x280>)
 800243a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7ff f873 	bl	800152c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7ff f86f 	bl	800152c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d903      	bls.n	8002460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e15c      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
 800245c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a4 	beq.w	80025c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247a:	4b8b      	ldr	r3, [pc, #556]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4a88      	ldr	r2, [pc, #544]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002488:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	4b82      	ldr	r3, [pc, #520]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024ae:	4a7f      	ldr	r2, [pc, #508]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7ff f837 	bl	800152c <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7ff f833 	bl	800152c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e120      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	4b75      	ldr	r3, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x31a>
 80024e8:	4a6f      	ldr	r2, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	e02d      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x33c>
 80024fe:	4a6a      	ldr	r2, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002500:	4b69      	ldr	r3, [pc, #420]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	4a67      	ldr	r2, [pc, #412]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800250c:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	; 0x70
 8002516:	e01c      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x35e>
 8002520:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002522:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	4b5e      	ldr	r3, [pc, #376]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	e00b      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 800253a:	4a5b      	ldr	r2, [pc, #364]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800253c:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d015      	beq.n	8002586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe ffe7 	bl	800152c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe ffe3 	bl	800152c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0ce      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ee      	beq.n	8002562 <HAL_RCC_OscConfig+0x386>
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe ffd1 	bl	800152c <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe ffcd 	bl	800152c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ee      	bne.n	800258e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4a3c      	ldr	r2, [pc, #240]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80a4 	beq.w	8002714 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d06b      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d149      	bne.n	8002674 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe ff9e 	bl	800152c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe ff9a 	bl	800152c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e087      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	4925      	ldr	r1, [pc, #148]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	019b      	lsls	r3, r3, #6
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	041b      	lsls	r3, r3, #16
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	061b      	lsls	r3, r3, #24
 8002638:	4313      	orrs	r3, r2
 800263a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800263e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe ff6e 	bl	800152c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe ff6a 	bl	800152c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e057      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x478>
 8002672:	e04f      	b.n	8002714 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe ff54 	bl	800152c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe ff50 	bl	800152c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e03d      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x4ac>
 80026a6:	e035      	b.n	8002714 <HAL_RCC_OscConfig+0x538>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x544>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d028      	beq.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d121      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d11a      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d111      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	3b01      	subs	r3, #1
 80026fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0d0      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d210      	bcs.n	800276c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4967      	ldr	r1, [pc, #412]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 020f 	bic.w	r2, r3, #15
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 020f 	and.w	r2, r3, #15
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0b8      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002784:	4a59      	ldr	r2, [pc, #356]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800278e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800279c:	4a53      	ldr	r2, [pc, #332]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4950      	ldr	r1, [pc, #320]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027aa:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d040      	beq.n	8002848 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07f      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e073      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4939      	ldr	r1, [pc, #228]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	4b38      	ldr	r3, [pc, #224]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 0203 	bic.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7fe fe88 	bl	800152c <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe fe84 	bl	800152c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e053      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4924      	ldr	r1, [pc, #144]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 020f 	bic.w	r2, r3, #15
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 020f 	and.w	r2, r3, #15
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e032      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4919      	ldr	r1, [pc, #100]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a2:	4912      	ldr	r1, [pc, #72]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b6:	f000 f821 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028ba:	4601      	mov	r1, r0
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x1cc>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	fa21 f303 	lsr.w	r3, r1, r3
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1d0>)
 80028d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1d4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fde4 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023c00 	.word	0x40023c00
 80028ec:	40023800 	.word	0x40023800
 80028f0:	0800522c 	.word	0x0800522c
 80028f4:	20000000 	.word	0x20000000
 80028f8:	20000004 	.word	0x20000004

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002900:	b087      	sub	sp, #28
 8002902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002904:	2200      	movs	r2, #0
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	617a      	str	r2, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8002910:	2200      	movs	r2, #0
 8002912:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	f002 020c 	and.w	r2, r2, #12
 800291c:	2a04      	cmp	r2, #4
 800291e:	d007      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x34>
 8002920:	2a08      	cmp	r2, #8
 8002922:	d008      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x3a>
 8002924:	2a00      	cmp	r2, #0
 8002926:	f040 8090 	bne.w	8002a4a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800292a:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x164>)
 800292c:	613b      	str	r3, [r7, #16]
      break;
 800292e:	e08f      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002930:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x168>)
 8002932:	613b      	str	r3, [r7, #16]
      break;
 8002934:	e08c      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002936:	4a49      	ldr	r2, [pc, #292]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002938:	6852      	ldr	r2, [r2, #4]
 800293a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800293e:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002940:	4a46      	ldr	r2, [pc, #280]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002942:	6852      	ldr	r2, [r2, #4]
 8002944:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002948:	2a00      	cmp	r2, #0
 800294a:	d023      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x160>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	f240 11ff 	movw	r1, #511	; 0x1ff
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	ea03 0301 	and.w	r3, r3, r1
 8002962:	ea04 0402 	and.w	r4, r4, r2
 8002966:	4a3f      	ldr	r2, [pc, #252]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x168>)
 8002968:	fb02 f104 	mul.w	r1, r2, r4
 800296c:	2200      	movs	r2, #0
 800296e:	fb02 f203 	mul.w	r2, r2, r3
 8002972:	440a      	add	r2, r1
 8002974:	493b      	ldr	r1, [pc, #236]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x168>)
 8002976:	fba3 0101 	umull	r0, r1, r3, r1
 800297a:	1853      	adds	r3, r2, r1
 800297c:	4619      	mov	r1, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	f7fd fc92 	bl	80002b0 <__aeabi_uldivmod>
 800298c:	4603      	mov	r3, r0
 800298e:	460c      	mov	r4, r1
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e04c      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002994:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002996:	6852      	ldr	r2, [r2, #4]
 8002998:	0992      	lsrs	r2, r2, #6
 800299a:	4611      	mov	r1, r2
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f240 15ff 	movw	r5, #511	; 0x1ff
 80029a4:	f04f 0600 	mov.w	r6, #0
 80029a8:	ea05 0501 	and.w	r5, r5, r1
 80029ac:	ea06 0602 	and.w	r6, r6, r2
 80029b0:	4629      	mov	r1, r5
 80029b2:	4632      	mov	r2, r6
 80029b4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80029b8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80029bc:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80029c0:	4651      	mov	r1, sl
 80029c2:	465a      	mov	r2, fp
 80029c4:	46aa      	mov	sl, r5
 80029c6:	46b3      	mov	fp, r6
 80029c8:	4655      	mov	r5, sl
 80029ca:	465e      	mov	r6, fp
 80029cc:	1b4d      	subs	r5, r1, r5
 80029ce:	eb62 0606 	sbc.w	r6, r2, r6
 80029d2:	4629      	mov	r1, r5
 80029d4:	4632      	mov	r2, r6
 80029d6:	0194      	lsls	r4, r2, #6
 80029d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029dc:	018b      	lsls	r3, r1, #6
 80029de:	1a5b      	subs	r3, r3, r1
 80029e0:	eb64 0402 	sbc.w	r4, r4, r2
 80029e4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80029e8:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80029ec:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80029f0:	4643      	mov	r3, r8
 80029f2:	464c      	mov	r4, r9
 80029f4:	4655      	mov	r5, sl
 80029f6:	465e      	mov	r6, fp
 80029f8:	18ed      	adds	r5, r5, r3
 80029fa:	eb46 0604 	adc.w	r6, r6, r4
 80029fe:	462b      	mov	r3, r5
 8002a00:	4634      	mov	r4, r6
 8002a02:	02a2      	lsls	r2, r4, #10
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	029b      	lsls	r3, r3, #10
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002a16:	4618      	mov	r0, r3
 8002a18:	4621      	mov	r1, r4
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	461a      	mov	r2, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	f7fd fc44 	bl	80002b0 <__aeabi_uldivmod>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	613b      	str	r3, [r7, #16]
      break;
 8002a48:	e002      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a4c:	613b      	str	r3, [r7, #16]
      break;
 8002a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a50:	693b      	ldr	r3, [r7, #16]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	017d7840 	.word	0x017d7840

08002a68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4601      	mov	r1, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	0800523c 	.word	0x0800523c

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aac:	f7ff ffdc 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0b5b      	lsrs	r3, r3, #13
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4a03      	ldr	r2, [pc, #12]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	0800523c 	.word	0x0800523c

08002ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d012      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002af8:	4a69      	ldr	r2, [pc, #420]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	4b69      	ldr	r3, [pc, #420]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b02:	6093      	str	r3, [r2, #8]
 8002b04:	4966      	ldr	r1, [pc, #408]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d017      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b2a:	495d      	ldr	r1, [pc, #372]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2c:	4b5c      	ldr	r3, [pc, #368]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d017      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b66:	494e      	ldr	r1, [pc, #312]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b68:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b84:	d101      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 808b 	beq.w	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc0:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bcc:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bce:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fca8 	bl	800152c <HAL_GetTick>
 8002bdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7fe fca4 	bl	800152c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e355      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d035      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d02e      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c26:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d114      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fc6c 	bl	800152c <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe fc68 	bl	800152c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e317      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ee      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c86:	d111      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c88:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c98:	400b      	ands	r3, r1
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	6083      	str	r3, [r0, #8]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	0ffffcff 	.word	0x0ffffcff
 8002cac:	4ab0      	ldr	r2, [pc, #704]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cae:	4bb0      	ldr	r3, [pc, #704]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cb6:	6093      	str	r3, [r2, #8]
 8002cb8:	49ad      	ldr	r1, [pc, #692]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cba:	4bad      	ldr	r3, [pc, #692]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cd6:	4aa6      	ldr	r2, [pc, #664]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cd8:	4ba5      	ldr	r3, [pc, #660]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ce6:	49a2      	ldr	r1, [pc, #648]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ce8:	4ba1      	ldr	r3, [pc, #644]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d04:	499a      	ldr	r1, [pc, #616]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d06:	4b9a      	ldr	r3, [pc, #616]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d26:	4992      	ldr	r1, [pc, #584]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d28:	4b91      	ldr	r3, [pc, #580]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d48:	4989      	ldr	r1, [pc, #548]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d4a:	4b89      	ldr	r3, [pc, #548]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d6a:	4981      	ldr	r1, [pc, #516]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d6c:	4b80      	ldr	r3, [pc, #512]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d8c:	4978      	ldr	r1, [pc, #480]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d8e:	4b78      	ldr	r3, [pc, #480]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f023 0203 	bic.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dae:	4970      	ldr	r1, [pc, #448]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f023 020c 	bic.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd0:	4967      	ldr	r1, [pc, #412]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df2:	495f      	ldr	r1, [pc, #380]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002df4:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e14:	4956      	ldr	r1, [pc, #344]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e16:	4b56      	ldr	r3, [pc, #344]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e36:	494e      	ldr	r1, [pc, #312]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e38:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e58:	4945      	ldr	r1, [pc, #276]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e5a:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e7a:	493d      	ldr	r1, [pc, #244]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e7c:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e9c:	4934      	ldr	r1, [pc, #208]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e9e:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d011      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ebe:	492c      	ldr	r1, [pc, #176]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efe:	491c      	ldr	r1, [pc, #112]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f20:	4913      	ldr	r1, [pc, #76]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f46:	f040 80d8 	bne.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f56:	f7fe fae9 	bl	800152c <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f5e:	f7fe fae5 	bl	800152c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d903      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e196      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002f70:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ee      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d021      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11d      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb0:	495d      	ldr	r1, [pc, #372]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	019a      	lsls	r2, r3, #6
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffa:	d129      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	0f1b      	lsrs	r3, r3, #28
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003018:	4943      	ldr	r1, [pc, #268]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	019a      	lsls	r2, r3, #6
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	061b      	lsls	r3, r3, #24
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003038:	493b      	ldr	r1, [pc, #236]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800303c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003040:	f023 021f 	bic.w	r2, r3, #31
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	3b01      	subs	r3, #1
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	0e1b      	lsrs	r3, r3, #24
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003070:	0f1b      	lsrs	r3, r3, #28
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003078:	492b      	ldr	r1, [pc, #172]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a4:	4920      	ldr	r1, [pc, #128]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	019a      	lsls	r2, r3, #6
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c8:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d4:	f7fe fa2a 	bl	800152c <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030dc:	f7fe fa26 	bl	800152c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0d7      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80cd 	bne.w	800329c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fe fa0d 	bl	800152c <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003116:	f7fe fa09 	bl	800152c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d903      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0ba      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003128:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003138:	d0ed      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02e      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800317e:	494a      	ldr	r1, [pc, #296]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	019a      	lsls	r2, r3, #6
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	431a      	orrs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	071b      	lsls	r3, r3, #28
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800319e:	4942      	ldr	r1, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d022      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d11d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	0f1b      	lsrs	r3, r3, #28
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031ea:	492f      	ldr	r1, [pc, #188]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	019a      	lsls	r2, r3, #6
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	431a      	orrs	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	431a      	orrs	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	071b      	lsls	r3, r3, #28
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	0e1b      	lsrs	r3, r3, #24
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003232:	491d      	ldr	r1, [pc, #116]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	019a      	lsls	r2, r3, #6
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	071b      	lsls	r3, r3, #28
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003252:	4915      	ldr	r1, [pc, #84]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800325a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003268:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fe f95a 	bl	800152c <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800327c:	f7fe f956 	bl	800152c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e007      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d1ef      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_TIM_Base_Start_IT+0x50>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d00b      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0x42>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d007      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	00010007 	.word	0x00010007

08003300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e01d      	b.n	800334e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd ff10 	bl	800114c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 fa68 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d122      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d11b      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0202 	mvn.w	r2, #2
 8003382:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa1d 	bl	80037d8 <HAL_TIM_IC_CaptureCallback>
 800339e:	e005      	b.n	80033ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa0f 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa20 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d122      	bne.n	8003406 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d11b      	bne.n	8003406 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0204 	mvn.w	r2, #4
 80033d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f9f3 	bl	80037d8 <HAL_TIM_IC_CaptureCallback>
 80033f2:	e005      	b.n	8003400 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f9e5 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f9f6 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d122      	bne.n	800345a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11b      	bne.n	800345a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0208 	mvn.w	r2, #8
 800342a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2204      	movs	r2, #4
 8003430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f9c9 	bl	80037d8 <HAL_TIM_IC_CaptureCallback>
 8003446:	e005      	b.n	8003454 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f9bb 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9cc 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d122      	bne.n	80034ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b10      	cmp	r3, #16
 8003474:	d11b      	bne.n	80034ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f06f 0210 	mvn.w	r2, #16
 800347e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2208      	movs	r2, #8
 8003484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f99f 	bl	80037d8 <HAL_TIM_IC_CaptureCallback>
 800349a:	e005      	b.n	80034a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f991 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9a2 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10e      	bne.n	80034da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0201 	mvn.w	r2, #1
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fd f989 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d10e      	bne.n	8003506 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d107      	bne.n	8003506 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fd1d 	bl	8003f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003514:	d10e      	bne.n	8003534 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d107      	bne.n	8003534 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fd10 	bl	8003f54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d107      	bne.n	8003560 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f950 	bl	8003800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b20      	cmp	r3, #32
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b20      	cmp	r3, #32
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0220 	mvn.w	r2, #32
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fcd0 	bl	8003f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e105      	b.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x226>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b14      	cmp	r3, #20
 80035c2:	f200 80f0 	bhi.w	80037a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	08003621 	.word	0x08003621
 80035d0:	080037a7 	.word	0x080037a7
 80035d4:	080037a7 	.word	0x080037a7
 80035d8:	080037a7 	.word	0x080037a7
 80035dc:	08003661 	.word	0x08003661
 80035e0:	080037a7 	.word	0x080037a7
 80035e4:	080037a7 	.word	0x080037a7
 80035e8:	080037a7 	.word	0x080037a7
 80035ec:	080036a3 	.word	0x080036a3
 80035f0:	080037a7 	.word	0x080037a7
 80035f4:	080037a7 	.word	0x080037a7
 80035f8:	080037a7 	.word	0x080037a7
 80035fc:	080036e3 	.word	0x080036e3
 8003600:	080037a7 	.word	0x080037a7
 8003604:	080037a7 	.word	0x080037a7
 8003608:	080037a7 	.word	0x080037a7
 800360c:	08003725 	.word	0x08003725
 8003610:	080037a7 	.word	0x080037a7
 8003614:	080037a7 	.word	0x080037a7
 8003618:	080037a7 	.word	0x080037a7
 800361c:	08003765 	.word	0x08003765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f994 	bl	8003954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	6992      	ldr	r2, [r2, #24]
 8003636:	f042 0208 	orr.w	r2, r2, #8
 800363a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	6992      	ldr	r2, [r2, #24]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	6991      	ldr	r1, [r2, #24]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	6912      	ldr	r2, [r2, #16]
 800365a:	430a      	orrs	r2, r1
 800365c:	619a      	str	r2, [r3, #24]
      break;
 800365e:	e0a3      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f9e6 	bl	8003a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	6992      	ldr	r2, [r2, #24]
 8003676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800367a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	6992      	ldr	r2, [r2, #24]
 8003686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	6991      	ldr	r1, [r2, #24]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	6912      	ldr	r2, [r2, #16]
 800369a:	0212      	lsls	r2, r2, #8
 800369c:	430a      	orrs	r2, r1
 800369e:	619a      	str	r2, [r3, #24]
      break;
 80036a0:	e082      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fa3d 	bl	8003b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	69d2      	ldr	r2, [r2, #28]
 80036b8:	f042 0208 	orr.w	r2, r2, #8
 80036bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	69d2      	ldr	r2, [r2, #28]
 80036c8:	f022 0204 	bic.w	r2, r2, #4
 80036cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	69d1      	ldr	r1, [r2, #28]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	6912      	ldr	r2, [r2, #16]
 80036dc:	430a      	orrs	r2, r1
 80036de:	61da      	str	r2, [r3, #28]
      break;
 80036e0:	e062      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fa93 	bl	8003c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	69d2      	ldr	r2, [r2, #28]
 80036f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	69d2      	ldr	r2, [r2, #28]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	69d1      	ldr	r1, [r2, #28]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	6912      	ldr	r2, [r2, #16]
 800371c:	0212      	lsls	r2, r2, #8
 800371e:	430a      	orrs	r2, r1
 8003720:	61da      	str	r2, [r3, #28]
      break;
 8003722:	e041      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 faca 	bl	8003cc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	6912      	ldr	r2, [r2, #16]
 800375e:	430a      	orrs	r2, r1
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003762:	e021      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fafc 	bl	8003d68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800377a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800378a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	6912      	ldr	r2, [r2, #16]
 800379e:	0212      	lsls	r2, r2, #8
 80037a0:	430a      	orrs	r2, r1
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037a4:	e000      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80037a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop

080037c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a40      	ldr	r2, [pc, #256]	; (8003928 <TIM_Base_SetConfig+0x114>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d00f      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3d      	ldr	r2, [pc, #244]	; (800392c <TIM_Base_SetConfig+0x118>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3c      	ldr	r2, [pc, #240]	; (8003930 <TIM_Base_SetConfig+0x11c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <TIM_Base_SetConfig+0x120>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3a      	ldr	r2, [pc, #232]	; (8003938 <TIM_Base_SetConfig+0x124>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d108      	bne.n	8003866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <TIM_Base_SetConfig+0x114>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d02b      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d027      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2c      	ldr	r2, [pc, #176]	; (800392c <TIM_Base_SetConfig+0x118>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d023      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <TIM_Base_SetConfig+0x11c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01f      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <TIM_Base_SetConfig+0x120>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01b      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <TIM_Base_SetConfig+0x124>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d017      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <TIM_Base_SetConfig+0x128>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a27      	ldr	r2, [pc, #156]	; (8003940 <TIM_Base_SetConfig+0x12c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <TIM_Base_SetConfig+0x130>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a25      	ldr	r2, [pc, #148]	; (8003948 <TIM_Base_SetConfig+0x134>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a24      	ldr	r2, [pc, #144]	; (800394c <TIM_Base_SetConfig+0x138>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a23      	ldr	r2, [pc, #140]	; (8003950 <TIM_Base_SetConfig+0x13c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <TIM_Base_SetConfig+0x114>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_Base_SetConfig+0xf8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <TIM_Base_SetConfig+0x124>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d103      	bne.n	8003914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	615a      	str	r2, [r3, #20]
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40010400 	.word	0x40010400
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800
 8003948:	40001800 	.word	0x40001800
 800394c:	40001c00 	.word	0x40001c00
 8003950:	40002000 	.word	0x40002000

08003954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <TIM_OC1_SetConfig+0xd8>)
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0302 	bic.w	r3, r3, #2
 800399c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <TIM_OC1_SetConfig+0xdc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC1_SetConfig+0x64>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <TIM_OC1_SetConfig+0xe0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10c      	bne.n	80039d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0308 	bic.w	r3, r3, #8
 80039be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <TIM_OC1_SetConfig+0xdc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_OC1_SetConfig+0x8e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <TIM_OC1_SetConfig+0xe0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	fffeff8f 	.word	0xfffeff8f
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40010400 	.word	0x40010400

08003a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0210 	bic.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <TIM_OC2_SetConfig+0xe4>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0320 	bic.w	r3, r3, #32
 8003a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <TIM_OC2_SetConfig+0xe8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_OC2_SetConfig+0x68>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <TIM_OC2_SetConfig+0xec>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10d      	bne.n	8003abc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <TIM_OC2_SetConfig+0xe8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_OC2_SetConfig+0x94>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <TIM_OC2_SetConfig+0xec>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d113      	bne.n	8003af4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	feff8fff 	.word	0xfeff8fff
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40010400 	.word	0x40010400

08003b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <TIM_OC3_SetConfig+0xe0>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <TIM_OC3_SetConfig+0xe4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_OC3_SetConfig+0x66>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <TIM_OC3_SetConfig+0xe8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10d      	bne.n	8003baa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <TIM_OC3_SetConfig+0xe4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_OC3_SetConfig+0x92>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <TIM_OC3_SetConfig+0xe8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d113      	bne.n	8003be2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	fffeff8f 	.word	0xfffeff8f
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40010400 	.word	0x40010400

08003c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <TIM_OC4_SetConfig+0xa4>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	031b      	lsls	r3, r3, #12
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <TIM_OC4_SetConfig+0xa8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_OC4_SetConfig+0x68>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <TIM_OC4_SetConfig+0xac>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d109      	bne.n	8003c90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	019b      	lsls	r3, r3, #6
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	feff8fff 	.word	0xfeff8fff
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <TIM_OC5_SetConfig+0x98>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <TIM_OC5_SetConfig+0x9c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_OC5_SetConfig+0x5e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <TIM_OC5_SetConfig+0xa0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d109      	bne.n	8003d36 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	fffeff8f 	.word	0xfffeff8f
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40010400 	.word	0x40010400

08003d68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <TIM_OC6_SetConfig+0x9c>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	051b      	lsls	r3, r3, #20
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <TIM_OC6_SetConfig+0xa0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC6_SetConfig+0x60>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <TIM_OC6_SetConfig+0xa4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	029b      	lsls	r3, r3, #10
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	feff8fff 	.word	0xfeff8fff
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40010400 	.word	0x40010400

08003e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e06d      	b.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a30      	ldr	r2, [pc, #192]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2f      	ldr	r2, [pc, #188]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d022      	beq.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d01d      	beq.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d018      	beq.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d013      	beq.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00e      	beq.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d009      	beq.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40010400 	.word	0x40010400
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40001800 	.word	0x40001800

08003f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e040      	b.n	8003ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd f9b8 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8bc 	bl	8004124 <UART_SetConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb5a 	bl	8004678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	6852      	ldr	r2, [r2, #4]
 8003fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	6892      	ldr	r2, [r2, #8]
 8003fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fbe1 	bl	80047bc <UART_CheckIdleState>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004018:	2b20      	cmp	r3, #32
 800401a:	d17e      	bne.n	800411a <HAL_UART_Transmit+0x116>
  {
    if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Transmit+0x24>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e077      	b.n	800411c <HAL_UART_Transmit+0x118>
    }

    __HAL_LOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_UART_Transmit+0x36>
 8004036:	2302      	movs	r3, #2
 8004038:	e070      	b.n	800411c <HAL_UART_Transmit+0x118>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2221      	movs	r2, #33	; 0x21
 800404c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800404e:	f7fd fa6d 	bl	800152c <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d108      	bne.n	8004080 <HAL_UART_Transmit+0x7c>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e003      	b.n	8004088 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004090:	e02b      	b.n	80040ea <HAL_UART_Transmit+0xe6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fbbc 	bl	800481a <UART_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e037      	b.n	800411c <HAL_UART_Transmit+0x118>
      }
      if (pdata8bits == NULL)
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <HAL_UART_Transmit+0xc4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	3302      	adds	r3, #2
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e007      	b.n	80040d8 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3301      	adds	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1cd      	bne.n	8004092 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2140      	movs	r1, #64	; 0x40
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fb8a 	bl	800481a <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e005      	b.n	800411c <HAL_UART_Transmit+0x118>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_UART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	4bb3      	ldr	r3, [pc, #716]	; (8004424 <UART_SetConfig+0x300>)
 8004158:	400b      	ands	r3, r1
 800415a:	6939      	ldr	r1, [r7, #16]
 800415c:	430b      	orrs	r3, r1
 800415e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	6852      	ldr	r2, [r2, #4]
 800416a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68d2      	ldr	r2, [r2, #12]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	6892      	ldr	r2, [r2, #8]
 8004190:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4aa2      	ldr	r2, [pc, #648]	; (8004428 <UART_SetConfig+0x304>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d121      	bne.n	80041e8 <UART_SetConfig+0xc4>
 80041a4:	4ba1      	ldr	r3, [pc, #644]	; (800442c <UART_SetConfig+0x308>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d816      	bhi.n	80041e0 <UART_SetConfig+0xbc>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0x94>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041d5 	.word	0x080041d5
 80041c0:	080041cf 	.word	0x080041cf
 80041c4:	080041db 	.word	0x080041db
 80041c8:	2301      	movs	r3, #1
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e150      	b.n	8004470 <UART_SetConfig+0x34c>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e14d      	b.n	8004470 <UART_SetConfig+0x34c>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e14a      	b.n	8004470 <UART_SetConfig+0x34c>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e147      	b.n	8004470 <UART_SetConfig+0x34c>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	bf00      	nop
 80041e6:	e143      	b.n	8004470 <UART_SetConfig+0x34c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a90      	ldr	r2, [pc, #576]	; (8004430 <UART_SetConfig+0x30c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d134      	bne.n	800425c <UART_SetConfig+0x138>
 80041f2:	4b8e      	ldr	r3, [pc, #568]	; (800442c <UART_SetConfig+0x308>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	d829      	bhi.n	8004254 <UART_SetConfig+0x130>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0xe4>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	0800423d 	.word	0x0800423d
 800420c:	08004255 	.word	0x08004255
 8004210:	08004255 	.word	0x08004255
 8004214:	08004255 	.word	0x08004255
 8004218:	08004249 	.word	0x08004249
 800421c:	08004255 	.word	0x08004255
 8004220:	08004255 	.word	0x08004255
 8004224:	08004255 	.word	0x08004255
 8004228:	08004243 	.word	0x08004243
 800422c:	08004255 	.word	0x08004255
 8004230:	08004255 	.word	0x08004255
 8004234:	08004255 	.word	0x08004255
 8004238:	0800424f 	.word	0x0800424f
 800423c:	2300      	movs	r3, #0
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e116      	b.n	8004470 <UART_SetConfig+0x34c>
 8004242:	2302      	movs	r3, #2
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e113      	b.n	8004470 <UART_SetConfig+0x34c>
 8004248:	2304      	movs	r3, #4
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e110      	b.n	8004470 <UART_SetConfig+0x34c>
 800424e:	2308      	movs	r3, #8
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e10d      	b.n	8004470 <UART_SetConfig+0x34c>
 8004254:	2310      	movs	r3, #16
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	bf00      	nop
 800425a:	e109      	b.n	8004470 <UART_SetConfig+0x34c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a74      	ldr	r2, [pc, #464]	; (8004434 <UART_SetConfig+0x310>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d120      	bne.n	80042a8 <UART_SetConfig+0x184>
 8004266:	4b71      	ldr	r3, [pc, #452]	; (800442c <UART_SetConfig+0x308>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004270:	2b10      	cmp	r3, #16
 8004272:	d00f      	beq.n	8004294 <UART_SetConfig+0x170>
 8004274:	2b10      	cmp	r3, #16
 8004276:	d802      	bhi.n	800427e <UART_SetConfig+0x15a>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <UART_SetConfig+0x164>
 800427c:	e010      	b.n	80042a0 <UART_SetConfig+0x17c>
 800427e:	2b20      	cmp	r3, #32
 8004280:	d005      	beq.n	800428e <UART_SetConfig+0x16a>
 8004282:	2b30      	cmp	r3, #48	; 0x30
 8004284:	d009      	beq.n	800429a <UART_SetConfig+0x176>
 8004286:	e00b      	b.n	80042a0 <UART_SetConfig+0x17c>
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e0f0      	b.n	8004470 <UART_SetConfig+0x34c>
 800428e:	2302      	movs	r3, #2
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e0ed      	b.n	8004470 <UART_SetConfig+0x34c>
 8004294:	2304      	movs	r3, #4
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e0ea      	b.n	8004470 <UART_SetConfig+0x34c>
 800429a:	2308      	movs	r3, #8
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e0e7      	b.n	8004470 <UART_SetConfig+0x34c>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	bf00      	nop
 80042a6:	e0e3      	b.n	8004470 <UART_SetConfig+0x34c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a62      	ldr	r2, [pc, #392]	; (8004438 <UART_SetConfig+0x314>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d120      	bne.n	80042f4 <UART_SetConfig+0x1d0>
 80042b2:	4b5e      	ldr	r3, [pc, #376]	; (800442c <UART_SetConfig+0x308>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d00f      	beq.n	80042e0 <UART_SetConfig+0x1bc>
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d802      	bhi.n	80042ca <UART_SetConfig+0x1a6>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <UART_SetConfig+0x1b0>
 80042c8:	e010      	b.n	80042ec <UART_SetConfig+0x1c8>
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d005      	beq.n	80042da <UART_SetConfig+0x1b6>
 80042ce:	2bc0      	cmp	r3, #192	; 0xc0
 80042d0:	d009      	beq.n	80042e6 <UART_SetConfig+0x1c2>
 80042d2:	e00b      	b.n	80042ec <UART_SetConfig+0x1c8>
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e0ca      	b.n	8004470 <UART_SetConfig+0x34c>
 80042da:	2302      	movs	r3, #2
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e0c7      	b.n	8004470 <UART_SetConfig+0x34c>
 80042e0:	2304      	movs	r3, #4
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e0c4      	b.n	8004470 <UART_SetConfig+0x34c>
 80042e6:	2308      	movs	r3, #8
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e0c1      	b.n	8004470 <UART_SetConfig+0x34c>
 80042ec:	2310      	movs	r3, #16
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	bf00      	nop
 80042f2:	e0bd      	b.n	8004470 <UART_SetConfig+0x34c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a50      	ldr	r2, [pc, #320]	; (800443c <UART_SetConfig+0x318>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d124      	bne.n	8004348 <UART_SetConfig+0x224>
 80042fe:	4b4b      	ldr	r3, [pc, #300]	; (800442c <UART_SetConfig+0x308>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430c:	d012      	beq.n	8004334 <UART_SetConfig+0x210>
 800430e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004312:	d802      	bhi.n	800431a <UART_SetConfig+0x1f6>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <UART_SetConfig+0x204>
 8004318:	e012      	b.n	8004340 <UART_SetConfig+0x21c>
 800431a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431e:	d006      	beq.n	800432e <UART_SetConfig+0x20a>
 8004320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004324:	d009      	beq.n	800433a <UART_SetConfig+0x216>
 8004326:	e00b      	b.n	8004340 <UART_SetConfig+0x21c>
 8004328:	2300      	movs	r3, #0
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e0a0      	b.n	8004470 <UART_SetConfig+0x34c>
 800432e:	2302      	movs	r3, #2
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e09d      	b.n	8004470 <UART_SetConfig+0x34c>
 8004334:	2304      	movs	r3, #4
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e09a      	b.n	8004470 <UART_SetConfig+0x34c>
 800433a:	2308      	movs	r3, #8
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e097      	b.n	8004470 <UART_SetConfig+0x34c>
 8004340:	2310      	movs	r3, #16
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	bf00      	nop
 8004346:	e093      	b.n	8004470 <UART_SetConfig+0x34c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a3c      	ldr	r2, [pc, #240]	; (8004440 <UART_SetConfig+0x31c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d124      	bne.n	800439c <UART_SetConfig+0x278>
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <UART_SetConfig+0x308>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d012      	beq.n	8004388 <UART_SetConfig+0x264>
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d802      	bhi.n	800436e <UART_SetConfig+0x24a>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <UART_SetConfig+0x258>
 800436c:	e012      	b.n	8004394 <UART_SetConfig+0x270>
 800436e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004372:	d006      	beq.n	8004382 <UART_SetConfig+0x25e>
 8004374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004378:	d009      	beq.n	800438e <UART_SetConfig+0x26a>
 800437a:	e00b      	b.n	8004394 <UART_SetConfig+0x270>
 800437c:	2301      	movs	r3, #1
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e076      	b.n	8004470 <UART_SetConfig+0x34c>
 8004382:	2302      	movs	r3, #2
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e073      	b.n	8004470 <UART_SetConfig+0x34c>
 8004388:	2304      	movs	r3, #4
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e070      	b.n	8004470 <UART_SetConfig+0x34c>
 800438e:	2308      	movs	r3, #8
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e06d      	b.n	8004470 <UART_SetConfig+0x34c>
 8004394:	2310      	movs	r3, #16
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	bf00      	nop
 800439a:	e069      	b.n	8004470 <UART_SetConfig+0x34c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a28      	ldr	r2, [pc, #160]	; (8004444 <UART_SetConfig+0x320>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d124      	bne.n	80043f0 <UART_SetConfig+0x2cc>
 80043a6:	4b21      	ldr	r3, [pc, #132]	; (800442c <UART_SetConfig+0x308>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d012      	beq.n	80043dc <UART_SetConfig+0x2b8>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	d802      	bhi.n	80043c2 <UART_SetConfig+0x29e>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <UART_SetConfig+0x2ac>
 80043c0:	e012      	b.n	80043e8 <UART_SetConfig+0x2c4>
 80043c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c6:	d006      	beq.n	80043d6 <UART_SetConfig+0x2b2>
 80043c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043cc:	d009      	beq.n	80043e2 <UART_SetConfig+0x2be>
 80043ce:	e00b      	b.n	80043e8 <UART_SetConfig+0x2c4>
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e04c      	b.n	8004470 <UART_SetConfig+0x34c>
 80043d6:	2302      	movs	r3, #2
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e049      	b.n	8004470 <UART_SetConfig+0x34c>
 80043dc:	2304      	movs	r3, #4
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e046      	b.n	8004470 <UART_SetConfig+0x34c>
 80043e2:	2308      	movs	r3, #8
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e043      	b.n	8004470 <UART_SetConfig+0x34c>
 80043e8:	2310      	movs	r3, #16
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	bf00      	nop
 80043ee:	e03f      	b.n	8004470 <UART_SetConfig+0x34c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a14      	ldr	r2, [pc, #80]	; (8004448 <UART_SetConfig+0x324>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d138      	bne.n	800446c <UART_SetConfig+0x348>
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <UART_SetConfig+0x308>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004408:	d026      	beq.n	8004458 <UART_SetConfig+0x334>
 800440a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800440e:	d802      	bhi.n	8004416 <UART_SetConfig+0x2f2>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01b      	beq.n	800444c <UART_SetConfig+0x328>
 8004414:	e026      	b.n	8004464 <UART_SetConfig+0x340>
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441a:	d01a      	beq.n	8004452 <UART_SetConfig+0x32e>
 800441c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004420:	d01d      	beq.n	800445e <UART_SetConfig+0x33a>
 8004422:	e01f      	b.n	8004464 <UART_SetConfig+0x340>
 8004424:	efff69f3 	.word	0xefff69f3
 8004428:	40011000 	.word	0x40011000
 800442c:	40023800 	.word	0x40023800
 8004430:	40004400 	.word	0x40004400
 8004434:	40004800 	.word	0x40004800
 8004438:	40004c00 	.word	0x40004c00
 800443c:	40005000 	.word	0x40005000
 8004440:	40011400 	.word	0x40011400
 8004444:	40007800 	.word	0x40007800
 8004448:	40007c00 	.word	0x40007c00
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e00e      	b.n	8004470 <UART_SetConfig+0x34c>
 8004452:	2302      	movs	r3, #2
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e00b      	b.n	8004470 <UART_SetConfig+0x34c>
 8004458:	2304      	movs	r3, #4
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e008      	b.n	8004470 <UART_SetConfig+0x34c>
 800445e:	2308      	movs	r3, #8
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e005      	b.n	8004470 <UART_SetConfig+0x34c>
 8004464:	2310      	movs	r3, #16
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	bf00      	nop
 800446a:	e001      	b.n	8004470 <UART_SetConfig+0x34c>
 800446c:	2310      	movs	r3, #16
 800446e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004478:	f040 8080 	bne.w	800457c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800447c:	7ffb      	ldrb	r3, [r7, #31]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d85c      	bhi.n	800453c <UART_SetConfig+0x418>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x364>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044cd 	.word	0x080044cd
 8004490:	080044ed 	.word	0x080044ed
 8004494:	0800453d 	.word	0x0800453d
 8004498:	08004505 	.word	0x08004505
 800449c:	0800453d 	.word	0x0800453d
 80044a0:	0800453d 	.word	0x0800453d
 80044a4:	0800453d 	.word	0x0800453d
 80044a8:	08004525 	.word	0x08004525
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe fae8 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 80044b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	005a      	lsls	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	61bb      	str	r3, [r7, #24]
        break;
 80044ca:	e03a      	b.n	8004542 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe faec 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	61bb      	str	r3, [r7, #24]
        break;
 80044ea:	e02a      	b.n	8004542 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	085a      	lsrs	r2, r3, #1
 80044f2:	4b5f      	ldr	r3, [pc, #380]	; (8004670 <UART_SetConfig+0x54c>)
 80044f4:	4413      	add	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6852      	ldr	r2, [r2, #4]
 80044fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	61bb      	str	r3, [r7, #24]
        break;
 8004502:	e01e      	b.n	8004542 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004504:	f7fe f9fa 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8004508:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	005a      	lsls	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	441a      	add	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	fbb2 f3f3 	udiv	r3, r2, r3
 800451e:	b29b      	uxth	r3, r3
 8004520:	61bb      	str	r3, [r7, #24]
        break;
 8004522:	e00e      	b.n	8004542 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	b29b      	uxth	r3, r3
 8004538:	61bb      	str	r3, [r7, #24]
        break;
 800453a:	e002      	b.n	8004542 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
        break;
 8004540:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b0f      	cmp	r3, #15
 8004546:	d916      	bls.n	8004576 <UART_SetConfig+0x452>
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454e:	d212      	bcs.n	8004576 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f023 030f 	bic.w	r3, r3, #15
 8004558:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	b29b      	uxth	r3, r3
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	b29a      	uxth	r2, r3
 8004566:	897b      	ldrh	r3, [r7, #10]
 8004568:	4313      	orrs	r3, r2
 800456a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	897a      	ldrh	r2, [r7, #10]
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	e070      	b.n	8004658 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
 800457a:	e06d      	b.n	8004658 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800457c:	7ffb      	ldrb	r3, [r7, #31]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d859      	bhi.n	8004636 <UART_SetConfig+0x512>
 8004582:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <UART_SetConfig+0x464>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045cb 	.word	0x080045cb
 8004590:	080045e9 	.word	0x080045e9
 8004594:	08004637 	.word	0x08004637
 8004598:	08004601 	.word	0x08004601
 800459c:	08004637 	.word	0x08004637
 80045a0:	08004637 	.word	0x08004637
 80045a4:	08004637 	.word	0x08004637
 80045a8:	0800461f 	.word	0x0800461f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fe fa68 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 80045b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085a      	lsrs	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	61bb      	str	r3, [r7, #24]
        break;
 80045c8:	e038      	b.n	800463c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ca:	f7fe fa6d 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 80045ce:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	085a      	lsrs	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	441a      	add	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	61bb      	str	r3, [r7, #24]
        break;
 80045e6:	e029      	b.n	800463c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	085a      	lsrs	r2, r3, #1
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <UART_SetConfig+0x550>)
 80045f0:	4413      	add	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6852      	ldr	r2, [r2, #4]
 80045f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	61bb      	str	r3, [r7, #24]
        break;
 80045fe:	e01d      	b.n	800463c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004600:	f7fe f97c 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8004604:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085a      	lsrs	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	b29b      	uxth	r3, r3
 800461a:	61bb      	str	r3, [r7, #24]
        break;
 800461c:	e00e      	b.n	800463c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	61bb      	str	r3, [r7, #24]
        break;
 8004634:	e002      	b.n	800463c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
        break;
 800463a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	d908      	bls.n	8004654 <UART_SetConfig+0x530>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d204      	bcs.n	8004654 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	e001      	b.n	8004658 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	01e84800 	.word	0x01e84800
 8004674:	00f42400 	.word	0x00f42400

08004678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	6852      	ldr	r2, [r2, #4]
 8004696:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	6852      	ldr	r2, [r2, #4]
 80046b8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	6852      	ldr	r2, [r2, #4]
 80046da:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	6892      	ldr	r2, [r2, #8]
 800471e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01a      	beq.n	800478e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	6852      	ldr	r2, [r2, #4]
 8004762:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004776:	d10a      	bne.n	800478e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	6852      	ldr	r2, [r2, #4]
 8004782:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	6852      	ldr	r2, [r2, #4]
 80047a4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047ca:	f7fc feaf 	bl	800152c <HAL_GetTick>
 80047ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d10e      	bne.n	80047fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f814 	bl	800481a <UART_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e00a      	b.n	8004812 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482a:	e05d      	b.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d059      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004834:	f7fc fe7a 	bl	800152c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	1ad2      	subs	r2, r2, r3
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	429a      	cmp	r2, r3
 8004842:	d802      	bhi.n	800484a <UART_WaitOnFlagUntilTimeout+0x30>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11b      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004858:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6892      	ldr	r2, [r2, #8]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e042      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02b      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489e:	d123      	bne.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	6892      	ldr	r2, [r2, #8]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e00f      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	401a      	ands	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	429a      	cmp	r2, r3
 8004904:	d092      	beq.n	800482c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004948 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004916:	e003      	b.n	8004920 <LoopCopyDataInit>

08004918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800491a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800491c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800491e:	3104      	adds	r1, #4

08004920 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004920:	480b      	ldr	r0, [pc, #44]	; (8004950 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004928:	d3f6      	bcc.n	8004918 <CopyDataInit>
  ldr  r2, =_sbss
 800492a:	4a0b      	ldr	r2, [pc, #44]	; (8004958 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800492c:	e002      	b.n	8004934 <LoopFillZerobss>

0800492e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800492e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004930:	f842 3b04 	str.w	r3, [r2], #4

08004934 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004938:	d3f9      	bcc.n	800492e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800493a:	f7fc fd8f 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800493e:	f000 f817 	bl	8004970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004942:	f7fb ff9f 	bl	8000884 <main>
  bx  lr    
 8004946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004948:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800494c:	08005288 	.word	0x08005288
  ldr  r0, =_sdata
 8004950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004954:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004958:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800495c:	20000284 	.word	0x20000284

08004960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004960:	e7fe      	b.n	8004960 <ADC_IRQHandler>
	...

08004964 <__errno>:
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <__errno+0x8>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	2000000c 	.word	0x2000000c

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	4e0d      	ldr	r6, [pc, #52]	; (80049a8 <__libc_init_array+0x38>)
 8004974:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <__libc_init_array+0x3c>)
 8004976:	1ba4      	subs	r4, r4, r6
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	2500      	movs	r5, #0
 800497c:	42a5      	cmp	r5, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	4e0b      	ldr	r6, [pc, #44]	; (80049b0 <__libc_init_array+0x40>)
 8004982:	4c0c      	ldr	r4, [pc, #48]	; (80049b4 <__libc_init_array+0x44>)
 8004984:	f000 fc3e 	bl	8005204 <_init>
 8004988:	1ba4      	subs	r4, r4, r6
 800498a:	10a4      	asrs	r4, r4, #2
 800498c:	2500      	movs	r5, #0
 800498e:	42a5      	cmp	r5, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004998:	4798      	blx	r3
 800499a:	3501      	adds	r5, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049a2:	4798      	blx	r3
 80049a4:	3501      	adds	r5, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08005280 	.word	0x08005280
 80049ac:	08005280 	.word	0x08005280
 80049b0:	08005280 	.word	0x08005280
 80049b4:	08005284 	.word	0x08005284

080049b8 <memset>:
 80049b8:	4402      	add	r2, r0
 80049ba:	4603      	mov	r3, r0
 80049bc:	4293      	cmp	r3, r2
 80049be:	d100      	bne.n	80049c2 <memset+0xa>
 80049c0:	4770      	bx	lr
 80049c2:	f803 1b01 	strb.w	r1, [r3], #1
 80049c6:	e7f9      	b.n	80049bc <memset+0x4>

080049c8 <siprintf>:
 80049c8:	b40e      	push	{r1, r2, r3}
 80049ca:	b500      	push	{lr}
 80049cc:	b09c      	sub	sp, #112	; 0x70
 80049ce:	f44f 7102 	mov.w	r1, #520	; 0x208
 80049d2:	ab1d      	add	r3, sp, #116	; 0x74
 80049d4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80049d8:	9002      	str	r0, [sp, #8]
 80049da:	9006      	str	r0, [sp, #24]
 80049dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049e0:	480a      	ldr	r0, [pc, #40]	; (8004a0c <siprintf+0x44>)
 80049e2:	9104      	str	r1, [sp, #16]
 80049e4:	9107      	str	r1, [sp, #28]
 80049e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ee:	f8ad 1016 	strh.w	r1, [sp, #22]
 80049f2:	6800      	ldr	r0, [r0, #0]
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	a902      	add	r1, sp, #8
 80049f8:	f000 f866 	bl	8004ac8 <_svfiprintf_r>
 80049fc:	9b02      	ldr	r3, [sp, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	b01c      	add	sp, #112	; 0x70
 8004a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a08:	b003      	add	sp, #12
 8004a0a:	4770      	bx	lr
 8004a0c:	2000000c 	.word	0x2000000c

08004a10 <__ssputs_r>:
 8004a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a14:	688e      	ldr	r6, [r1, #8]
 8004a16:	429e      	cmp	r6, r3
 8004a18:	4682      	mov	sl, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4691      	mov	r9, r2
 8004a1e:	4698      	mov	r8, r3
 8004a20:	d835      	bhi.n	8004a8e <__ssputs_r+0x7e>
 8004a22:	898a      	ldrh	r2, [r1, #12]
 8004a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a28:	d031      	beq.n	8004a8e <__ssputs_r+0x7e>
 8004a2a:	6825      	ldr	r5, [r4, #0]
 8004a2c:	6909      	ldr	r1, [r1, #16]
 8004a2e:	1a6f      	subs	r7, r5, r1
 8004a30:	6965      	ldr	r5, [r4, #20]
 8004a32:	2302      	movs	r3, #2
 8004a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a38:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a3c:	f108 0301 	add.w	r3, r8, #1
 8004a40:	443b      	add	r3, r7
 8004a42:	429d      	cmp	r5, r3
 8004a44:	bf38      	it	cc
 8004a46:	461d      	movcc	r5, r3
 8004a48:	0553      	lsls	r3, r2, #21
 8004a4a:	d531      	bpl.n	8004ab0 <__ssputs_r+0xa0>
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	f000 fb39 	bl	80050c4 <_malloc_r>
 8004a52:	4606      	mov	r6, r0
 8004a54:	b950      	cbnz	r0, 8004a6c <__ssputs_r+0x5c>
 8004a56:	230c      	movs	r3, #12
 8004a58:	f8ca 3000 	str.w	r3, [sl]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	463a      	mov	r2, r7
 8004a6e:	6921      	ldr	r1, [r4, #16]
 8004a70:	f000 fab4 	bl	8004fdc <memcpy>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	6126      	str	r6, [r4, #16]
 8004a82:	6165      	str	r5, [r4, #20]
 8004a84:	443e      	add	r6, r7
 8004a86:	1bed      	subs	r5, r5, r7
 8004a88:	6026      	str	r6, [r4, #0]
 8004a8a:	60a5      	str	r5, [r4, #8]
 8004a8c:	4646      	mov	r6, r8
 8004a8e:	4546      	cmp	r6, r8
 8004a90:	bf28      	it	cs
 8004a92:	4646      	movcs	r6, r8
 8004a94:	4632      	mov	r2, r6
 8004a96:	4649      	mov	r1, r9
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	f000 faaa 	bl	8004ff2 <memmove>
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	1b9b      	subs	r3, r3, r6
 8004aa2:	60a3      	str	r3, [r4, #8]
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	441e      	add	r6, r3
 8004aa8:	6026      	str	r6, [r4, #0]
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	f000 fb65 	bl	8005180 <_realloc_r>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1e1      	bne.n	8004a80 <__ssputs_r+0x70>
 8004abc:	6921      	ldr	r1, [r4, #16]
 8004abe:	4650      	mov	r0, sl
 8004ac0:	f000 fab2 	bl	8005028 <_free_r>
 8004ac4:	e7c7      	b.n	8004a56 <__ssputs_r+0x46>
	...

08004ac8 <_svfiprintf_r>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	b09d      	sub	sp, #116	; 0x74
 8004ace:	4680      	mov	r8, r0
 8004ad0:	9303      	str	r3, [sp, #12]
 8004ad2:	898b      	ldrh	r3, [r1, #12]
 8004ad4:	061c      	lsls	r4, r3, #24
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	4616      	mov	r6, r2
 8004ada:	d50f      	bpl.n	8004afc <_svfiprintf_r+0x34>
 8004adc:	690b      	ldr	r3, [r1, #16]
 8004ade:	b96b      	cbnz	r3, 8004afc <_svfiprintf_r+0x34>
 8004ae0:	2140      	movs	r1, #64	; 0x40
 8004ae2:	f000 faef 	bl	80050c4 <_malloc_r>
 8004ae6:	6028      	str	r0, [r5, #0]
 8004ae8:	6128      	str	r0, [r5, #16]
 8004aea:	b928      	cbnz	r0, 8004af8 <_svfiprintf_r+0x30>
 8004aec:	230c      	movs	r3, #12
 8004aee:	f8c8 3000 	str.w	r3, [r8]
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	e0c5      	b.n	8004c84 <_svfiprintf_r+0x1bc>
 8004af8:	2340      	movs	r3, #64	; 0x40
 8004afa:	616b      	str	r3, [r5, #20]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9309      	str	r3, [sp, #36]	; 0x24
 8004b00:	2320      	movs	r3, #32
 8004b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b06:	2330      	movs	r3, #48	; 0x30
 8004b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b0c:	f04f 0b01 	mov.w	fp, #1
 8004b10:	4637      	mov	r7, r6
 8004b12:	463c      	mov	r4, r7
 8004b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d13c      	bne.n	8004b96 <_svfiprintf_r+0xce>
 8004b1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b20:	d00b      	beq.n	8004b3a <_svfiprintf_r+0x72>
 8004b22:	4653      	mov	r3, sl
 8004b24:	4632      	mov	r2, r6
 8004b26:	4629      	mov	r1, r5
 8004b28:	4640      	mov	r0, r8
 8004b2a:	f7ff ff71 	bl	8004a10 <__ssputs_r>
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f000 80a3 	beq.w	8004c7a <_svfiprintf_r+0x1b2>
 8004b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b36:	4453      	add	r3, sl
 8004b38:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3a:	783b      	ldrb	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 809c 	beq.w	8004c7a <_svfiprintf_r+0x1b2>
 8004b42:	2300      	movs	r3, #0
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	9307      	str	r3, [sp, #28]
 8004b4c:	9205      	str	r2, [sp, #20]
 8004b4e:	9306      	str	r3, [sp, #24]
 8004b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b54:	931a      	str	r3, [sp, #104]	; 0x68
 8004b56:	2205      	movs	r2, #5
 8004b58:	7821      	ldrb	r1, [r4, #0]
 8004b5a:	4850      	ldr	r0, [pc, #320]	; (8004c9c <_svfiprintf_r+0x1d4>)
 8004b5c:	f7fb fb58 	bl	8000210 <memchr>
 8004b60:	1c67      	adds	r7, r4, #1
 8004b62:	9b04      	ldr	r3, [sp, #16]
 8004b64:	b9d8      	cbnz	r0, 8004b9e <_svfiprintf_r+0xd6>
 8004b66:	06d9      	lsls	r1, r3, #27
 8004b68:	bf44      	itt	mi
 8004b6a:	2220      	movmi	r2, #32
 8004b6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b70:	071a      	lsls	r2, r3, #28
 8004b72:	bf44      	itt	mi
 8004b74:	222b      	movmi	r2, #43	; 0x2b
 8004b76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b7a:	7822      	ldrb	r2, [r4, #0]
 8004b7c:	2a2a      	cmp	r2, #42	; 0x2a
 8004b7e:	d016      	beq.n	8004bae <_svfiprintf_r+0xe6>
 8004b80:	9a07      	ldr	r2, [sp, #28]
 8004b82:	2100      	movs	r1, #0
 8004b84:	200a      	movs	r0, #10
 8004b86:	4627      	mov	r7, r4
 8004b88:	3401      	adds	r4, #1
 8004b8a:	783b      	ldrb	r3, [r7, #0]
 8004b8c:	3b30      	subs	r3, #48	; 0x30
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	d951      	bls.n	8004c36 <_svfiprintf_r+0x16e>
 8004b92:	b1c9      	cbz	r1, 8004bc8 <_svfiprintf_r+0x100>
 8004b94:	e011      	b.n	8004bba <_svfiprintf_r+0xf2>
 8004b96:	2b25      	cmp	r3, #37	; 0x25
 8004b98:	d0c0      	beq.n	8004b1c <_svfiprintf_r+0x54>
 8004b9a:	4627      	mov	r7, r4
 8004b9c:	e7b9      	b.n	8004b12 <_svfiprintf_r+0x4a>
 8004b9e:	4a3f      	ldr	r2, [pc, #252]	; (8004c9c <_svfiprintf_r+0x1d4>)
 8004ba0:	1a80      	subs	r0, r0, r2
 8004ba2:	fa0b f000 	lsl.w	r0, fp, r0
 8004ba6:	4318      	orrs	r0, r3
 8004ba8:	9004      	str	r0, [sp, #16]
 8004baa:	463c      	mov	r4, r7
 8004bac:	e7d3      	b.n	8004b56 <_svfiprintf_r+0x8e>
 8004bae:	9a03      	ldr	r2, [sp, #12]
 8004bb0:	1d11      	adds	r1, r2, #4
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	9103      	str	r1, [sp, #12]
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	db01      	blt.n	8004bbe <_svfiprintf_r+0xf6>
 8004bba:	9207      	str	r2, [sp, #28]
 8004bbc:	e004      	b.n	8004bc8 <_svfiprintf_r+0x100>
 8004bbe:	4252      	negs	r2, r2
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	9207      	str	r2, [sp, #28]
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	783b      	ldrb	r3, [r7, #0]
 8004bca:	2b2e      	cmp	r3, #46	; 0x2e
 8004bcc:	d10e      	bne.n	8004bec <_svfiprintf_r+0x124>
 8004bce:	787b      	ldrb	r3, [r7, #1]
 8004bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd2:	f107 0101 	add.w	r1, r7, #1
 8004bd6:	d132      	bne.n	8004c3e <_svfiprintf_r+0x176>
 8004bd8:	9b03      	ldr	r3, [sp, #12]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	9203      	str	r2, [sp, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bfb8      	it	lt
 8004be4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004be8:	3702      	adds	r7, #2
 8004bea:	9305      	str	r3, [sp, #20]
 8004bec:	4c2c      	ldr	r4, [pc, #176]	; (8004ca0 <_svfiprintf_r+0x1d8>)
 8004bee:	7839      	ldrb	r1, [r7, #0]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7fb fb0c 	bl	8000210 <memchr>
 8004bf8:	b138      	cbz	r0, 8004c0a <_svfiprintf_r+0x142>
 8004bfa:	2340      	movs	r3, #64	; 0x40
 8004bfc:	1b00      	subs	r0, r0, r4
 8004bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8004c02:	9b04      	ldr	r3, [sp, #16]
 8004c04:	4303      	orrs	r3, r0
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	3701      	adds	r7, #1
 8004c0a:	7839      	ldrb	r1, [r7, #0]
 8004c0c:	4825      	ldr	r0, [pc, #148]	; (8004ca4 <_svfiprintf_r+0x1dc>)
 8004c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c12:	2206      	movs	r2, #6
 8004c14:	1c7e      	adds	r6, r7, #1
 8004c16:	f7fb fafb 	bl	8000210 <memchr>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d035      	beq.n	8004c8a <_svfiprintf_r+0x1c2>
 8004c1e:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <_svfiprintf_r+0x1e0>)
 8004c20:	b9fb      	cbnz	r3, 8004c62 <_svfiprintf_r+0x19a>
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	3307      	adds	r3, #7
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	9303      	str	r3, [sp, #12]
 8004c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c30:	444b      	add	r3, r9
 8004c32:	9309      	str	r3, [sp, #36]	; 0x24
 8004c34:	e76c      	b.n	8004b10 <_svfiprintf_r+0x48>
 8004c36:	fb00 3202 	mla	r2, r0, r2, r3
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	e7a3      	b.n	8004b86 <_svfiprintf_r+0xbe>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9305      	str	r3, [sp, #20]
 8004c42:	4618      	mov	r0, r3
 8004c44:	240a      	movs	r4, #10
 8004c46:	460f      	mov	r7, r1
 8004c48:	3101      	adds	r1, #1
 8004c4a:	783a      	ldrb	r2, [r7, #0]
 8004c4c:	3a30      	subs	r2, #48	; 0x30
 8004c4e:	2a09      	cmp	r2, #9
 8004c50:	d903      	bls.n	8004c5a <_svfiprintf_r+0x192>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ca      	beq.n	8004bec <_svfiprintf_r+0x124>
 8004c56:	9005      	str	r0, [sp, #20]
 8004c58:	e7c8      	b.n	8004bec <_svfiprintf_r+0x124>
 8004c5a:	fb04 2000 	mla	r0, r4, r0, r2
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e7f1      	b.n	8004c46 <_svfiprintf_r+0x17e>
 8004c62:	ab03      	add	r3, sp, #12
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	462a      	mov	r2, r5
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <_svfiprintf_r+0x1e4>)
 8004c6a:	a904      	add	r1, sp, #16
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	f3af 8000 	nop.w
 8004c72:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c76:	4681      	mov	r9, r0
 8004c78:	d1d9      	bne.n	8004c2e <_svfiprintf_r+0x166>
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	065b      	lsls	r3, r3, #25
 8004c7e:	f53f af38 	bmi.w	8004af2 <_svfiprintf_r+0x2a>
 8004c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c84:	b01d      	add	sp, #116	; 0x74
 8004c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8a:	ab03      	add	r3, sp, #12
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	462a      	mov	r2, r5
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <_svfiprintf_r+0x1e4>)
 8004c92:	a904      	add	r1, sp, #16
 8004c94:	4640      	mov	r0, r8
 8004c96:	f000 f881 	bl	8004d9c <_printf_i>
 8004c9a:	e7ea      	b.n	8004c72 <_svfiprintf_r+0x1aa>
 8004c9c:	08005244 	.word	0x08005244
 8004ca0:	0800524a 	.word	0x0800524a
 8004ca4:	0800524e 	.word	0x0800524e
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	08004a11 	.word	0x08004a11

08004cb0 <_printf_common>:
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	4691      	mov	r9, r2
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	688a      	ldr	r2, [r1, #8]
 8004cba:	690b      	ldr	r3, [r1, #16]
 8004cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	bfb8      	it	lt
 8004cc4:	4613      	movlt	r3, r2
 8004cc6:	f8c9 3000 	str.w	r3, [r9]
 8004cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b112      	cbz	r2, 8004cda <_printf_common+0x2a>
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f8c9 3000 	str.w	r3, [r9]
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	0699      	lsls	r1, r3, #26
 8004cde:	bf42      	ittt	mi
 8004ce0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ce4:	3302      	addmi	r3, #2
 8004ce6:	f8c9 3000 	strmi.w	r3, [r9]
 8004cea:	6825      	ldr	r5, [r4, #0]
 8004cec:	f015 0506 	ands.w	r5, r5, #6
 8004cf0:	d107      	bne.n	8004d02 <_printf_common+0x52>
 8004cf2:	f104 0a19 	add.w	sl, r4, #25
 8004cf6:	68e3      	ldr	r3, [r4, #12]
 8004cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	429d      	cmp	r5, r3
 8004d00:	db29      	blt.n	8004d56 <_printf_common+0xa6>
 8004d02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d06:	6822      	ldr	r2, [r4, #0]
 8004d08:	3300      	adds	r3, #0
 8004d0a:	bf18      	it	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	0692      	lsls	r2, r2, #26
 8004d10:	d42e      	bmi.n	8004d70 <_printf_common+0xc0>
 8004d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d16:	4639      	mov	r1, r7
 8004d18:	4630      	mov	r0, r6
 8004d1a:	47c0      	blx	r8
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d021      	beq.n	8004d64 <_printf_common+0xb4>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	68e5      	ldr	r5, [r4, #12]
 8004d24:	f8d9 2000 	ldr.w	r2, [r9]
 8004d28:	f003 0306 	and.w	r3, r3, #6
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	bf08      	it	eq
 8004d30:	1aad      	subeq	r5, r5, r2
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	6922      	ldr	r2, [r4, #16]
 8004d36:	bf0c      	ite	eq
 8004d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d3c:	2500      	movne	r5, #0
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	bfc4      	itt	gt
 8004d42:	1a9b      	subgt	r3, r3, r2
 8004d44:	18ed      	addgt	r5, r5, r3
 8004d46:	f04f 0900 	mov.w	r9, #0
 8004d4a:	341a      	adds	r4, #26
 8004d4c:	454d      	cmp	r5, r9
 8004d4e:	d11b      	bne.n	8004d88 <_printf_common+0xd8>
 8004d50:	2000      	movs	r0, #0
 8004d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d56:	2301      	movs	r3, #1
 8004d58:	4652      	mov	r2, sl
 8004d5a:	4639      	mov	r1, r7
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	47c0      	blx	r8
 8004d60:	3001      	adds	r0, #1
 8004d62:	d103      	bne.n	8004d6c <_printf_common+0xbc>
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	e7c2      	b.n	8004cf6 <_printf_common+0x46>
 8004d70:	18e1      	adds	r1, r4, r3
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	2030      	movs	r0, #48	; 0x30
 8004d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d7a:	4422      	add	r2, r4
 8004d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d84:	3302      	adds	r3, #2
 8004d86:	e7c4      	b.n	8004d12 <_printf_common+0x62>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	4630      	mov	r0, r6
 8004d90:	47c0      	blx	r8
 8004d92:	3001      	adds	r0, #1
 8004d94:	d0e6      	beq.n	8004d64 <_printf_common+0xb4>
 8004d96:	f109 0901 	add.w	r9, r9, #1
 8004d9a:	e7d7      	b.n	8004d4c <_printf_common+0x9c>

08004d9c <_printf_i>:
 8004d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004da0:	4617      	mov	r7, r2
 8004da2:	7e0a      	ldrb	r2, [r1, #24]
 8004da4:	b085      	sub	sp, #20
 8004da6:	2a6e      	cmp	r2, #110	; 0x6e
 8004da8:	4698      	mov	r8, r3
 8004daa:	4606      	mov	r6, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004db0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004db4:	f000 80bc 	beq.w	8004f30 <_printf_i+0x194>
 8004db8:	d81a      	bhi.n	8004df0 <_printf_i+0x54>
 8004dba:	2a63      	cmp	r2, #99	; 0x63
 8004dbc:	d02e      	beq.n	8004e1c <_printf_i+0x80>
 8004dbe:	d80a      	bhi.n	8004dd6 <_printf_i+0x3a>
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	f000 80c8 	beq.w	8004f56 <_printf_i+0x1ba>
 8004dc6:	2a58      	cmp	r2, #88	; 0x58
 8004dc8:	f000 808a 	beq.w	8004ee0 <_printf_i+0x144>
 8004dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004dd4:	e02a      	b.n	8004e2c <_printf_i+0x90>
 8004dd6:	2a64      	cmp	r2, #100	; 0x64
 8004dd8:	d001      	beq.n	8004dde <_printf_i+0x42>
 8004dda:	2a69      	cmp	r2, #105	; 0x69
 8004ddc:	d1f6      	bne.n	8004dcc <_printf_i+0x30>
 8004dde:	6821      	ldr	r1, [r4, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004de6:	d023      	beq.n	8004e30 <_printf_i+0x94>
 8004de8:	1d11      	adds	r1, r2, #4
 8004dea:	6019      	str	r1, [r3, #0]
 8004dec:	6813      	ldr	r3, [r2, #0]
 8004dee:	e027      	b.n	8004e40 <_printf_i+0xa4>
 8004df0:	2a73      	cmp	r2, #115	; 0x73
 8004df2:	f000 80b4 	beq.w	8004f5e <_printf_i+0x1c2>
 8004df6:	d808      	bhi.n	8004e0a <_printf_i+0x6e>
 8004df8:	2a6f      	cmp	r2, #111	; 0x6f
 8004dfa:	d02a      	beq.n	8004e52 <_printf_i+0xb6>
 8004dfc:	2a70      	cmp	r2, #112	; 0x70
 8004dfe:	d1e5      	bne.n	8004dcc <_printf_i+0x30>
 8004e00:	680a      	ldr	r2, [r1, #0]
 8004e02:	f042 0220 	orr.w	r2, r2, #32
 8004e06:	600a      	str	r2, [r1, #0]
 8004e08:	e003      	b.n	8004e12 <_printf_i+0x76>
 8004e0a:	2a75      	cmp	r2, #117	; 0x75
 8004e0c:	d021      	beq.n	8004e52 <_printf_i+0xb6>
 8004e0e:	2a78      	cmp	r2, #120	; 0x78
 8004e10:	d1dc      	bne.n	8004dcc <_printf_i+0x30>
 8004e12:	2278      	movs	r2, #120	; 0x78
 8004e14:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004e18:	496e      	ldr	r1, [pc, #440]	; (8004fd4 <_printf_i+0x238>)
 8004e1a:	e064      	b.n	8004ee6 <_printf_i+0x14a>
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004e22:	1d11      	adds	r1, r2, #4
 8004e24:	6019      	str	r1, [r3, #0]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0a3      	b.n	8004f78 <_printf_i+0x1dc>
 8004e30:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004e34:	f102 0104 	add.w	r1, r2, #4
 8004e38:	6019      	str	r1, [r3, #0]
 8004e3a:	d0d7      	beq.n	8004dec <_printf_i+0x50>
 8004e3c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da03      	bge.n	8004e4c <_printf_i+0xb0>
 8004e44:	222d      	movs	r2, #45	; 0x2d
 8004e46:	425b      	negs	r3, r3
 8004e48:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e4c:	4962      	ldr	r1, [pc, #392]	; (8004fd8 <_printf_i+0x23c>)
 8004e4e:	220a      	movs	r2, #10
 8004e50:	e017      	b.n	8004e82 <_printf_i+0xe6>
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e5a:	d003      	beq.n	8004e64 <_printf_i+0xc8>
 8004e5c:	1d08      	adds	r0, r1, #4
 8004e5e:	6018      	str	r0, [r3, #0]
 8004e60:	680b      	ldr	r3, [r1, #0]
 8004e62:	e006      	b.n	8004e72 <_printf_i+0xd6>
 8004e64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e68:	f101 0004 	add.w	r0, r1, #4
 8004e6c:	6018      	str	r0, [r3, #0]
 8004e6e:	d0f7      	beq.n	8004e60 <_printf_i+0xc4>
 8004e70:	880b      	ldrh	r3, [r1, #0]
 8004e72:	4959      	ldr	r1, [pc, #356]	; (8004fd8 <_printf_i+0x23c>)
 8004e74:	2a6f      	cmp	r2, #111	; 0x6f
 8004e76:	bf14      	ite	ne
 8004e78:	220a      	movne	r2, #10
 8004e7a:	2208      	moveq	r2, #8
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004e82:	6865      	ldr	r5, [r4, #4]
 8004e84:	60a5      	str	r5, [r4, #8]
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	f2c0 809c 	blt.w	8004fc4 <_printf_i+0x228>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	f020 0004 	bic.w	r0, r0, #4
 8004e92:	6020      	str	r0, [r4, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d13f      	bne.n	8004f18 <_printf_i+0x17c>
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	f040 8095 	bne.w	8004fc8 <_printf_i+0x22c>
 8004e9e:	4675      	mov	r5, lr
 8004ea0:	2a08      	cmp	r2, #8
 8004ea2:	d10b      	bne.n	8004ebc <_printf_i+0x120>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07da      	lsls	r2, r3, #31
 8004ea8:	d508      	bpl.n	8004ebc <_printf_i+0x120>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	6862      	ldr	r2, [r4, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	bfde      	ittt	le
 8004eb2:	2330      	movle	r3, #48	; 0x30
 8004eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ebc:	ebae 0305 	sub.w	r3, lr, r5
 8004ec0:	6123      	str	r3, [r4, #16]
 8004ec2:	f8cd 8000 	str.w	r8, [sp]
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	aa03      	add	r2, sp, #12
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f7ff feef 	bl	8004cb0 <_printf_common>
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d155      	bne.n	8004f82 <_printf_i+0x1e6>
 8004ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eda:	b005      	add	sp, #20
 8004edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ee0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004ee4:	493c      	ldr	r1, [pc, #240]	; (8004fd8 <_printf_i+0x23c>)
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004eee:	f100 0504 	add.w	r5, r0, #4
 8004ef2:	601d      	str	r5, [r3, #0]
 8004ef4:	d001      	beq.n	8004efa <_printf_i+0x15e>
 8004ef6:	6803      	ldr	r3, [r0, #0]
 8004ef8:	e002      	b.n	8004f00 <_printf_i+0x164>
 8004efa:	0655      	lsls	r5, r2, #25
 8004efc:	d5fb      	bpl.n	8004ef6 <_printf_i+0x15a>
 8004efe:	8803      	ldrh	r3, [r0, #0]
 8004f00:	07d0      	lsls	r0, r2, #31
 8004f02:	bf44      	itt	mi
 8004f04:	f042 0220 	orrmi.w	r2, r2, #32
 8004f08:	6022      	strmi	r2, [r4, #0]
 8004f0a:	b91b      	cbnz	r3, 8004f14 <_printf_i+0x178>
 8004f0c:	6822      	ldr	r2, [r4, #0]
 8004f0e:	f022 0220 	bic.w	r2, r2, #32
 8004f12:	6022      	str	r2, [r4, #0]
 8004f14:	2210      	movs	r2, #16
 8004f16:	e7b1      	b.n	8004e7c <_printf_i+0xe0>
 8004f18:	4675      	mov	r5, lr
 8004f1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f1e:	fb02 3310 	mls	r3, r2, r0, r3
 8004f22:	5ccb      	ldrb	r3, [r1, r3]
 8004f24:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d1f5      	bne.n	8004f1a <_printf_i+0x17e>
 8004f2e:	e7b7      	b.n	8004ea0 <_printf_i+0x104>
 8004f30:	6808      	ldr	r0, [r1, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	6949      	ldr	r1, [r1, #20]
 8004f36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f3a:	d004      	beq.n	8004f46 <_printf_i+0x1aa>
 8004f3c:	1d10      	adds	r0, r2, #4
 8004f3e:	6018      	str	r0, [r3, #0]
 8004f40:	6813      	ldr	r3, [r2, #0]
 8004f42:	6019      	str	r1, [r3, #0]
 8004f44:	e007      	b.n	8004f56 <_printf_i+0x1ba>
 8004f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f4a:	f102 0004 	add.w	r0, r2, #4
 8004f4e:	6018      	str	r0, [r3, #0]
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	d0f6      	beq.n	8004f42 <_printf_i+0x1a6>
 8004f54:	8019      	strh	r1, [r3, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	6123      	str	r3, [r4, #16]
 8004f5a:	4675      	mov	r5, lr
 8004f5c:	e7b1      	b.n	8004ec2 <_printf_i+0x126>
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	1d11      	adds	r1, r2, #4
 8004f62:	6019      	str	r1, [r3, #0]
 8004f64:	6815      	ldr	r5, [r2, #0]
 8004f66:	6862      	ldr	r2, [r4, #4]
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f7fb f950 	bl	8000210 <memchr>
 8004f70:	b108      	cbz	r0, 8004f76 <_printf_i+0x1da>
 8004f72:	1b40      	subs	r0, r0, r5
 8004f74:	6060      	str	r0, [r4, #4]
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	6123      	str	r3, [r4, #16]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f80:	e79f      	b.n	8004ec2 <_printf_i+0x126>
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	462a      	mov	r2, r5
 8004f86:	4639      	mov	r1, r7
 8004f88:	4630      	mov	r0, r6
 8004f8a:	47c0      	blx	r8
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d0a2      	beq.n	8004ed6 <_printf_i+0x13a>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	079b      	lsls	r3, r3, #30
 8004f94:	d507      	bpl.n	8004fa6 <_printf_i+0x20a>
 8004f96:	2500      	movs	r5, #0
 8004f98:	f104 0919 	add.w	r9, r4, #25
 8004f9c:	68e3      	ldr	r3, [r4, #12]
 8004f9e:	9a03      	ldr	r2, [sp, #12]
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	429d      	cmp	r5, r3
 8004fa4:	db05      	blt.n	8004fb2 <_printf_i+0x216>
 8004fa6:	68e0      	ldr	r0, [r4, #12]
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	4298      	cmp	r0, r3
 8004fac:	bfb8      	it	lt
 8004fae:	4618      	movlt	r0, r3
 8004fb0:	e793      	b.n	8004eda <_printf_i+0x13e>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	464a      	mov	r2, r9
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	4630      	mov	r0, r6
 8004fba:	47c0      	blx	r8
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d08a      	beq.n	8004ed6 <_printf_i+0x13a>
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7eb      	b.n	8004f9c <_printf_i+0x200>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1a7      	bne.n	8004f18 <_printf_i+0x17c>
 8004fc8:	780b      	ldrb	r3, [r1, #0]
 8004fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd2:	e765      	b.n	8004ea0 <_printf_i+0x104>
 8004fd4:	08005266 	.word	0x08005266
 8004fd8:	08005255 	.word	0x08005255

08004fdc <memcpy>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	1e43      	subs	r3, r0, #1
 8004fe0:	440a      	add	r2, r1
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	d100      	bne.n	8004fe8 <memcpy+0xc>
 8004fe6:	bd10      	pop	{r4, pc}
 8004fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff0:	e7f7      	b.n	8004fe2 <memcpy+0x6>

08004ff2 <memmove>:
 8004ff2:	4288      	cmp	r0, r1
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	eb01 0302 	add.w	r3, r1, r2
 8004ffa:	d803      	bhi.n	8005004 <memmove+0x12>
 8004ffc:	1e42      	subs	r2, r0, #1
 8004ffe:	4299      	cmp	r1, r3
 8005000:	d10c      	bne.n	800501c <memmove+0x2a>
 8005002:	bd10      	pop	{r4, pc}
 8005004:	4298      	cmp	r0, r3
 8005006:	d2f9      	bcs.n	8004ffc <memmove+0xa>
 8005008:	1881      	adds	r1, r0, r2
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	42d3      	cmn	r3, r2
 800500e:	d100      	bne.n	8005012 <memmove+0x20>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005016:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800501a:	e7f7      	b.n	800500c <memmove+0x1a>
 800501c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005020:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005024:	e7eb      	b.n	8004ffe <memmove+0xc>
	...

08005028 <_free_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	2900      	cmp	r1, #0
 800502e:	d045      	beq.n	80050bc <_free_r+0x94>
 8005030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005034:	1f0c      	subs	r4, r1, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	18e4      	addlt	r4, r4, r3
 800503c:	f000 f8d6 	bl	80051ec <__malloc_lock>
 8005040:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <_free_r+0x98>)
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	4610      	mov	r0, r2
 8005046:	b933      	cbnz	r3, 8005056 <_free_r+0x2e>
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	6014      	str	r4, [r2, #0]
 800504c:	4628      	mov	r0, r5
 800504e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005052:	f000 b8cc 	b.w	80051ee <__malloc_unlock>
 8005056:	42a3      	cmp	r3, r4
 8005058:	d90c      	bls.n	8005074 <_free_r+0x4c>
 800505a:	6821      	ldr	r1, [r4, #0]
 800505c:	1862      	adds	r2, r4, r1
 800505e:	4293      	cmp	r3, r2
 8005060:	bf04      	itt	eq
 8005062:	681a      	ldreq	r2, [r3, #0]
 8005064:	685b      	ldreq	r3, [r3, #4]
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	bf04      	itt	eq
 800506a:	1852      	addeq	r2, r2, r1
 800506c:	6022      	streq	r2, [r4, #0]
 800506e:	6004      	str	r4, [r0, #0]
 8005070:	e7ec      	b.n	800504c <_free_r+0x24>
 8005072:	4613      	mov	r3, r2
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	b10a      	cbz	r2, 800507c <_free_r+0x54>
 8005078:	42a2      	cmp	r2, r4
 800507a:	d9fa      	bls.n	8005072 <_free_r+0x4a>
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	1858      	adds	r0, r3, r1
 8005080:	42a0      	cmp	r0, r4
 8005082:	d10b      	bne.n	800509c <_free_r+0x74>
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	4401      	add	r1, r0
 8005088:	1858      	adds	r0, r3, r1
 800508a:	4282      	cmp	r2, r0
 800508c:	6019      	str	r1, [r3, #0]
 800508e:	d1dd      	bne.n	800504c <_free_r+0x24>
 8005090:	6810      	ldr	r0, [r2, #0]
 8005092:	6852      	ldr	r2, [r2, #4]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	4401      	add	r1, r0
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	e7d7      	b.n	800504c <_free_r+0x24>
 800509c:	d902      	bls.n	80050a4 <_free_r+0x7c>
 800509e:	230c      	movs	r3, #12
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	e7d3      	b.n	800504c <_free_r+0x24>
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	1821      	adds	r1, r4, r0
 80050a8:	428a      	cmp	r2, r1
 80050aa:	bf04      	itt	eq
 80050ac:	6811      	ldreq	r1, [r2, #0]
 80050ae:	6852      	ldreq	r2, [r2, #4]
 80050b0:	6062      	str	r2, [r4, #4]
 80050b2:	bf04      	itt	eq
 80050b4:	1809      	addeq	r1, r1, r0
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	605c      	str	r4, [r3, #4]
 80050ba:	e7c7      	b.n	800504c <_free_r+0x24>
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
 80050be:	bf00      	nop
 80050c0:	20000098 	.word	0x20000098

080050c4 <_malloc_r>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	1ccd      	adds	r5, r1, #3
 80050c8:	f025 0503 	bic.w	r5, r5, #3
 80050cc:	3508      	adds	r5, #8
 80050ce:	2d0c      	cmp	r5, #12
 80050d0:	bf38      	it	cc
 80050d2:	250c      	movcc	r5, #12
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	4606      	mov	r6, r0
 80050d8:	db01      	blt.n	80050de <_malloc_r+0x1a>
 80050da:	42a9      	cmp	r1, r5
 80050dc:	d903      	bls.n	80050e6 <_malloc_r+0x22>
 80050de:	230c      	movs	r3, #12
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	2000      	movs	r0, #0
 80050e4:	bd70      	pop	{r4, r5, r6, pc}
 80050e6:	f000 f881 	bl	80051ec <__malloc_lock>
 80050ea:	4a23      	ldr	r2, [pc, #140]	; (8005178 <_malloc_r+0xb4>)
 80050ec:	6814      	ldr	r4, [r2, #0]
 80050ee:	4621      	mov	r1, r4
 80050f0:	b991      	cbnz	r1, 8005118 <_malloc_r+0x54>
 80050f2:	4c22      	ldr	r4, [pc, #136]	; (800517c <_malloc_r+0xb8>)
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	b91b      	cbnz	r3, 8005100 <_malloc_r+0x3c>
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 f867 	bl	80051cc <_sbrk_r>
 80050fe:	6020      	str	r0, [r4, #0]
 8005100:	4629      	mov	r1, r5
 8005102:	4630      	mov	r0, r6
 8005104:	f000 f862 	bl	80051cc <_sbrk_r>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d126      	bne.n	800515a <_malloc_r+0x96>
 800510c:	230c      	movs	r3, #12
 800510e:	6033      	str	r3, [r6, #0]
 8005110:	4630      	mov	r0, r6
 8005112:	f000 f86c 	bl	80051ee <__malloc_unlock>
 8005116:	e7e4      	b.n	80050e2 <_malloc_r+0x1e>
 8005118:	680b      	ldr	r3, [r1, #0]
 800511a:	1b5b      	subs	r3, r3, r5
 800511c:	d41a      	bmi.n	8005154 <_malloc_r+0x90>
 800511e:	2b0b      	cmp	r3, #11
 8005120:	d90f      	bls.n	8005142 <_malloc_r+0x7e>
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	50cd      	str	r5, [r1, r3]
 8005126:	18cc      	adds	r4, r1, r3
 8005128:	4630      	mov	r0, r6
 800512a:	f000 f860 	bl	80051ee <__malloc_unlock>
 800512e:	f104 000b 	add.w	r0, r4, #11
 8005132:	1d23      	adds	r3, r4, #4
 8005134:	f020 0007 	bic.w	r0, r0, #7
 8005138:	1ac3      	subs	r3, r0, r3
 800513a:	d01b      	beq.n	8005174 <_malloc_r+0xb0>
 800513c:	425a      	negs	r2, r3
 800513e:	50e2      	str	r2, [r4, r3]
 8005140:	bd70      	pop	{r4, r5, r6, pc}
 8005142:	428c      	cmp	r4, r1
 8005144:	bf0d      	iteet	eq
 8005146:	6863      	ldreq	r3, [r4, #4]
 8005148:	684b      	ldrne	r3, [r1, #4]
 800514a:	6063      	strne	r3, [r4, #4]
 800514c:	6013      	streq	r3, [r2, #0]
 800514e:	bf18      	it	ne
 8005150:	460c      	movne	r4, r1
 8005152:	e7e9      	b.n	8005128 <_malloc_r+0x64>
 8005154:	460c      	mov	r4, r1
 8005156:	6849      	ldr	r1, [r1, #4]
 8005158:	e7ca      	b.n	80050f0 <_malloc_r+0x2c>
 800515a:	1cc4      	adds	r4, r0, #3
 800515c:	f024 0403 	bic.w	r4, r4, #3
 8005160:	42a0      	cmp	r0, r4
 8005162:	d005      	beq.n	8005170 <_malloc_r+0xac>
 8005164:	1a21      	subs	r1, r4, r0
 8005166:	4630      	mov	r0, r6
 8005168:	f000 f830 	bl	80051cc <_sbrk_r>
 800516c:	3001      	adds	r0, #1
 800516e:	d0cd      	beq.n	800510c <_malloc_r+0x48>
 8005170:	6025      	str	r5, [r4, #0]
 8005172:	e7d9      	b.n	8005128 <_malloc_r+0x64>
 8005174:	bd70      	pop	{r4, r5, r6, pc}
 8005176:	bf00      	nop
 8005178:	20000098 	.word	0x20000098
 800517c:	2000009c 	.word	0x2000009c

08005180 <_realloc_r>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	4607      	mov	r7, r0
 8005184:	4614      	mov	r4, r2
 8005186:	460e      	mov	r6, r1
 8005188:	b921      	cbnz	r1, 8005194 <_realloc_r+0x14>
 800518a:	4611      	mov	r1, r2
 800518c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005190:	f7ff bf98 	b.w	80050c4 <_malloc_r>
 8005194:	b922      	cbnz	r2, 80051a0 <_realloc_r+0x20>
 8005196:	f7ff ff47 	bl	8005028 <_free_r>
 800519a:	4625      	mov	r5, r4
 800519c:	4628      	mov	r0, r5
 800519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a0:	f000 f826 	bl	80051f0 <_malloc_usable_size_r>
 80051a4:	4284      	cmp	r4, r0
 80051a6:	d90f      	bls.n	80051c8 <_realloc_r+0x48>
 80051a8:	4621      	mov	r1, r4
 80051aa:	4638      	mov	r0, r7
 80051ac:	f7ff ff8a 	bl	80050c4 <_malloc_r>
 80051b0:	4605      	mov	r5, r0
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d0f2      	beq.n	800519c <_realloc_r+0x1c>
 80051b6:	4631      	mov	r1, r6
 80051b8:	4622      	mov	r2, r4
 80051ba:	f7ff ff0f 	bl	8004fdc <memcpy>
 80051be:	4631      	mov	r1, r6
 80051c0:	4638      	mov	r0, r7
 80051c2:	f7ff ff31 	bl	8005028 <_free_r>
 80051c6:	e7e9      	b.n	800519c <_realloc_r+0x1c>
 80051c8:	4635      	mov	r5, r6
 80051ca:	e7e7      	b.n	800519c <_realloc_r+0x1c>

080051cc <_sbrk_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4c06      	ldr	r4, [pc, #24]	; (80051e8 <_sbrk_r+0x1c>)
 80051d0:	2300      	movs	r3, #0
 80051d2:	4605      	mov	r5, r0
 80051d4:	4608      	mov	r0, r1
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	f7fc f914 	bl	8001404 <_sbrk>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_sbrk_r+0x1a>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_sbrk_r+0x1a>
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20000280 	.word	0x20000280

080051ec <__malloc_lock>:
 80051ec:	4770      	bx	lr

080051ee <__malloc_unlock>:
 80051ee:	4770      	bx	lr

080051f0 <_malloc_usable_size_r>:
 80051f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f1a0 0004 	sub.w	r0, r0, #4
 80051fa:	bfbc      	itt	lt
 80051fc:	580b      	ldrlt	r3, [r1, r0]
 80051fe:	18c0      	addlt	r0, r0, r3
 8005200:	4770      	bx	lr
	...

08005204 <_init>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr

08005210 <_fini>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	bf00      	nop
 8005214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005216:	bc08      	pop	{r3}
 8005218:	469e      	mov	lr, r3
 800521a:	4770      	bx	lr
